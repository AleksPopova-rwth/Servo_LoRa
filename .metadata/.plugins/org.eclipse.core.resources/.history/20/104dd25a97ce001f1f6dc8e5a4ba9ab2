/* USER CODE BEGIN Header */
/**
 ******************************************************************************
 * @file           : main.c
 * @brief          : Main program body
 ******************************************************************************
 * @attention
 *
 * Copyright (c) 2024 STMicroelectronics.
 * All rights reserved.
 *
 * This software is licensed under terms that can be found in the LICENSE file
 * in the root directory of this software component.
 * If no LICENSE file comes with this software, it is provided AS-IS.
 *Stabile Uebrtragung bei 15,625 kBits pro Sekunde.
 ******************************************************************************
 */

//TODO: structure for radio
/* USER CODE END Header */
/* Includes ------------------------------------------------------------------*/
#include "main.h"

/* Private includes ----------------------------------------------------------*/
/* USER CODE BEGIN Includes */
#include "string.h"
#include "stdio.h"
#include "Degree90.h"
#include "Degree5.h"
#define DEBUG //for debug mode
#define WAIT_COUNTER 1000
/* USER CODE END Includes */

/* Private typedef -----------------------------------------------------------*/
/* USER CODE BEGIN PTD */
uint8_t txData_const = 0xC0;  // Beispiel: Opcode für GetStatus
uint8_t rxData_const = 0x00;  // Hier wird die Antwort gespeichert
char uart_buf[100];
int uart_buf_len;
uint8_t busy, nss, reset;
uint8_t rxStartBufferPointer = 0x00;
uint8_t payloadLength = 1;
uint8_t servo_angle = 0;

/* USER CODE END PTD */

/* Private define ------------------------------------------------------------*/
/* USER CODE BEGIN PD */

void Erase_Flash(void) {
	FLASH_EraseInitTypeDef EraseInitStruct;
	uint32_t SectorError;

	// Unlock the Flash
	HAL_FLASH_Unlock();

	// Configure the erase operation
	EraseInitStruct.TypeErase = FLASH_TYPEERASE_SECTORS;
	EraseInitStruct.VoltageRange = FLASH_VOLTAGE_RANGE_3;
	EraseInitStruct.Sector = FLASH_SECTOR_0; // Specify sector to erase
	EraseInitStruct.NbSectors = 1;

	// Erase the sector
	if (HAL_FLASHEx_Erase(&EraseInitStruct, &SectorError) != HAL_OK) {
		// Handle error
	}

	// Lock the Flash
	HAL_FLASH_Lock();
}
/* USER CODE END PD */

/* Private macro -------------------------------------------------------------*/
/* USER CODE BEGIN PM */
//#define GND_CONTROL_PIN GPIO_PIN_1
//#define GND_CONTROL_PORT GPIOA
//
//void toggle_gnd(bool state) {
//    if (state) {
//        HAL_GPIO_WritePin(GND_CONTROL_PORT, GND_CONTROL_PIN, GPIO_PIN_SET); // GND einschalten
//    } else {
//        HAL_GPIO_WritePin(GND_CONTROL_PORT, GND_CONTROL_PIN, GPIO_PIN_RESET); // GND ausschalten
//    }
//}

/* USER CODE END PM */

/* Private variables ---------------------------------------------------------*/
ADC_HandleTypeDef hadc1;

SPI_HandleTypeDef hspi1;

TIM_HandleTypeDef htim1;
TIM_HandleTypeDef htim2;

UART_HandleTypeDef huart2;

/* USER CODE BEGIN PV */

void ResetChip(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin) {
	HAL_GPIO_WritePin(GPIOx, GPIO_Pin, GPIO_PIN_SET);
	HAL_Delay(20);
	HAL_GPIO_WritePin(GPIOx, GPIO_Pin, GPIO_PIN_RESET);
	HAL_Delay(100);
	HAL_GPIO_WritePin(GPIOx, GPIO_Pin, GPIO_PIN_SET);
	HAL_Delay(20);
}

void SelectChip(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState state) {
	HAL_GPIO_WritePin(GPIOx, GPIO_Pin, state);
	HAL_Delay(2); // Falls notwendig
}
void SPI_TransmitReceiveWithDebug(SPI_HandleTypeDef* hspi, uint8_t* txData, uint8_t* rxData, uint16_t length, const char* debugMessage) {
	HAL_SPI_TransmitReceive(hspi, txData, rxData, length, HAL_MAX_DELAY);
	if (debugMessage) {
		HAL_UART_Transmit(&huart2, (uint8_t*)debugMessage, strlen(debugMessage), 100);
	}
}
/* USER CODE END PV */

/* Private function prototypes -----------------------------------------------*/
void SystemClock_Config(void);
static void MX_GPIO_Init(void);
static void MX_USART2_UART_Init(void);
static void MX_SPI1_Init(void);
static void MX_TIM1_Init(void);
static void MX_ADC1_Init(void);
static void MX_TIM2_Init(void);
/* USER CODE BEGIN PFP */


/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
uint8_t ProcessStatusByte(uint8_t* statusByte) {
	// Extrahiere die Bits 7:5 (Circuit Mode) und 4:2 (Command Status)
	uint8_t circuitMode = (*statusByte >> 5) & 0x07; // Maske 0x07 für 3 Bits
	uint8_t commandStatus = (*statusByte >> 2) & 0x07; // Maske 0x07 für 3 Bits

	// Debug-Ausgabe für UART
	char uart_buf[50];
	int uart_buf_len = sprintf(uart_buf, "Circuit Mode: %u, Command Status: %u\r\n", circuitMode, commandStatus);
	HAL_UART_Transmit(&huart2, (uint8_t *)uart_buf, uart_buf_len, 100);

	// Verarbeitung von Circuit Mode
	switch (circuitMode) {
	case 0x2:
		// STDBY_RC
		HAL_UART_Transmit(&huart2, (uint8_t *)"Mode: STDBY_RC\r\n", 17, 100);
		break;
	case 0x3:
		// STDBY_XOSC
		HAL_UART_Transmit(&huart2, (uint8_t *)"Mode: STDBY_XOSC\r\n", 19, 100);
		break;
	case 0x4:
		// FS
		HAL_UART_Transmit(&huart2, (uint8_t *)"Mode: FS\r\n", 10, 100);
		break;
	case 0x5:
		// Rx
		HAL_UART_Transmit(&huart2, (uint8_t *)"Mode: Rx\r\n", 10, 100);
		break;
	case 0x6:
		// Tx
		HAL_UART_Transmit(&huart2, (uint8_t *)"Mode: Tx\r\n", 10, 100);
		break;
	default:
		HAL_UART_Transmit(&huart2, (uint8_t *)"Mode: Unknown\r\n", 16, 100);


	}

	// Verarbeitung von Command Status
	switch (commandStatus) {
	case 0x1:
		HAL_UART_Transmit(&huart2, (uint8_t *)"Command Status: Success\r\n", 26, 100);
		break;
	case 0x2:
		HAL_UART_Transmit(&huart2, (uint8_t *)"Command Status: Data Available\r\n", 33, 100);
		break;
	case 0x3:
		HAL_UART_Transmit(&huart2, (uint8_t *)"Command Status: Timeout\r\n", 26, 100);
		break;
	case 0x4:
		HAL_UART_Transmit(&huart2, (uint8_t *)"Command Status: Error\r\n", 24, 100);
		break;
	case 0x5:
		HAL_UART_Transmit(&huart2, (uint8_t *)"Command Status: Failure\r\n", 26, 100);
		break;
	case 0x6:
		HAL_UART_Transmit(&huart2, (uint8_t *)"Command Status: Tx Done\r\n", 26, 100);
		break;
	default:
		HAL_UART_Transmit(&huart2, (uint8_t *)"Command Status: Unknown\r\n", 27, 100);
	}
	return circuitMode;
}



void SPI_WaitUntilReady(SPI_HandleTypeDef *hspi) {//TODO not good name, rename
	uint16_t counter = WAIT_COUNTER;
	while (HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_9) == GPIO_PIN_SET) {
		busy=uint8_t(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_9));
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, GPIO_PIN_SET); // Select the chip
		nss = uint8_t(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_6));

		HAL_Delay(5);
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, GPIO_PIN_RESET); // Select the chip
		nss = uint8_t(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_6));
		HAL_Delay(5);
		//		if (--counter==0) {
		//			//TODO: save radiomodulstate to structure
		//			ResetChip(GPIOC, GPIO_PIN_7);
		//			//TODO: restore radio modul state from structure
		//			counter = WAIT_COUNTER;
		//		}

	}
	busy=uint8_t(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_9));


}
static void SPI1_TRANSCEIVER_Delay(uint8_t* txData, uint8_t* rxData, uint8_t lengh)
{
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, GPIO_PIN_RESET);
	nss = uint8_t(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_6));
	HAL_Delay(10); // Small delay to ensure stability

	SPI_WaitUntilReady(&hspi1);
	HAL_SPI_TransmitReceive(&hspi1, txData, rxData, lengh, HAL_MAX_DELAY);
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, GPIO_PIN_SET);
	nss = uint8_t(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_6));

}
//void SPI_WaitPause(SPI_HandleTypeDef *hspi) {
//	while (HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_9) == GPIO_PIN_RESET) {
//		busy=uint8_t(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_9));
//		HAL_SPI_Receive(&hspi1, &rxData_const, 1, HAL_MAX_DELAY);   // Lese die Antwort
//		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, GPIO_PIN_RESET); // Select the chip
//		nss = uint8_t(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_6));
//
//	}
//	busy=uint8_t(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_9));
//	HAL_Delay(10); // Small delay to ensure stability
//}


void SPI_WaitOpcod(SPI_HandleTypeDef *hspi) {
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, GPIO_PIN_SET); // Select the chip
	nss = uint8_t(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_6));
	while (HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_9) == GPIO_PIN_SET) {
		busy=uint8_t(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_9));
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, GPIO_PIN_RESET); // Select the chip
		nss = uint8_t(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_6));

		HAL_Delay(5);
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, GPIO_PIN_SET); // Select the chip
		nss = uint8_t(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_6));
		HAL_Delay(5); // Small delay to ensure stability


		//SPI1_TRANSCEIVER_Delay(&tx, &rx, 1);
	}
	busy=uint8_t(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_9));

}

void SPI_WaitTransmit(SPI_HandleTypeDef *hspi) {
	uint16_t counter = WAIT_COUNTER;
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, GPIO_PIN_RESET); // Select the chip TODO names rename, vvesti counter

#ifdef DEBUG
	nss = uint8_t(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_6));
#endif

	while (HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_9) != GPIO_PIN_SET) {
		//		if (--counter==0) {
		//			ResetChip(GPIOC, GPIO_PIN_7);
		//			counter = WAIT_COUNTER;
		//		}
#ifdef DEBUG
		busy=uint8_t(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_9));
#endif

		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, GPIO_PIN_SET); // Select the chip

#ifdef DEBUG
		nss = uint8_t(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_6));
#endif

		HAL_Delay(5); // Small delay to ensure stability
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, GPIO_PIN_RESET); // Select the chip

#ifdef DEBUG
		nss = uint8_t(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_6));
#endif



	}
#ifdef DEBUG

	busy=uint8_t(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_9));
#endif

	HAL_Delay(5); // Small delay to ensure stability

}
void GetStatus() {
	uint8_t command = 0xC0;  // Nur Low Byte wird verwendet
	uint8_t response = 0;

	// Sende 16-Bit-Datenrahmen (High Byte wird ignoriert)
	HAL_SPI_TransmitReceive(&hspi1, &command, &response, 1, HAL_MAX_DELAY);
	ProcessStatusByte(&response);
	// Extrahiere nur das Low Byte aus der Antwort

}

void SetStandby() {
	uint8_t command[2] = {0x80, 0x01};
	HAL_SPI_Transmit(&hspi1, (uint8_t*)command, 2, HAL_MAX_DELAY);

}

// Funktion zum Aktivieren des LoRa Modus
void setLoRaMode() {
	uint8_t tx[2] = {0x8A, 0x01}; // LoRa Mode aktivieren
	HAL_SPI_Transmit(&hspi1, tx, 2, HAL_MAX_DELAY);
	HAL_UART_Transmit(&huart2, (uint8_t *)"Set LoRa mode\r\n", 15, HAL_MAX_DELAY);
	HAL_Delay(5);

}
void getPacketType(SPI_HandleTypeDef* hspi) {
	//uint8_t txData;
	//*(uint32_t*)txData = 0x03 | 0x00 << 16; // LoRa mode
	uint8_t txData[3] = {0x03, 0x00, 0x00};  // Opcode = 0x03, NOP, NOP
	uint8_t rxData[3] = {0x00, 0x00, 0x00};

	// SPI-Übertragung und Empfang
	HAL_SPI_Transmit(&hspi1,txData, 3, HAL_MAX_DELAY);   // Lese die Antwort
	HAL_SPI_Receive(&hspi1, rxData, 3, HAL_MAX_DELAY);   // Lese die Antwort

	// SPI_TransmitReceiveWithDebug(hspi, txData[0], rxData, 3, "GetPacketType: ");
	// Der Pakettyp befindet sistatusch im dritten Byte (rxData[2])
	uint8_t packetType = rxData[2];

	// Debug-Ausgabe
	switch (packetType) {
	case 0x00:
		HAL_UART_Transmit(&huart2, (uint8_t *)"Packet Type: GFSK (0x00)\r\n", 30, 100);
		break;
	case 0x01:
		HAL_UART_Transmit(&huart2, (uint8_t *)"Packet Type: LoRa (0x01)\r\n", 30, 100);

		break;
	case 0x02:
		HAL_UART_Transmit(&huart2, (uint8_t *)"Packet Type: Ranging (0x02)\r\n", 30, 100);

		break;
	case 0x03:
		HAL_UART_Transmit(&huart2, (uint8_t *)"Packet Type: FLRC (0x03)\r\n", 30, 100);

		break;
	case 0x04:
		HAL_UART_Transmit(&huart2, (uint8_t *)"Packet Type: BLE (0x04)\r\n", 30, 100);

		break;
	default:
		HAL_UART_Transmit(&huart2, (uint8_t *)"Unknown Packet Type:", 20, 100);
		HAL_UART_Transmit(&huart2, &packetType, 1, 100);
		HAL_UART_Transmit(&huart2, (uint8_t *)"\r\n", 4, 100);

		break;
	}
}


// Funktion zum Setzen der Frequenz 0x86, 0xBC, 0x13, 0xC1
void setFrequency() {
	uint8_t tx[4] = {0x86, 0xB8, 0x9D, 0x89}; // Frequenzdaten
	uint8_t rx[4] = {0};
	SPI_TransmitReceiveWithDebug(&hspi1, tx, rx, 4, "Set Frequency\r\n");  // SPI mit Debugger
	HAL_Delay(10);

}

// Funktion zum Setzen der Basisadresse des Buffers
void setBufferBaseAddress() {
	uint8_t tx[3] = {0x8F, 0x80, 0x00}; // Basisadresse
	uint8_t rx[3] = {0};
	SPI_TransmitReceiveWithDebug(&hspi1, tx, rx, 3, "Set Buffer Base Address\r\n");  // SPI mit Debugger
	HAL_Delay(10);

}

// Funktion zum Setzen der Modulationsparameter
void setModulationParams() {
	uint8_t tx[4] = {0x8B, 0x70, 0x26, 0x01}; // Modulationsparameter
	uint8_t rx[4] = {0};
	SPI_TransmitReceiveWithDebug(&hspi1, tx, rx, 4, "Set Modulation Params\r\n");  // SPI mit Debugger
	HAL_Delay(10);
}

// Funktion zum Setzen der Paketparameter
void setPacketParams() {
	uint8_t tx[8] = {0x8C, 0x0C, 0x80, 0x01, 0x20, 0x40, 0x00, 0x00}; // Paketparameter
	uint8_t rx[8] = {0};
	SPI_TransmitReceiveWithDebug(&hspi1, tx, rx, 8, "Set Packet Params\r\n");  // SPI mit Debugger
	HAL_Delay(10);
}

// Funktion zum Setzen der IRQ-Parameter (DIO1, DIO2, DIO3) 0x8D, 0x40, 0x23, 0x00, 0x01, 0x00, 0x02, 0x40, 0x20
void setDioIrqParams() {
    uint8_t tx[9] = {
        0x8D,             // Kommando: SetDioIrqParams
        0x00, 0x02,       // IRQ Mask: Nur RxDone aktivieren (0x0002)
        0x00, 0x00,       // DIO2 und DIO3 deaktivieren
        0x01,             // DIO1 Mapping: RxDone (0x01)
        0x00,             // DIO2 Mapping: Keine (0x00)
        0x00,             // DIO3 Mapping: Keine (0x00)
        0x00              // Padding (abhängig vom SX1280-Befehlssatz)
    };	uint8_t rx[9] = {0};
	SPI_TransmitReceiveWithDebug(&hspi1, tx, rx, 9, "Set DIO IRQ Params\r\n");  // SPI mit Debugger
	HAL_Delay(10);
}


// Funktion zum Setzen der RX-Periode (Empfangsparameter)
void setRxPeriod() {
	uint8_t tx[4] = {0x82, 0x01, 0xFF, 0xFF}; // RX Periode
	uint8_t rx[4] = {0};
	SPI_TransmitReceiveWithDebug(&hspi1, tx, rx, 4, "Set RX Period\r\n");  // SPI mit Debugger
	HAL_Delay(10);
}

void DerTakt()
{
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, GPIO_PIN_SET);   // NSS auf HIGH
	nss = uint8_t(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_6));
	HAL_Delay(2);
	SPI_WaitUntilReady(&hspi1);
	HAL_Delay(2);
	SPI_WaitTransmit(&hspi1);

}
void GetPacketStatus(SPI_HandleTypeDef* hspi, UART_HandleTypeDef* huart) {
	uint8_t tx[2] = {0x1D, 0x00}; // Kommando: GetPacketStatus
	uint8_t rx[7] = {0}; // Antwortpuffer

	HAL_SPI_TransmitReceive(hspi, tx, rx, 7, HAL_MAX_DELAY);

	// SNR und RSSI auslesen
	int8_t snrPkt = (int8_t)rx[2];
	int8_t rssiPkt = (int8_t)rx[1] / -2;

	char uart_buf[100];
	int uart_buf_len = sprintf(uart_buf, "Packet Status - SNR: %d dB, RSSI: %d dBm\r\n", snrPkt / 4, rssiPkt);
	HAL_UART_Transmit(huart, (uint8_t*)uart_buf, uart_buf_len, HAL_MAX_DELAY);
}
void GetRxBufferStatus(SPI_HandleTypeDef* hspi, UART_HandleTypeDef* huart, uint8_t* rxStartBufferPointer, uint8_t* payloadLengthRx) {
	uint8_t tx[2] = {0x17, *rxStartBufferPointer}; // Kommando: GetRxBufferStatus
	uint8_t rx[4] = {0}; // Antwortpuffer

	HAL_SPI_TransmitReceive(hspi, tx, rx, 4, HAL_MAX_DELAY);

	*rxStartBufferPointer = rx[1];
	*payloadLengthRx = rx[2];

	char uart_buf[100];
	int uart_buf_len = sprintf(uart_buf, "Buffer Status - Start: %d, Length: %d\r\n", *rxStartBufferPointer, *payloadLengthRx);
	HAL_UART_Transmit(huart, (uint8_t*)uart_buf, uart_buf_len, HAL_MAX_DELAY);
}

uint8_t ReadReceivedData(SPI_HandleTypeDef* hspi, UART_HandleTypeDef* huart, uint8_t startBufferPointer, uint8_t payloadLength) {
    uint8_t tx[3 + payloadLength]; // 3 Bytes für Opcode + Offset + NOPs für Payload
    uint8_t rx[3 + payloadLength]; // Empfangspuffer (Status + Daten)

    // Opcode und Offset setzen
    tx[0] = 0x1B;                // ReadBuffer Opcode
    tx[1] = startBufferPointer;  // Startadresse
    tx[2] = 0x00;                // NOP
    memset(&tx[3], 0x00, payloadLength); // Rest mit NOPs auffüllen

    // SPI-Übertragung
    HAL_SPI_TransmitReceive(hspi, tx, rx, 3 + payloadLength, HAL_MAX_DELAY);

    // Debug-Ausgabe der empfangenen Daten
    char buf[100];
    int uart_buf_len = sprintf(buf, "Received Data (Offset 0x%02X): ", startBufferPointer);
    HAL_UART_Transmit(huart, (uint8_t*)buf, uart_buf_len, HAL_MAX_DELAY);

    for (uint8_t i = 0; i < payloadLength; i++) {
        uart_buf_len = sprintf(buf, "%02X ", rx[3 + i]); // Daten beginnen ab Byte 3
        HAL_UART_Transmit(huart, (uint8_t*)buf, uart_buf_len, HAL_MAX_DELAY);
    }

    HAL_UART_Transmit(huart, (uint8_t*)"\r\n", 2, HAL_MAX_DELAY);

    // Rückgabe des Werts an Index 3
    return rx[3];
}

//void ReadReceivedData(SPI_HandleTypeDef* hspi, UART_HandleTypeDef* huart, uint8_t startBufferPointer, uint8_t payloadLength) {
//    // Kommando: ReadBuffer mit dynamischer Länge
//	//payloadLength=1;
//    uint8_t tx[3 + payloadLength]; // 3 Bytes für Opcode + Offset + NOPs für Payload
//    uint8_t rx[3 + payloadLength]; // Empfangspuffer (Status + Daten)
//
//    // Opcode und Offset setzen
//    tx[0] = 0x1B;                // ReadBuffer Opcode
//    tx[1] = startBufferPointer;  // Startadresse
//    tx[2] = 0x00;                // NOP
//    memset(&tx[3], 0x00, payloadLength); // Rest mit NOPs auffüllen
//
//    // SPI-Übertragung
//    HAL_SPI_TransmitReceive(hspi, tx, rx, 3 + payloadLength, HAL_MAX_DELAY);
//
//    // Debug-Ausgabe der empfangenen Daten
//    char buf[100];
//    int uart_buf_len = sprintf(buf, "Received Data (Offset 0x%02X): ", startBufferPointer);
//    HAL_UART_Transmit(huart, (uint8_t*)buf, uart_buf_len, HAL_MAX_DELAY);
//
//    for (uint8_t i = 0; i < payloadLength; i++) {
//        uart_buf_len = sprintf(buf, "%02X ", rx[3 + i]); // Daten beginnen ab Byte 3
//        HAL_UART_Transmit(huart, (uint8_t*)buf, uart_buf_len, HAL_MAX_DELAY);
//    }
//
//    HAL_UART_Transmit(huart, (uint8_t*)"\r\n", 2, HAL_MAX_DELAY);
//}

void ReadIrqStatus(SPI_HandleTypeDef* hspi, UART_HandleTypeDef* huart) {
	uint8_t tx[4] = {0x15, 0x00, 0x00, 0x00};  // Beispiel für SPI-Befehl zum Abrufen von IRQ-Status
	uint8_t rx[4] = {0};

	HAL_SPI_TransmitReceive(hspi, tx, rx, 4, HAL_MAX_DELAY);

	// Überprüfe den Inhalt des Empfangspuffers
	char uart_buf[100];
	int uart_buf_len = sprintf(uart_buf, "IRQ Status: ");
	for (int i = 0; i < 3; i++) {
		uart_buf_len += sprintf(uart_buf + uart_buf_len, "%02X ", rx[i]);
	}
	uart_buf_len += sprintf(uart_buf + uart_buf_len, "\r\n");
	HAL_UART_Transmit(huart, (uint8_t*)uart_buf, uart_buf_len, HAL_MAX_DELAY);
}
uint8_t RX_BitRateTest(SPI_HandleTypeDef* hspi, UART_HandleTypeDef* huart) {
    uint8_t tx[4] = {0x15, 0x00, 0x00, 0x00};
    uint8_t rx[4] = {0x00, 0x00, 0x00, 0x00};
    uint8_t rxStartBufferPointer = 0;
    uint8_t payloadLength = 0;
    uint8_t data = 0;

    // Debug-Ausgabe
    uint8_t uart_buf[100];
    int uart_buf_len = sprintf((char*)uart_buf, "SX1280 RX Bit Rate Test (Single Operation)\r\n");
    HAL_UART_Transmit(huart, uart_buf, uart_buf_len, HAL_MAX_DELAY);

    // Warte auf IRQ-Status (rx[3] == 2)
    int i = 0;
    while (rx[3] != 2) {
        HAL_SPI_TransmitReceive(hspi, tx, rx, 4, HAL_MAX_DELAY);

        // Debug-Ausgabe für den Interrupt-Status
        uart_buf_len = sprintf((char*)uart_buf, "Interrupt Status [%d]: %0x, %0x\r\n", i++, rx[2], rx[3]);
        HAL_UART_Transmit(huart, uart_buf, uart_buf_len, HAL_MAX_DELAY);
        tx[0] = 0x97;  // ClrIrqStatus
        tx[1] = 0xFF;
        tx[2] = 0xFF;
        HAL_SPI_TransmitReceive(hspi, tx, rx, 3, HAL_MAX_DELAY);
        HAL_Delay(100);  // Kleine Verzögerung für Stabilität
    }

    // Paketstatus abrufen
    GetPacketStatus(hspi, huart);

    // RX-Buffer-Status abrufen
    GetRxBufferStatus(hspi, huart, &rxStartBufferPointer, &payloadLength);

    // Empfangene Daten lesen
    data = ReadReceivedData(hspi, huart, rxStartBufferPointer, payloadLength);

    // Servo-Winkel setzen
    //Degree5_SetServoAngle(&degree5Controller, data);

    // IRQ zurücksetzen
    tx[0] = 0x97;  // ClrIrqStatus
    tx[1] = 0xFF;
    tx[2] = 0xFF;
    HAL_SPI_TransmitReceive(hspi, tx, rx, 3, HAL_MAX_DELAY);

    // Empfangene Daten zurückgeben
    return data;
}
//void RX_BitRateTest(SPI_HandleTypeDef* hspi, UART_HandleTypeDef* huart) {
//	uint32_t time_temp = HAL_GetTick();
//	uint8_t sum = 0;
//	float bps;
//	uint8_t uart_buf[100];
//	int uart_buf_len;
//	char buf[50];
//
//	uart_buf_len = sprintf((char*)uart_buf, "SX1280 RX Bit Rate Test\r\n");
//	HAL_UART_Transmit(huart, uart_buf, uart_buf_len, HAL_MAX_DELAY);
//
//	while (1) {
//		int i = 0;
//		uint8_t tx[4] = {0x15, 0x00, 0x00, 0x00};
//		uint8_t rx[4] = {0x00, 0x00, 0x00, 0x00};
//		while (rx[3] != 2){
//
//			// Beispiel für SPI-Befehl zum Abrufen von IRQ-Status
//			//DerTakt();
//			HAL_SPI_TransmitReceive(&hspi1, tx, rx, 4, HAL_MAX_DELAY);
//			int uart_buf_len = sprintf(buf, "Interrupt Status [%d ]: %0x , %0x\r\n", i++, rx[2], rx[3]);
//			HAL_UART_Transmit(huart, (uint8_t*)buf, uart_buf_len, HAL_MAX_DELAY);
//			HAL_Delay(100);
//			DerTakt();
//
//
//		}
//		GetPacketStatus(&hspi1, &huart2);
//		DerTakt();
//
//		GetRxBufferStatus(&hspi1, &huart2, &rxStartBufferPointer, &payloadLength);
//		DerTakt();
//
//		ReadReceivedData(&hspi1, &huart2, rxStartBufferPointer, payloadLength);
//		DerTakt();
//
//		sum++;
//		uint32_t elapsed_time = HAL_GetTick() - time_temp;
//		if (elapsed_time >= 1000) {  // Update alle 1 Sekunde
//			bps = (float)(sum * 8 * 1000) / elapsed_time;
//			uart_buf_len = sprintf((char*)uart_buf, "Bit Rate: %15.5f bps, sum: %03d\r\n", bps, sum);
//			HAL_UART_Transmit(huart, uart_buf, uart_buf_len, HAL_MAX_DELAY);
//
//			// Reset
//			time_temp = HAL_GetTick();
//			sum = 0;
//		}
//		// IRQ zurücksetzen
//		tx[0] = 0x97;  // ClrIrqStatus
//		tx[1] = 0xFF;
//		tx[2] = 0xFF;
//		HAL_SPI_TransmitReceive(hspi, tx, rx, 3, HAL_MAX_DELAY);
//		HAL_Delay(500); // Wartezeit für Stabilität
//
//	}
//}


/* USER CODE END 0 */

/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{

  /* USER CODE BEGIN 1 */
	//Erase_Flash();
	int i=0;
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();

  /* USER CODE BEGIN Init */
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();

  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
  MX_USART2_UART_Init();
  MX_SPI1_Init();
  MX_TIM1_Init();
  MX_ADC1_Init();
  MX_TIM2_Init();
  /* USER CODE BEGIN 2 */
  Degree5 degree5Controller;
  Degree5_Init(&degree5Controller, &hadc1, &htim2, &huart2);
  HAL_Delay(1000);

	HAL_TIM_Base_Start(&htim1);

	// Reset Chip
	ResetChip(GPIOC, GPIO_PIN_7);
	HAL_Delay(5);

	/*=======================================================================*/
	//NSSNSSNSSNSSNSSNSSNSSNSSNSSNSSNSSNSSNSSNSS
	/*=======================================================================*/

	// NSS Test
	SelectChip(GPIOB, GPIO_PIN_6, GPIO_PIN_SET);
	nss = uint8_t(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_6));//TODO: make function

	HAL_Delay(5);

	SelectChip(GPIOB, GPIO_PIN_6, GPIO_PIN_RESET);
	nss = uint8_t(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_6));

	HAL_Delay(5);

	SelectChip(GPIOB, GPIO_PIN_6, GPIO_PIN_SET);
	nss = uint8_t(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_6));


	SPI_WaitTransmit(&hspi1);


	SetStandby();
	DerTakt();



  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	while (1)
	{
#ifdef DEBUG
		GetStatus();
		DerTakt();
#endif
		setLoRaMode();
		DerTakt();

#ifdef DEBUG
		getPacketType(&hspi1);
		DerTakt();
#endif


		setFrequency();
		DerTakt();


		setBufferBaseAddress(); // Basisadresse setzen
		DerTakt();


		setModulationParams();  // Modulationsparameter setzen
		DerTakt();


		setPacketParams();
		DerTakt();

		// Paketparameter setzen
		setDioIrqParams();      // IRQ Parameter setzen
		DerTakt();

		setRxPeriod();          // RX Periode setzen
		DerTakt();

		//#ifdef DEBUG
		//		GetStatus();
		//		DerTakt();
		//#endif

		servo_angle=RX_BitRateTest(&hspi1, &huart2);
		Degree5_SetServoAngle(&degree5Controller, servo_angle);
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	}
  /* USER CODE END 3 */
}

/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
  RCC_OscInitStruct.PLL.PLLM = 8;
  RCC_OscInitStruct.PLL.PLLN = 84;
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
  RCC_OscInitStruct.PLL.PLLQ = 2;
  RCC_OscInitStruct.PLL.PLLR = 2;
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
  {
    Error_Handler();
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV4;

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
  {
    Error_Handler();
  }
}

/**
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};

  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
  hadc1.Init.ScanConvMode = DISABLE;
  hadc1.Init.ContinuousConvMode = DISABLE;
  hadc1.Init.DiscontinuousConvMode = DISABLE;
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
  hadc1.Init.NbrOfConversion = 1;
  hadc1.Init.DMAContinuousRequests = DISABLE;
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
  {
    Error_Handler();
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_0;
  sConfig.Rank = 1;
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
  {
    Error_Handler();
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}

/**
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{

  /* USER CODE BEGIN SPI1_Init 0 */

  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
  hspi1.Init.Mode = SPI_MODE_MASTER;
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
  hspi1.Init.NSS = SPI_NSS_SOFT;
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
  hspi1.Init.CRCPolynomial = 10;
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
  {
    Error_Handler();
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}

/**
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
  TIM_MasterConfigTypeDef sMasterConfig = {0};

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
  htim1.Init.Prescaler = 0;
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
  htim1.Init.Period = 65535;
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
  htim1.Init.RepetitionCounter = 0;
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
  {
    Error_Handler();
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
  {
    Error_Handler();
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
  {
    Error_Handler();
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}

/**
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
  TIM_MasterConfigTypeDef sMasterConfig = {0};
  TIM_OC_InitTypeDef sConfigOC = {0};

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
  htim2.Init.Prescaler = 42-1;
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
  htim2.Init.Period = 20000-1;
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
  {
    Error_Handler();
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
  {
    Error_Handler();
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
  {
    Error_Handler();
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
  {
    Error_Handler();
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
  sConfigOC.Pulse = 0;
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
  {
    Error_Handler();
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);

}

/**
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{

  /* USER CODE BEGIN USART2_Init 0 */

  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
  huart2.Init.BaudRate = 115200;
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
  huart2.Init.StopBits = UART_STOPBITS_1;
  huart2.Init.Parity = UART_PARITY_NONE;
  huart2.Init.Mode = UART_MODE_TX_RX;
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
  if (HAL_UART_Init(&huart2) != HAL_OK)
  {
    Error_Handler();
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}

/**
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
  GPIO_InitTypeDef GPIO_InitStruct = {0};
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
  __HAL_RCC_GPIOH_CLK_ENABLE();
  __HAL_RCC_GPIOA_CLK_ENABLE();
  __HAL_RCC_GPIOB_CLK_ENABLE();

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_7, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, GPIO_PIN_RESET);

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);

  /*Configure GPIO pin : PC7 */
  GPIO_InitStruct.Pin = GPIO_PIN_7;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);

  /*Configure GPIO pin : PA8 */
  GPIO_InitStruct.Pin = GPIO_PIN_8;
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);

  /*Configure GPIO pin : PA9 */
  GPIO_InitStruct.Pin = GPIO_PIN_9;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);

  /*Configure GPIO pin : PB6 */
  GPIO_InitStruct.Pin = GPIO_PIN_6;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);

/* USER CODE BEGIN MX_GPIO_Init_2 */
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12, GPIO_PIN_SET); // CS auf High
	HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);  // Set priority
	HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);           // Enable the IRQ line for EXTI
/* USER CODE END MX_GPIO_Init_2 */
}

/* USER CODE BEGIN 4 */
void processReceivedData(uint8_t *data) {
	uint8_t uart_buf[100];
	int uart_buf_len = sprintf((char*)uart_buf, "Empfangene Daten: ");
	for (int i = 0; i < 11; i++) {
		uart_buf_len += sprintf((char*)uart_buf + uart_buf_len, "%02X ", data[i]);
	}
	uart_buf_len += sprintf((char*)uart_buf + uart_buf_len, "\r\n");
	HAL_UART_Transmit(&huart2, uart_buf, uart_buf_len, HAL_MAX_DELAY);  // Sende an UART
}
void handleReceivedPacket() {
	uint8_t rxBuffer[11];  // Puffer für empfangene Daten
	uint8_t tx[11] = {0};  // Befehl zum Abrufen der empfangenen Daten

	// Sende ein Kommando an den SX1280, um die empfangenen Daten auszulesen
	DerTakt();
	HAL_SPI_TransmitReceive(&hspi1, tx, rxBuffer, 11, HAL_MAX_DELAY);

	// Verarbeite die empfangenen Daten, z. B. durch Ausgeben auf UART
	processReceivedData(rxBuffer);
}

void EXTI9_5_IRQHandler(void) {
	// Prüfen, ob der Interrupt durch DIO1 ausgelöst wurde
	if (__HAL_GPIO_EXTI_GET_IT(GPIO_PIN_8) != RESET) {
		__HAL_GPIO_EXTI_CLEAR_IT(GPIO_PIN_8);  // Lösche das Interrupt-Flag für den Pin

		// Event-Handler, z. B. Empfang von Daten vom SX1280
		handleReceivedPacket();
	}
}
/* USER CODE END 4 */

/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1)
	{
	}
  /* USER CODE END Error_Handler_Debug */
}

#ifdef  USE_FULL_ASSERT
/**
  * @brief  Reports the name of the source file and the source line number
  *         where the assert_param error has occurred.
  * @param  file: pointer to the source file name
  * @param  line: assert_param error line source number
  * @retval None
  */
void assert_failed(uint8_t *file, uint32_t line)
{
  /* USER CODE BEGIN 6 */
	/* User can add his own implementation to report the file name and line number,
     ex: printf("Wrong parameters value: file %s on line %d\r\n", file, line) */
  /* USER CODE END 6 */
}
#endif /* USE_FULL_ASSERT */
