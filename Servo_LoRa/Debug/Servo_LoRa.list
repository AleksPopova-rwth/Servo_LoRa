
Servo_LoRa.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008bc4  080001d0  080001d0  000011d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000003c0  08008d98  08008d98  00009d98  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000168  08009158  08009158  0000a158  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .ARM          00000220  080092c0  080092c0  0000a2c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080094e0  080094e0  0000b1d4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080094e0  080094e0  0000a4e0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080094e4  080094e4  0000a4e4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000001d4  20000000  080094e8  0000b000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000002e8  200001d4  080096bc  0000b1d4  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200004bc  080096bc  0000b4bc  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000b1d4  2**0
                  CONTENTS, READONLY
 12 .debug_info   000180a8  00000000  00000000  0000b204  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002c3c  00000000  00000000  000232ac  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001028  00000000  00000000  00025ee8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000cd5  00000000  00000000  00026f10  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00025c63  00000000  00000000  00027be5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00015635  00000000  00000000  0004d848  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000e95da  00000000  00000000  00062e7d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0014c457  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005b94  00000000  00000000  0014c49c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006b  00000000  00000000  00152030  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	@ (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	@ (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	@ (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	200001d4 	.word	0x200001d4
 80001ec:	00000000 	.word	0x00000000
 80001f0:	08008d7c 	.word	0x08008d7c

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	@ (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	@ (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	@ (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	200001d8 	.word	0x200001d8
 800020c:	08008d7c 	.word	0x08008d7c

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <strlen>:
 80002b0:	4603      	mov	r3, r0
 80002b2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002b6:	2a00      	cmp	r2, #0
 80002b8:	d1fb      	bne.n	80002b2 <strlen+0x2>
 80002ba:	1a18      	subs	r0, r3, r0
 80002bc:	3801      	subs	r0, #1
 80002be:	4770      	bx	lr

080002c0 <__aeabi_drsub>:
 80002c0:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80002c4:	e002      	b.n	80002cc <__adddf3>
 80002c6:	bf00      	nop

080002c8 <__aeabi_dsub>:
 80002c8:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080002cc <__adddf3>:
 80002cc:	b530      	push	{r4, r5, lr}
 80002ce:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002d2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002d6:	ea94 0f05 	teq	r4, r5
 80002da:	bf08      	it	eq
 80002dc:	ea90 0f02 	teqeq	r0, r2
 80002e0:	bf1f      	itttt	ne
 80002e2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002e6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ea:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ee:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002f2:	f000 80e2 	beq.w	80004ba <__adddf3+0x1ee>
 80002f6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002fa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002fe:	bfb8      	it	lt
 8000300:	426d      	neglt	r5, r5
 8000302:	dd0c      	ble.n	800031e <__adddf3+0x52>
 8000304:	442c      	add	r4, r5
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	ea82 0000 	eor.w	r0, r2, r0
 8000312:	ea83 0101 	eor.w	r1, r3, r1
 8000316:	ea80 0202 	eor.w	r2, r0, r2
 800031a:	ea81 0303 	eor.w	r3, r1, r3
 800031e:	2d36      	cmp	r5, #54	@ 0x36
 8000320:	bf88      	it	hi
 8000322:	bd30      	pophi	{r4, r5, pc}
 8000324:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000328:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800032c:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000330:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000334:	d002      	beq.n	800033c <__adddf3+0x70>
 8000336:	4240      	negs	r0, r0
 8000338:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800033c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000340:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000344:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000348:	d002      	beq.n	8000350 <__adddf3+0x84>
 800034a:	4252      	negs	r2, r2
 800034c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000350:	ea94 0f05 	teq	r4, r5
 8000354:	f000 80a7 	beq.w	80004a6 <__adddf3+0x1da>
 8000358:	f1a4 0401 	sub.w	r4, r4, #1
 800035c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000360:	db0d      	blt.n	800037e <__adddf3+0xb2>
 8000362:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000366:	fa22 f205 	lsr.w	r2, r2, r5
 800036a:	1880      	adds	r0, r0, r2
 800036c:	f141 0100 	adc.w	r1, r1, #0
 8000370:	fa03 f20e 	lsl.w	r2, r3, lr
 8000374:	1880      	adds	r0, r0, r2
 8000376:	fa43 f305 	asr.w	r3, r3, r5
 800037a:	4159      	adcs	r1, r3
 800037c:	e00e      	b.n	800039c <__adddf3+0xd0>
 800037e:	f1a5 0520 	sub.w	r5, r5, #32
 8000382:	f10e 0e20 	add.w	lr, lr, #32
 8000386:	2a01      	cmp	r2, #1
 8000388:	fa03 fc0e 	lsl.w	ip, r3, lr
 800038c:	bf28      	it	cs
 800038e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000392:	fa43 f305 	asr.w	r3, r3, r5
 8000396:	18c0      	adds	r0, r0, r3
 8000398:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800039c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80003a0:	d507      	bpl.n	80003b2 <__adddf3+0xe6>
 80003a2:	f04f 0e00 	mov.w	lr, #0
 80003a6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003aa:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003ae:	eb6e 0101 	sbc.w	r1, lr, r1
 80003b2:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80003b6:	d31b      	bcc.n	80003f0 <__adddf3+0x124>
 80003b8:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80003bc:	d30c      	bcc.n	80003d8 <__adddf3+0x10c>
 80003be:	0849      	lsrs	r1, r1, #1
 80003c0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003c4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003c8:	f104 0401 	add.w	r4, r4, #1
 80003cc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003d0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80003d4:	f080 809a 	bcs.w	800050c <__adddf3+0x240>
 80003d8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003dc:	bf08      	it	eq
 80003de:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003e2:	f150 0000 	adcs.w	r0, r0, #0
 80003e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ea:	ea41 0105 	orr.w	r1, r1, r5
 80003ee:	bd30      	pop	{r4, r5, pc}
 80003f0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003f4:	4140      	adcs	r0, r0
 80003f6:	eb41 0101 	adc.w	r1, r1, r1
 80003fa:	3c01      	subs	r4, #1
 80003fc:	bf28      	it	cs
 80003fe:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 8000402:	d2e9      	bcs.n	80003d8 <__adddf3+0x10c>
 8000404:	f091 0f00 	teq	r1, #0
 8000408:	bf04      	itt	eq
 800040a:	4601      	moveq	r1, r0
 800040c:	2000      	moveq	r0, #0
 800040e:	fab1 f381 	clz	r3, r1
 8000412:	bf08      	it	eq
 8000414:	3320      	addeq	r3, #32
 8000416:	f1a3 030b 	sub.w	r3, r3, #11
 800041a:	f1b3 0220 	subs.w	r2, r3, #32
 800041e:	da0c      	bge.n	800043a <__adddf3+0x16e>
 8000420:	320c      	adds	r2, #12
 8000422:	dd08      	ble.n	8000436 <__adddf3+0x16a>
 8000424:	f102 0c14 	add.w	ip, r2, #20
 8000428:	f1c2 020c 	rsb	r2, r2, #12
 800042c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000430:	fa21 f102 	lsr.w	r1, r1, r2
 8000434:	e00c      	b.n	8000450 <__adddf3+0x184>
 8000436:	f102 0214 	add.w	r2, r2, #20
 800043a:	bfd8      	it	le
 800043c:	f1c2 0c20 	rsble	ip, r2, #32
 8000440:	fa01 f102 	lsl.w	r1, r1, r2
 8000444:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000448:	bfdc      	itt	le
 800044a:	ea41 010c 	orrle.w	r1, r1, ip
 800044e:	4090      	lslle	r0, r2
 8000450:	1ae4      	subs	r4, r4, r3
 8000452:	bfa2      	ittt	ge
 8000454:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000458:	4329      	orrge	r1, r5
 800045a:	bd30      	popge	{r4, r5, pc}
 800045c:	ea6f 0404 	mvn.w	r4, r4
 8000460:	3c1f      	subs	r4, #31
 8000462:	da1c      	bge.n	800049e <__adddf3+0x1d2>
 8000464:	340c      	adds	r4, #12
 8000466:	dc0e      	bgt.n	8000486 <__adddf3+0x1ba>
 8000468:	f104 0414 	add.w	r4, r4, #20
 800046c:	f1c4 0220 	rsb	r2, r4, #32
 8000470:	fa20 f004 	lsr.w	r0, r0, r4
 8000474:	fa01 f302 	lsl.w	r3, r1, r2
 8000478:	ea40 0003 	orr.w	r0, r0, r3
 800047c:	fa21 f304 	lsr.w	r3, r1, r4
 8000480:	ea45 0103 	orr.w	r1, r5, r3
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f1c4 040c 	rsb	r4, r4, #12
 800048a:	f1c4 0220 	rsb	r2, r4, #32
 800048e:	fa20 f002 	lsr.w	r0, r0, r2
 8000492:	fa01 f304 	lsl.w	r3, r1, r4
 8000496:	ea40 0003 	orr.w	r0, r0, r3
 800049a:	4629      	mov	r1, r5
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	fa21 f004 	lsr.w	r0, r1, r4
 80004a2:	4629      	mov	r1, r5
 80004a4:	bd30      	pop	{r4, r5, pc}
 80004a6:	f094 0f00 	teq	r4, #0
 80004aa:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 80004ae:	bf06      	itte	eq
 80004b0:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80004b4:	3401      	addeq	r4, #1
 80004b6:	3d01      	subne	r5, #1
 80004b8:	e74e      	b.n	8000358 <__adddf3+0x8c>
 80004ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004be:	bf18      	it	ne
 80004c0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004c4:	d029      	beq.n	800051a <__adddf3+0x24e>
 80004c6:	ea94 0f05 	teq	r4, r5
 80004ca:	bf08      	it	eq
 80004cc:	ea90 0f02 	teqeq	r0, r2
 80004d0:	d005      	beq.n	80004de <__adddf3+0x212>
 80004d2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004d6:	bf04      	itt	eq
 80004d8:	4619      	moveq	r1, r3
 80004da:	4610      	moveq	r0, r2
 80004dc:	bd30      	pop	{r4, r5, pc}
 80004de:	ea91 0f03 	teq	r1, r3
 80004e2:	bf1e      	ittt	ne
 80004e4:	2100      	movne	r1, #0
 80004e6:	2000      	movne	r0, #0
 80004e8:	bd30      	popne	{r4, r5, pc}
 80004ea:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ee:	d105      	bne.n	80004fc <__adddf3+0x230>
 80004f0:	0040      	lsls	r0, r0, #1
 80004f2:	4149      	adcs	r1, r1
 80004f4:	bf28      	it	cs
 80004f6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004fa:	bd30      	pop	{r4, r5, pc}
 80004fc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000500:	bf3c      	itt	cc
 8000502:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 8000506:	bd30      	popcc	{r4, r5, pc}
 8000508:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800050c:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000510:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000514:	f04f 0000 	mov.w	r0, #0
 8000518:	bd30      	pop	{r4, r5, pc}
 800051a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800051e:	bf1a      	itte	ne
 8000520:	4619      	movne	r1, r3
 8000522:	4610      	movne	r0, r2
 8000524:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000528:	bf1c      	itt	ne
 800052a:	460b      	movne	r3, r1
 800052c:	4602      	movne	r2, r0
 800052e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000532:	bf06      	itte	eq
 8000534:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000538:	ea91 0f03 	teqeq	r1, r3
 800053c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000540:	bd30      	pop	{r4, r5, pc}
 8000542:	bf00      	nop

08000544 <__aeabi_ui2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000558:	f04f 0500 	mov.w	r5, #0
 800055c:	f04f 0100 	mov.w	r1, #0
 8000560:	e750      	b.n	8000404 <__adddf3+0x138>
 8000562:	bf00      	nop

08000564 <__aeabi_i2d>:
 8000564:	f090 0f00 	teq	r0, #0
 8000568:	bf04      	itt	eq
 800056a:	2100      	moveq	r1, #0
 800056c:	4770      	bxeq	lr
 800056e:	b530      	push	{r4, r5, lr}
 8000570:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000574:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000578:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800057c:	bf48      	it	mi
 800057e:	4240      	negmi	r0, r0
 8000580:	f04f 0100 	mov.w	r1, #0
 8000584:	e73e      	b.n	8000404 <__adddf3+0x138>
 8000586:	bf00      	nop

08000588 <__aeabi_f2d>:
 8000588:	0042      	lsls	r2, r0, #1
 800058a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800058e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000592:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000596:	bf1f      	itttt	ne
 8000598:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800059c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80005a0:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80005a4:	4770      	bxne	lr
 80005a6:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 80005aa:	bf08      	it	eq
 80005ac:	4770      	bxeq	lr
 80005ae:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80005b2:	bf04      	itt	eq
 80005b4:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80005b8:	4770      	bxeq	lr
 80005ba:	b530      	push	{r4, r5, lr}
 80005bc:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80005c0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80005c4:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005c8:	e71c      	b.n	8000404 <__adddf3+0x138>
 80005ca:	bf00      	nop

080005cc <__aeabi_ul2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f04f 0500 	mov.w	r5, #0
 80005da:	e00a      	b.n	80005f2 <__aeabi_l2d+0x16>

080005dc <__aeabi_l2d>:
 80005dc:	ea50 0201 	orrs.w	r2, r0, r1
 80005e0:	bf08      	it	eq
 80005e2:	4770      	bxeq	lr
 80005e4:	b530      	push	{r4, r5, lr}
 80005e6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005ea:	d502      	bpl.n	80005f2 <__aeabi_l2d+0x16>
 80005ec:	4240      	negs	r0, r0
 80005ee:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005f2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005f6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005fa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005fe:	f43f aed8 	beq.w	80003b2 <__adddf3+0xe6>
 8000602:	f04f 0203 	mov.w	r2, #3
 8000606:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800060a:	bf18      	it	ne
 800060c:	3203      	addne	r2, #3
 800060e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000612:	bf18      	it	ne
 8000614:	3203      	addne	r2, #3
 8000616:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800061a:	f1c2 0320 	rsb	r3, r2, #32
 800061e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000622:	fa20 f002 	lsr.w	r0, r0, r2
 8000626:	fa01 fe03 	lsl.w	lr, r1, r3
 800062a:	ea40 000e 	orr.w	r0, r0, lr
 800062e:	fa21 f102 	lsr.w	r1, r1, r2
 8000632:	4414      	add	r4, r2
 8000634:	e6bd      	b.n	80003b2 <__adddf3+0xe6>
 8000636:	bf00      	nop

08000638 <__aeabi_dmul>:
 8000638:	b570      	push	{r4, r5, r6, lr}
 800063a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800063e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000642:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000646:	bf1d      	ittte	ne
 8000648:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800064c:	ea94 0f0c 	teqne	r4, ip
 8000650:	ea95 0f0c 	teqne	r5, ip
 8000654:	f000 f8de 	bleq	8000814 <__aeabi_dmul+0x1dc>
 8000658:	442c      	add	r4, r5
 800065a:	ea81 0603 	eor.w	r6, r1, r3
 800065e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000662:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000666:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800066a:	bf18      	it	ne
 800066c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000670:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000674:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000678:	d038      	beq.n	80006ec <__aeabi_dmul+0xb4>
 800067a:	fba0 ce02 	umull	ip, lr, r0, r2
 800067e:	f04f 0500 	mov.w	r5, #0
 8000682:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000686:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800068a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800068e:	f04f 0600 	mov.w	r6, #0
 8000692:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000696:	f09c 0f00 	teq	ip, #0
 800069a:	bf18      	it	ne
 800069c:	f04e 0e01 	orrne.w	lr, lr, #1
 80006a0:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 80006a4:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 80006a8:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 80006ac:	d204      	bcs.n	80006b8 <__aeabi_dmul+0x80>
 80006ae:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006b2:	416d      	adcs	r5, r5
 80006b4:	eb46 0606 	adc.w	r6, r6, r6
 80006b8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006bc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006c0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006c4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006c8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006cc:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80006d0:	bf88      	it	hi
 80006d2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80006d6:	d81e      	bhi.n	8000716 <__aeabi_dmul+0xde>
 80006d8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80006dc:	bf08      	it	eq
 80006de:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006e2:	f150 0000 	adcs.w	r0, r0, #0
 80006e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	pop	{r4, r5, r6, pc}
 80006ec:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006f0:	ea46 0101 	orr.w	r1, r6, r1
 80006f4:	ea40 0002 	orr.w	r0, r0, r2
 80006f8:	ea81 0103 	eor.w	r1, r1, r3
 80006fc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000700:	bfc2      	ittt	gt
 8000702:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000706:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800070a:	bd70      	popgt	{r4, r5, r6, pc}
 800070c:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000710:	f04f 0e00 	mov.w	lr, #0
 8000714:	3c01      	subs	r4, #1
 8000716:	f300 80ab 	bgt.w	8000870 <__aeabi_dmul+0x238>
 800071a:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 800071e:	bfde      	ittt	le
 8000720:	2000      	movle	r0, #0
 8000722:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 8000726:	bd70      	pople	{r4, r5, r6, pc}
 8000728:	f1c4 0400 	rsb	r4, r4, #0
 800072c:	3c20      	subs	r4, #32
 800072e:	da35      	bge.n	800079c <__aeabi_dmul+0x164>
 8000730:	340c      	adds	r4, #12
 8000732:	dc1b      	bgt.n	800076c <__aeabi_dmul+0x134>
 8000734:	f104 0414 	add.w	r4, r4, #20
 8000738:	f1c4 0520 	rsb	r5, r4, #32
 800073c:	fa00 f305 	lsl.w	r3, r0, r5
 8000740:	fa20 f004 	lsr.w	r0, r0, r4
 8000744:	fa01 f205 	lsl.w	r2, r1, r5
 8000748:	ea40 0002 	orr.w	r0, r0, r2
 800074c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000750:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000754:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000758:	fa21 f604 	lsr.w	r6, r1, r4
 800075c:	eb42 0106 	adc.w	r1, r2, r6
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 040c 	rsb	r4, r4, #12
 8000770:	f1c4 0520 	rsb	r5, r4, #32
 8000774:	fa00 f304 	lsl.w	r3, r0, r4
 8000778:	fa20 f005 	lsr.w	r0, r0, r5
 800077c:	fa01 f204 	lsl.w	r2, r1, r4
 8000780:	ea40 0002 	orr.w	r0, r0, r2
 8000784:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000788:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800078c:	f141 0100 	adc.w	r1, r1, #0
 8000790:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000794:	bf08      	it	eq
 8000796:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800079a:	bd70      	pop	{r4, r5, r6, pc}
 800079c:	f1c4 0520 	rsb	r5, r4, #32
 80007a0:	fa00 f205 	lsl.w	r2, r0, r5
 80007a4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007a8:	fa20 f304 	lsr.w	r3, r0, r4
 80007ac:	fa01 f205 	lsl.w	r2, r1, r5
 80007b0:	ea43 0302 	orr.w	r3, r3, r2
 80007b4:	fa21 f004 	lsr.w	r0, r1, r4
 80007b8:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007bc:	fa21 f204 	lsr.w	r2, r1, r4
 80007c0:	ea20 0002 	bic.w	r0, r0, r2
 80007c4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007c8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007cc:	bf08      	it	eq
 80007ce:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007d2:	bd70      	pop	{r4, r5, r6, pc}
 80007d4:	f094 0f00 	teq	r4, #0
 80007d8:	d10f      	bne.n	80007fa <__aeabi_dmul+0x1c2>
 80007da:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80007de:	0040      	lsls	r0, r0, #1
 80007e0:	eb41 0101 	adc.w	r1, r1, r1
 80007e4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3c01      	subeq	r4, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1a6>
 80007ee:	ea41 0106 	orr.w	r1, r1, r6
 80007f2:	f095 0f00 	teq	r5, #0
 80007f6:	bf18      	it	ne
 80007f8:	4770      	bxne	lr
 80007fa:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007fe:	0052      	lsls	r2, r2, #1
 8000800:	eb43 0303 	adc.w	r3, r3, r3
 8000804:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000808:	bf08      	it	eq
 800080a:	3d01      	subeq	r5, #1
 800080c:	d0f7      	beq.n	80007fe <__aeabi_dmul+0x1c6>
 800080e:	ea43 0306 	orr.w	r3, r3, r6
 8000812:	4770      	bx	lr
 8000814:	ea94 0f0c 	teq	r4, ip
 8000818:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800081c:	bf18      	it	ne
 800081e:	ea95 0f0c 	teqne	r5, ip
 8000822:	d00c      	beq.n	800083e <__aeabi_dmul+0x206>
 8000824:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000828:	bf18      	it	ne
 800082a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082e:	d1d1      	bne.n	80007d4 <__aeabi_dmul+0x19c>
 8000830:	ea81 0103 	eor.w	r1, r1, r3
 8000834:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000838:	f04f 0000 	mov.w	r0, #0
 800083c:	bd70      	pop	{r4, r5, r6, pc}
 800083e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000842:	bf06      	itte	eq
 8000844:	4610      	moveq	r0, r2
 8000846:	4619      	moveq	r1, r3
 8000848:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800084c:	d019      	beq.n	8000882 <__aeabi_dmul+0x24a>
 800084e:	ea94 0f0c 	teq	r4, ip
 8000852:	d102      	bne.n	800085a <__aeabi_dmul+0x222>
 8000854:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000858:	d113      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800085a:	ea95 0f0c 	teq	r5, ip
 800085e:	d105      	bne.n	800086c <__aeabi_dmul+0x234>
 8000860:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000864:	bf1c      	itt	ne
 8000866:	4610      	movne	r0, r2
 8000868:	4619      	movne	r1, r3
 800086a:	d10a      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800086c:	ea81 0103 	eor.w	r1, r1, r3
 8000870:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000874:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000878:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800087c:	f04f 0000 	mov.w	r0, #0
 8000880:	bd70      	pop	{r4, r5, r6, pc}
 8000882:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000886:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800088a:	bd70      	pop	{r4, r5, r6, pc}

0800088c <__aeabi_ddiv>:
 800088c:	b570      	push	{r4, r5, r6, lr}
 800088e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000892:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000896:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800089a:	bf1d      	ittte	ne
 800089c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008a0:	ea94 0f0c 	teqne	r4, ip
 80008a4:	ea95 0f0c 	teqne	r5, ip
 80008a8:	f000 f8a7 	bleq	80009fa <__aeabi_ddiv+0x16e>
 80008ac:	eba4 0405 	sub.w	r4, r4, r5
 80008b0:	ea81 0e03 	eor.w	lr, r1, r3
 80008b4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008bc:	f000 8088 	beq.w	80009d0 <__aeabi_ddiv+0x144>
 80008c0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008c4:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 80008c8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008cc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008d0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008d4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008d8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008dc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008e0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008e4:	429d      	cmp	r5, r3
 80008e6:	bf08      	it	eq
 80008e8:	4296      	cmpeq	r6, r2
 80008ea:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008ee:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008f2:	d202      	bcs.n	80008fa <__aeabi_ddiv+0x6e>
 80008f4:	085b      	lsrs	r3, r3, #1
 80008f6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fa:	1ab6      	subs	r6, r6, r2
 80008fc:	eb65 0503 	sbc.w	r5, r5, r3
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 800090a:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000938:	085b      	lsrs	r3, r3, #1
 800093a:	ea4f 0232 	mov.w	r2, r2, rrx
 800093e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000942:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000946:	bf22      	ittt	cs
 8000948:	1ab6      	subcs	r6, r6, r2
 800094a:	4675      	movcs	r5, lr
 800094c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000950:	085b      	lsrs	r3, r3, #1
 8000952:	ea4f 0232 	mov.w	r2, r2, rrx
 8000956:	ebb6 0e02 	subs.w	lr, r6, r2
 800095a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800095e:	bf22      	ittt	cs
 8000960:	1ab6      	subcs	r6, r6, r2
 8000962:	4675      	movcs	r5, lr
 8000964:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000968:	ea55 0e06 	orrs.w	lr, r5, r6
 800096c:	d018      	beq.n	80009a0 <__aeabi_ddiv+0x114>
 800096e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000972:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000976:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800097a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800097e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000982:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000986:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800098a:	d1c0      	bne.n	800090e <__aeabi_ddiv+0x82>
 800098c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000990:	d10b      	bne.n	80009aa <__aeabi_ddiv+0x11e>
 8000992:	ea41 0100 	orr.w	r1, r1, r0
 8000996:	f04f 0000 	mov.w	r0, #0
 800099a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800099e:	e7b6      	b.n	800090e <__aeabi_ddiv+0x82>
 80009a0:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80009a4:	bf04      	itt	eq
 80009a6:	4301      	orreq	r1, r0
 80009a8:	2000      	moveq	r0, #0
 80009aa:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80009ae:	bf88      	it	hi
 80009b0:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80009b4:	f63f aeaf 	bhi.w	8000716 <__aeabi_dmul+0xde>
 80009b8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009bc:	bf04      	itt	eq
 80009be:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009c2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009c6:	f150 0000 	adcs.w	r0, r0, #0
 80009ca:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ce:	bd70      	pop	{r4, r5, r6, pc}
 80009d0:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80009d4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009d8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009dc:	bfc2      	ittt	gt
 80009de:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009e2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009e6:	bd70      	popgt	{r4, r5, r6, pc}
 80009e8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009ec:	f04f 0e00 	mov.w	lr, #0
 80009f0:	3c01      	subs	r4, #1
 80009f2:	e690      	b.n	8000716 <__aeabi_dmul+0xde>
 80009f4:	ea45 0e06 	orr.w	lr, r5, r6
 80009f8:	e68d      	b.n	8000716 <__aeabi_dmul+0xde>
 80009fa:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009fe:	ea94 0f0c 	teq	r4, ip
 8000a02:	bf08      	it	eq
 8000a04:	ea95 0f0c 	teqeq	r5, ip
 8000a08:	f43f af3b 	beq.w	8000882 <__aeabi_dmul+0x24a>
 8000a0c:	ea94 0f0c 	teq	r4, ip
 8000a10:	d10a      	bne.n	8000a28 <__aeabi_ddiv+0x19c>
 8000a12:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a16:	f47f af34 	bne.w	8000882 <__aeabi_dmul+0x24a>
 8000a1a:	ea95 0f0c 	teq	r5, ip
 8000a1e:	f47f af25 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a22:	4610      	mov	r0, r2
 8000a24:	4619      	mov	r1, r3
 8000a26:	e72c      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a28:	ea95 0f0c 	teq	r5, ip
 8000a2c:	d106      	bne.n	8000a3c <__aeabi_ddiv+0x1b0>
 8000a2e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a32:	f43f aefd 	beq.w	8000830 <__aeabi_dmul+0x1f8>
 8000a36:	4610      	mov	r0, r2
 8000a38:	4619      	mov	r1, r3
 8000a3a:	e722      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a3c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a46:	f47f aec5 	bne.w	80007d4 <__aeabi_dmul+0x19c>
 8000a4a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a4e:	f47f af0d 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a52:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a56:	f47f aeeb 	bne.w	8000830 <__aeabi_dmul+0x1f8>
 8000a5a:	e712      	b.n	8000882 <__aeabi_dmul+0x24a>

08000a5c <__gedf2>:
 8000a5c:	f04f 3cff 	mov.w	ip, #4294967295	@ 0xffffffff
 8000a60:	e006      	b.n	8000a70 <__cmpdf2+0x4>
 8000a62:	bf00      	nop

08000a64 <__ledf2>:
 8000a64:	f04f 0c01 	mov.w	ip, #1
 8000a68:	e002      	b.n	8000a70 <__cmpdf2+0x4>
 8000a6a:	bf00      	nop

08000a6c <__cmpdf2>:
 8000a6c:	f04f 0c01 	mov.w	ip, #1
 8000a70:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a74:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a78:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a80:	bf18      	it	ne
 8000a82:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a86:	d01b      	beq.n	8000ac0 <__cmpdf2+0x54>
 8000a88:	b001      	add	sp, #4
 8000a8a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a8e:	bf0c      	ite	eq
 8000a90:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a94:	ea91 0f03 	teqne	r1, r3
 8000a98:	bf02      	ittt	eq
 8000a9a:	ea90 0f02 	teqeq	r0, r2
 8000a9e:	2000      	moveq	r0, #0
 8000aa0:	4770      	bxeq	lr
 8000aa2:	f110 0f00 	cmn.w	r0, #0
 8000aa6:	ea91 0f03 	teq	r1, r3
 8000aaa:	bf58      	it	pl
 8000aac:	4299      	cmppl	r1, r3
 8000aae:	bf08      	it	eq
 8000ab0:	4290      	cmpeq	r0, r2
 8000ab2:	bf2c      	ite	cs
 8000ab4:	17d8      	asrcs	r0, r3, #31
 8000ab6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aba:	f040 0001 	orr.w	r0, r0, #1
 8000abe:	4770      	bx	lr
 8000ac0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ac4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ac8:	d102      	bne.n	8000ad0 <__cmpdf2+0x64>
 8000aca:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ace:	d107      	bne.n	8000ae0 <__cmpdf2+0x74>
 8000ad0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ad4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ad8:	d1d6      	bne.n	8000a88 <__cmpdf2+0x1c>
 8000ada:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ade:	d0d3      	beq.n	8000a88 <__cmpdf2+0x1c>
 8000ae0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ae4:	4770      	bx	lr
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_cdrcmple>:
 8000ae8:	4684      	mov	ip, r0
 8000aea:	4610      	mov	r0, r2
 8000aec:	4662      	mov	r2, ip
 8000aee:	468c      	mov	ip, r1
 8000af0:	4619      	mov	r1, r3
 8000af2:	4663      	mov	r3, ip
 8000af4:	e000      	b.n	8000af8 <__aeabi_cdcmpeq>
 8000af6:	bf00      	nop

08000af8 <__aeabi_cdcmpeq>:
 8000af8:	b501      	push	{r0, lr}
 8000afa:	f7ff ffb7 	bl	8000a6c <__cmpdf2>
 8000afe:	2800      	cmp	r0, #0
 8000b00:	bf48      	it	mi
 8000b02:	f110 0f00 	cmnmi.w	r0, #0
 8000b06:	bd01      	pop	{r0, pc}

08000b08 <__aeabi_dcmpeq>:
 8000b08:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b0c:	f7ff fff4 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b10:	bf0c      	ite	eq
 8000b12:	2001      	moveq	r0, #1
 8000b14:	2000      	movne	r0, #0
 8000b16:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1a:	bf00      	nop

08000b1c <__aeabi_dcmplt>:
 8000b1c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b20:	f7ff ffea 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b24:	bf34      	ite	cc
 8000b26:	2001      	movcc	r0, #1
 8000b28:	2000      	movcs	r0, #0
 8000b2a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2e:	bf00      	nop

08000b30 <__aeabi_dcmple>:
 8000b30:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b34:	f7ff ffe0 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b38:	bf94      	ite	ls
 8000b3a:	2001      	movls	r0, #1
 8000b3c:	2000      	movhi	r0, #0
 8000b3e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b42:	bf00      	nop

08000b44 <__aeabi_dcmpge>:
 8000b44:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b48:	f7ff ffce 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b4c:	bf94      	ite	ls
 8000b4e:	2001      	movls	r0, #1
 8000b50:	2000      	movhi	r0, #0
 8000b52:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b56:	bf00      	nop

08000b58 <__aeabi_dcmpgt>:
 8000b58:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b5c:	f7ff ffc4 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b60:	bf34      	ite	cc
 8000b62:	2001      	movcc	r0, #1
 8000b64:	2000      	movcs	r0, #0
 8000b66:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b6a:	bf00      	nop

08000b6c <__aeabi_dcmpun>:
 8000b6c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b70:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b74:	d102      	bne.n	8000b7c <__aeabi_dcmpun+0x10>
 8000b76:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b7a:	d10a      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b80:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b84:	d102      	bne.n	8000b8c <__aeabi_dcmpun+0x20>
 8000b86:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b8a:	d102      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b8c:	f04f 0000 	mov.w	r0, #0
 8000b90:	4770      	bx	lr
 8000b92:	f04f 0001 	mov.w	r0, #1
 8000b96:	4770      	bx	lr

08000b98 <__aeabi_d2iz>:
 8000b98:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b9c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000ba0:	d215      	bcs.n	8000bce <__aeabi_d2iz+0x36>
 8000ba2:	d511      	bpl.n	8000bc8 <__aeabi_d2iz+0x30>
 8000ba4:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000ba8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bac:	d912      	bls.n	8000bd4 <__aeabi_d2iz+0x3c>
 8000bae:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bb2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000bb6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bba:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000bbe:	fa23 f002 	lsr.w	r0, r3, r2
 8000bc2:	bf18      	it	ne
 8000bc4:	4240      	negne	r0, r0
 8000bc6:	4770      	bx	lr
 8000bc8:	f04f 0000 	mov.w	r0, #0
 8000bcc:	4770      	bx	lr
 8000bce:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bd2:	d105      	bne.n	8000be0 <__aeabi_d2iz+0x48>
 8000bd4:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000bd8:	bf08      	it	eq
 8000bda:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000bde:	4770      	bx	lr
 8000be0:	f04f 0000 	mov.w	r0, #0
 8000be4:	4770      	bx	lr
 8000be6:	bf00      	nop

08000be8 <__aeabi_uldivmod>:
 8000be8:	b953      	cbnz	r3, 8000c00 <__aeabi_uldivmod+0x18>
 8000bea:	b94a      	cbnz	r2, 8000c00 <__aeabi_uldivmod+0x18>
 8000bec:	2900      	cmp	r1, #0
 8000bee:	bf08      	it	eq
 8000bf0:	2800      	cmpeq	r0, #0
 8000bf2:	bf1c      	itt	ne
 8000bf4:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 8000bf8:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 8000bfc:	f001 b8f6 	b.w	8001dec <__aeabi_idiv0>
 8000c00:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c04:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c08:	f000 f806 	bl	8000c18 <__udivmoddi4>
 8000c0c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c10:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c14:	b004      	add	sp, #16
 8000c16:	4770      	bx	lr

08000c18 <__udivmoddi4>:
 8000c18:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c1c:	9d08      	ldr	r5, [sp, #32]
 8000c1e:	460c      	mov	r4, r1
 8000c20:	2b00      	cmp	r3, #0
 8000c22:	d14e      	bne.n	8000cc2 <__udivmoddi4+0xaa>
 8000c24:	4694      	mov	ip, r2
 8000c26:	458c      	cmp	ip, r1
 8000c28:	4686      	mov	lr, r0
 8000c2a:	fab2 f282 	clz	r2, r2
 8000c2e:	d962      	bls.n	8000cf6 <__udivmoddi4+0xde>
 8000c30:	b14a      	cbz	r2, 8000c46 <__udivmoddi4+0x2e>
 8000c32:	f1c2 0320 	rsb	r3, r2, #32
 8000c36:	4091      	lsls	r1, r2
 8000c38:	fa20 f303 	lsr.w	r3, r0, r3
 8000c3c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000c40:	4319      	orrs	r1, r3
 8000c42:	fa00 fe02 	lsl.w	lr, r0, r2
 8000c46:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000c4a:	fa1f f68c 	uxth.w	r6, ip
 8000c4e:	fbb1 f4f7 	udiv	r4, r1, r7
 8000c52:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000c56:	fb07 1114 	mls	r1, r7, r4, r1
 8000c5a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c5e:	fb04 f106 	mul.w	r1, r4, r6
 8000c62:	4299      	cmp	r1, r3
 8000c64:	d90a      	bls.n	8000c7c <__udivmoddi4+0x64>
 8000c66:	eb1c 0303 	adds.w	r3, ip, r3
 8000c6a:	f104 30ff 	add.w	r0, r4, #4294967295	@ 0xffffffff
 8000c6e:	f080 8112 	bcs.w	8000e96 <__udivmoddi4+0x27e>
 8000c72:	4299      	cmp	r1, r3
 8000c74:	f240 810f 	bls.w	8000e96 <__udivmoddi4+0x27e>
 8000c78:	3c02      	subs	r4, #2
 8000c7a:	4463      	add	r3, ip
 8000c7c:	1a59      	subs	r1, r3, r1
 8000c7e:	fa1f f38e 	uxth.w	r3, lr
 8000c82:	fbb1 f0f7 	udiv	r0, r1, r7
 8000c86:	fb07 1110 	mls	r1, r7, r0, r1
 8000c8a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c8e:	fb00 f606 	mul.w	r6, r0, r6
 8000c92:	429e      	cmp	r6, r3
 8000c94:	d90a      	bls.n	8000cac <__udivmoddi4+0x94>
 8000c96:	eb1c 0303 	adds.w	r3, ip, r3
 8000c9a:	f100 31ff 	add.w	r1, r0, #4294967295	@ 0xffffffff
 8000c9e:	f080 80fc 	bcs.w	8000e9a <__udivmoddi4+0x282>
 8000ca2:	429e      	cmp	r6, r3
 8000ca4:	f240 80f9 	bls.w	8000e9a <__udivmoddi4+0x282>
 8000ca8:	4463      	add	r3, ip
 8000caa:	3802      	subs	r0, #2
 8000cac:	1b9b      	subs	r3, r3, r6
 8000cae:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000cb2:	2100      	movs	r1, #0
 8000cb4:	b11d      	cbz	r5, 8000cbe <__udivmoddi4+0xa6>
 8000cb6:	40d3      	lsrs	r3, r2
 8000cb8:	2200      	movs	r2, #0
 8000cba:	e9c5 3200 	strd	r3, r2, [r5]
 8000cbe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cc2:	428b      	cmp	r3, r1
 8000cc4:	d905      	bls.n	8000cd2 <__udivmoddi4+0xba>
 8000cc6:	b10d      	cbz	r5, 8000ccc <__udivmoddi4+0xb4>
 8000cc8:	e9c5 0100 	strd	r0, r1, [r5]
 8000ccc:	2100      	movs	r1, #0
 8000cce:	4608      	mov	r0, r1
 8000cd0:	e7f5      	b.n	8000cbe <__udivmoddi4+0xa6>
 8000cd2:	fab3 f183 	clz	r1, r3
 8000cd6:	2900      	cmp	r1, #0
 8000cd8:	d146      	bne.n	8000d68 <__udivmoddi4+0x150>
 8000cda:	42a3      	cmp	r3, r4
 8000cdc:	d302      	bcc.n	8000ce4 <__udivmoddi4+0xcc>
 8000cde:	4290      	cmp	r0, r2
 8000ce0:	f0c0 80f0 	bcc.w	8000ec4 <__udivmoddi4+0x2ac>
 8000ce4:	1a86      	subs	r6, r0, r2
 8000ce6:	eb64 0303 	sbc.w	r3, r4, r3
 8000cea:	2001      	movs	r0, #1
 8000cec:	2d00      	cmp	r5, #0
 8000cee:	d0e6      	beq.n	8000cbe <__udivmoddi4+0xa6>
 8000cf0:	e9c5 6300 	strd	r6, r3, [r5]
 8000cf4:	e7e3      	b.n	8000cbe <__udivmoddi4+0xa6>
 8000cf6:	2a00      	cmp	r2, #0
 8000cf8:	f040 8090 	bne.w	8000e1c <__udivmoddi4+0x204>
 8000cfc:	eba1 040c 	sub.w	r4, r1, ip
 8000d00:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000d04:	fa1f f78c 	uxth.w	r7, ip
 8000d08:	2101      	movs	r1, #1
 8000d0a:	fbb4 f6f8 	udiv	r6, r4, r8
 8000d0e:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000d12:	fb08 4416 	mls	r4, r8, r6, r4
 8000d16:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000d1a:	fb07 f006 	mul.w	r0, r7, r6
 8000d1e:	4298      	cmp	r0, r3
 8000d20:	d908      	bls.n	8000d34 <__udivmoddi4+0x11c>
 8000d22:	eb1c 0303 	adds.w	r3, ip, r3
 8000d26:	f106 34ff 	add.w	r4, r6, #4294967295	@ 0xffffffff
 8000d2a:	d202      	bcs.n	8000d32 <__udivmoddi4+0x11a>
 8000d2c:	4298      	cmp	r0, r3
 8000d2e:	f200 80cd 	bhi.w	8000ecc <__udivmoddi4+0x2b4>
 8000d32:	4626      	mov	r6, r4
 8000d34:	1a1c      	subs	r4, r3, r0
 8000d36:	fa1f f38e 	uxth.w	r3, lr
 8000d3a:	fbb4 f0f8 	udiv	r0, r4, r8
 8000d3e:	fb08 4410 	mls	r4, r8, r0, r4
 8000d42:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000d46:	fb00 f707 	mul.w	r7, r0, r7
 8000d4a:	429f      	cmp	r7, r3
 8000d4c:	d908      	bls.n	8000d60 <__udivmoddi4+0x148>
 8000d4e:	eb1c 0303 	adds.w	r3, ip, r3
 8000d52:	f100 34ff 	add.w	r4, r0, #4294967295	@ 0xffffffff
 8000d56:	d202      	bcs.n	8000d5e <__udivmoddi4+0x146>
 8000d58:	429f      	cmp	r7, r3
 8000d5a:	f200 80b0 	bhi.w	8000ebe <__udivmoddi4+0x2a6>
 8000d5e:	4620      	mov	r0, r4
 8000d60:	1bdb      	subs	r3, r3, r7
 8000d62:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000d66:	e7a5      	b.n	8000cb4 <__udivmoddi4+0x9c>
 8000d68:	f1c1 0620 	rsb	r6, r1, #32
 8000d6c:	408b      	lsls	r3, r1
 8000d6e:	fa22 f706 	lsr.w	r7, r2, r6
 8000d72:	431f      	orrs	r7, r3
 8000d74:	fa20 fc06 	lsr.w	ip, r0, r6
 8000d78:	fa04 f301 	lsl.w	r3, r4, r1
 8000d7c:	ea43 030c 	orr.w	r3, r3, ip
 8000d80:	40f4      	lsrs	r4, r6
 8000d82:	fa00 f801 	lsl.w	r8, r0, r1
 8000d86:	0c38      	lsrs	r0, r7, #16
 8000d88:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000d8c:	fbb4 fef0 	udiv	lr, r4, r0
 8000d90:	fa1f fc87 	uxth.w	ip, r7
 8000d94:	fb00 441e 	mls	r4, r0, lr, r4
 8000d98:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000d9c:	fb0e f90c 	mul.w	r9, lr, ip
 8000da0:	45a1      	cmp	r9, r4
 8000da2:	fa02 f201 	lsl.w	r2, r2, r1
 8000da6:	d90a      	bls.n	8000dbe <__udivmoddi4+0x1a6>
 8000da8:	193c      	adds	r4, r7, r4
 8000daa:	f10e 3aff 	add.w	sl, lr, #4294967295	@ 0xffffffff
 8000dae:	f080 8084 	bcs.w	8000eba <__udivmoddi4+0x2a2>
 8000db2:	45a1      	cmp	r9, r4
 8000db4:	f240 8081 	bls.w	8000eba <__udivmoddi4+0x2a2>
 8000db8:	f1ae 0e02 	sub.w	lr, lr, #2
 8000dbc:	443c      	add	r4, r7
 8000dbe:	eba4 0409 	sub.w	r4, r4, r9
 8000dc2:	fa1f f983 	uxth.w	r9, r3
 8000dc6:	fbb4 f3f0 	udiv	r3, r4, r0
 8000dca:	fb00 4413 	mls	r4, r0, r3, r4
 8000dce:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000dd2:	fb03 fc0c 	mul.w	ip, r3, ip
 8000dd6:	45a4      	cmp	ip, r4
 8000dd8:	d907      	bls.n	8000dea <__udivmoddi4+0x1d2>
 8000dda:	193c      	adds	r4, r7, r4
 8000ddc:	f103 30ff 	add.w	r0, r3, #4294967295	@ 0xffffffff
 8000de0:	d267      	bcs.n	8000eb2 <__udivmoddi4+0x29a>
 8000de2:	45a4      	cmp	ip, r4
 8000de4:	d965      	bls.n	8000eb2 <__udivmoddi4+0x29a>
 8000de6:	3b02      	subs	r3, #2
 8000de8:	443c      	add	r4, r7
 8000dea:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000dee:	fba0 9302 	umull	r9, r3, r0, r2
 8000df2:	eba4 040c 	sub.w	r4, r4, ip
 8000df6:	429c      	cmp	r4, r3
 8000df8:	46ce      	mov	lr, r9
 8000dfa:	469c      	mov	ip, r3
 8000dfc:	d351      	bcc.n	8000ea2 <__udivmoddi4+0x28a>
 8000dfe:	d04e      	beq.n	8000e9e <__udivmoddi4+0x286>
 8000e00:	b155      	cbz	r5, 8000e18 <__udivmoddi4+0x200>
 8000e02:	ebb8 030e 	subs.w	r3, r8, lr
 8000e06:	eb64 040c 	sbc.w	r4, r4, ip
 8000e0a:	fa04 f606 	lsl.w	r6, r4, r6
 8000e0e:	40cb      	lsrs	r3, r1
 8000e10:	431e      	orrs	r6, r3
 8000e12:	40cc      	lsrs	r4, r1
 8000e14:	e9c5 6400 	strd	r6, r4, [r5]
 8000e18:	2100      	movs	r1, #0
 8000e1a:	e750      	b.n	8000cbe <__udivmoddi4+0xa6>
 8000e1c:	f1c2 0320 	rsb	r3, r2, #32
 8000e20:	fa20 f103 	lsr.w	r1, r0, r3
 8000e24:	fa0c fc02 	lsl.w	ip, ip, r2
 8000e28:	fa24 f303 	lsr.w	r3, r4, r3
 8000e2c:	4094      	lsls	r4, r2
 8000e2e:	430c      	orrs	r4, r1
 8000e30:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000e34:	fa00 fe02 	lsl.w	lr, r0, r2
 8000e38:	fa1f f78c 	uxth.w	r7, ip
 8000e3c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000e40:	fb08 3110 	mls	r1, r8, r0, r3
 8000e44:	0c23      	lsrs	r3, r4, #16
 8000e46:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000e4a:	fb00 f107 	mul.w	r1, r0, r7
 8000e4e:	4299      	cmp	r1, r3
 8000e50:	d908      	bls.n	8000e64 <__udivmoddi4+0x24c>
 8000e52:	eb1c 0303 	adds.w	r3, ip, r3
 8000e56:	f100 36ff 	add.w	r6, r0, #4294967295	@ 0xffffffff
 8000e5a:	d22c      	bcs.n	8000eb6 <__udivmoddi4+0x29e>
 8000e5c:	4299      	cmp	r1, r3
 8000e5e:	d92a      	bls.n	8000eb6 <__udivmoddi4+0x29e>
 8000e60:	3802      	subs	r0, #2
 8000e62:	4463      	add	r3, ip
 8000e64:	1a5b      	subs	r3, r3, r1
 8000e66:	b2a4      	uxth	r4, r4
 8000e68:	fbb3 f1f8 	udiv	r1, r3, r8
 8000e6c:	fb08 3311 	mls	r3, r8, r1, r3
 8000e70:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000e74:	fb01 f307 	mul.w	r3, r1, r7
 8000e78:	42a3      	cmp	r3, r4
 8000e7a:	d908      	bls.n	8000e8e <__udivmoddi4+0x276>
 8000e7c:	eb1c 0404 	adds.w	r4, ip, r4
 8000e80:	f101 36ff 	add.w	r6, r1, #4294967295	@ 0xffffffff
 8000e84:	d213      	bcs.n	8000eae <__udivmoddi4+0x296>
 8000e86:	42a3      	cmp	r3, r4
 8000e88:	d911      	bls.n	8000eae <__udivmoddi4+0x296>
 8000e8a:	3902      	subs	r1, #2
 8000e8c:	4464      	add	r4, ip
 8000e8e:	1ae4      	subs	r4, r4, r3
 8000e90:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000e94:	e739      	b.n	8000d0a <__udivmoddi4+0xf2>
 8000e96:	4604      	mov	r4, r0
 8000e98:	e6f0      	b.n	8000c7c <__udivmoddi4+0x64>
 8000e9a:	4608      	mov	r0, r1
 8000e9c:	e706      	b.n	8000cac <__udivmoddi4+0x94>
 8000e9e:	45c8      	cmp	r8, r9
 8000ea0:	d2ae      	bcs.n	8000e00 <__udivmoddi4+0x1e8>
 8000ea2:	ebb9 0e02 	subs.w	lr, r9, r2
 8000ea6:	eb63 0c07 	sbc.w	ip, r3, r7
 8000eaa:	3801      	subs	r0, #1
 8000eac:	e7a8      	b.n	8000e00 <__udivmoddi4+0x1e8>
 8000eae:	4631      	mov	r1, r6
 8000eb0:	e7ed      	b.n	8000e8e <__udivmoddi4+0x276>
 8000eb2:	4603      	mov	r3, r0
 8000eb4:	e799      	b.n	8000dea <__udivmoddi4+0x1d2>
 8000eb6:	4630      	mov	r0, r6
 8000eb8:	e7d4      	b.n	8000e64 <__udivmoddi4+0x24c>
 8000eba:	46d6      	mov	lr, sl
 8000ebc:	e77f      	b.n	8000dbe <__udivmoddi4+0x1a6>
 8000ebe:	4463      	add	r3, ip
 8000ec0:	3802      	subs	r0, #2
 8000ec2:	e74d      	b.n	8000d60 <__udivmoddi4+0x148>
 8000ec4:	4606      	mov	r6, r0
 8000ec6:	4623      	mov	r3, r4
 8000ec8:	4608      	mov	r0, r1
 8000eca:	e70f      	b.n	8000cec <__udivmoddi4+0xd4>
 8000ecc:	3e02      	subs	r6, #2
 8000ece:	4463      	add	r3, ip
 8000ed0:	e730      	b.n	8000d34 <__udivmoddi4+0x11c>
 8000ed2:	bf00      	nop

08000ed4 <selfrel_offset31>:
 8000ed4:	6803      	ldr	r3, [r0, #0]
 8000ed6:	005a      	lsls	r2, r3, #1
 8000ed8:	bf4c      	ite	mi
 8000eda:	f043 4300 	orrmi.w	r3, r3, #2147483648	@ 0x80000000
 8000ede:	f023 4300 	bicpl.w	r3, r3, #2147483648	@ 0x80000000
 8000ee2:	4418      	add	r0, r3
 8000ee4:	4770      	bx	lr
 8000ee6:	bf00      	nop

08000ee8 <search_EIT_table>:
 8000ee8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8000eec:	b349      	cbz	r1, 8000f42 <search_EIT_table+0x5a>
 8000eee:	1e4f      	subs	r7, r1, #1
 8000ef0:	4604      	mov	r4, r0
 8000ef2:	4615      	mov	r5, r2
 8000ef4:	463e      	mov	r6, r7
 8000ef6:	f04f 0900 	mov.w	r9, #0
 8000efa:	eb09 0106 	add.w	r1, r9, r6
 8000efe:	eb01 71d1 	add.w	r1, r1, r1, lsr #31
 8000f02:	1049      	asrs	r1, r1, #1
 8000f04:	eb04 08c1 	add.w	r8, r4, r1, lsl #3
 8000f08:	4640      	mov	r0, r8
 8000f0a:	f7ff ffe3 	bl	8000ed4 <selfrel_offset31>
 8000f0e:	428f      	cmp	r7, r1
 8000f10:	4603      	mov	r3, r0
 8000f12:	ea4f 00c1 	mov.w	r0, r1, lsl #3
 8000f16:	d00f      	beq.n	8000f38 <search_EIT_table+0x50>
 8000f18:	3008      	adds	r0, #8
 8000f1a:	42ab      	cmp	r3, r5
 8000f1c:	4420      	add	r0, r4
 8000f1e:	d807      	bhi.n	8000f30 <search_EIT_table+0x48>
 8000f20:	f7ff ffd8 	bl	8000ed4 <selfrel_offset31>
 8000f24:	3801      	subs	r0, #1
 8000f26:	42a8      	cmp	r0, r5
 8000f28:	d208      	bcs.n	8000f3c <search_EIT_table+0x54>
 8000f2a:	f101 0901 	add.w	r9, r1, #1
 8000f2e:	e7e4      	b.n	8000efa <search_EIT_table+0x12>
 8000f30:	4589      	cmp	r9, r1
 8000f32:	d006      	beq.n	8000f42 <search_EIT_table+0x5a>
 8000f34:	1e4e      	subs	r6, r1, #1
 8000f36:	e7e0      	b.n	8000efa <search_EIT_table+0x12>
 8000f38:	42ab      	cmp	r3, r5
 8000f3a:	d8f9      	bhi.n	8000f30 <search_EIT_table+0x48>
 8000f3c:	4640      	mov	r0, r8
 8000f3e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8000f42:	f04f 0800 	mov.w	r8, #0
 8000f46:	4640      	mov	r0, r8
 8000f48:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

08000f4c <__gnu_unwind_get_pr_addr>:
 8000f4c:	2801      	cmp	r0, #1
 8000f4e:	d007      	beq.n	8000f60 <__gnu_unwind_get_pr_addr+0x14>
 8000f50:	2802      	cmp	r0, #2
 8000f52:	d007      	beq.n	8000f64 <__gnu_unwind_get_pr_addr+0x18>
 8000f54:	4b04      	ldr	r3, [pc, #16]	@ (8000f68 <__gnu_unwind_get_pr_addr+0x1c>)
 8000f56:	2800      	cmp	r0, #0
 8000f58:	bf0c      	ite	eq
 8000f5a:	4618      	moveq	r0, r3
 8000f5c:	2000      	movne	r0, #0
 8000f5e:	4770      	bx	lr
 8000f60:	4802      	ldr	r0, [pc, #8]	@ (8000f6c <__gnu_unwind_get_pr_addr+0x20>)
 8000f62:	4770      	bx	lr
 8000f64:	4802      	ldr	r0, [pc, #8]	@ (8000f70 <__gnu_unwind_get_pr_addr+0x24>)
 8000f66:	4770      	bx	lr
 8000f68:	08001615 	.word	0x08001615
 8000f6c:	08001619 	.word	0x08001619
 8000f70:	0800161d 	.word	0x0800161d

08000f74 <get_eit_entry>:
 8000f74:	b530      	push	{r4, r5, lr}
 8000f76:	4b21      	ldr	r3, [pc, #132]	@ (8000ffc <get_eit_entry+0x88>)
 8000f78:	b083      	sub	sp, #12
 8000f7a:	4604      	mov	r4, r0
 8000f7c:	1e8d      	subs	r5, r1, #2
 8000f7e:	b31b      	cbz	r3, 8000fc8 <get_eit_entry+0x54>
 8000f80:	a901      	add	r1, sp, #4
 8000f82:	4628      	mov	r0, r5
 8000f84:	f3af 8000 	nop.w
 8000f88:	b388      	cbz	r0, 8000fee <get_eit_entry+0x7a>
 8000f8a:	9901      	ldr	r1, [sp, #4]
 8000f8c:	462a      	mov	r2, r5
 8000f8e:	f7ff ffab 	bl	8000ee8 <search_EIT_table>
 8000f92:	4601      	mov	r1, r0
 8000f94:	b358      	cbz	r0, 8000fee <get_eit_entry+0x7a>
 8000f96:	f7ff ff9d 	bl	8000ed4 <selfrel_offset31>
 8000f9a:	684b      	ldr	r3, [r1, #4]
 8000f9c:	64a0      	str	r0, [r4, #72]	@ 0x48
 8000f9e:	2b01      	cmp	r3, #1
 8000fa0:	d028      	beq.n	8000ff4 <get_eit_entry+0x80>
 8000fa2:	2b00      	cmp	r3, #0
 8000fa4:	f101 0004 	add.w	r0, r1, #4
 8000fa8:	db1f      	blt.n	8000fea <get_eit_entry+0x76>
 8000faa:	f7ff ff93 	bl	8000ed4 <selfrel_offset31>
 8000fae:	2300      	movs	r3, #0
 8000fb0:	6523      	str	r3, [r4, #80]	@ 0x50
 8000fb2:	6803      	ldr	r3, [r0, #0]
 8000fb4:	64e0      	str	r0, [r4, #76]	@ 0x4c
 8000fb6:	2b00      	cmp	r3, #0
 8000fb8:	db0d      	blt.n	8000fd6 <get_eit_entry+0x62>
 8000fba:	f7ff ff8b 	bl	8000ed4 <selfrel_offset31>
 8000fbe:	4603      	mov	r3, r0
 8000fc0:	2000      	movs	r0, #0
 8000fc2:	6123      	str	r3, [r4, #16]
 8000fc4:	b003      	add	sp, #12
 8000fc6:	bd30      	pop	{r4, r5, pc}
 8000fc8:	4b0d      	ldr	r3, [pc, #52]	@ (8001000 <get_eit_entry+0x8c>)
 8000fca:	490e      	ldr	r1, [pc, #56]	@ (8001004 <get_eit_entry+0x90>)
 8000fcc:	1ac9      	subs	r1, r1, r3
 8000fce:	10c9      	asrs	r1, r1, #3
 8000fd0:	4618      	mov	r0, r3
 8000fd2:	9101      	str	r1, [sp, #4]
 8000fd4:	e7da      	b.n	8000f8c <get_eit_entry+0x18>
 8000fd6:	f3c3 6003 	ubfx	r0, r3, #24, #4
 8000fda:	f7ff ffb7 	bl	8000f4c <__gnu_unwind_get_pr_addr>
 8000fde:	4603      	mov	r3, r0
 8000fe0:	b128      	cbz	r0, 8000fee <get_eit_entry+0x7a>
 8000fe2:	2000      	movs	r0, #0
 8000fe4:	6123      	str	r3, [r4, #16]
 8000fe6:	b003      	add	sp, #12
 8000fe8:	bd30      	pop	{r4, r5, pc}
 8000fea:	2301      	movs	r3, #1
 8000fec:	e7e0      	b.n	8000fb0 <get_eit_entry+0x3c>
 8000fee:	2300      	movs	r3, #0
 8000ff0:	2009      	movs	r0, #9
 8000ff2:	e7e6      	b.n	8000fc2 <get_eit_entry+0x4e>
 8000ff4:	2300      	movs	r3, #0
 8000ff6:	2005      	movs	r0, #5
 8000ff8:	e7e3      	b.n	8000fc2 <get_eit_entry+0x4e>
 8000ffa:	bf00      	nop
 8000ffc:	00000000 	.word	0x00000000
 8001000:	080092c0 	.word	0x080092c0
 8001004:	080094e0 	.word	0x080094e0

08001008 <restore_non_core_regs>:
 8001008:	6803      	ldr	r3, [r0, #0]
 800100a:	07da      	lsls	r2, r3, #31
 800100c:	b510      	push	{r4, lr}
 800100e:	4604      	mov	r4, r0
 8001010:	d406      	bmi.n	8001020 <restore_non_core_regs+0x18>
 8001012:	079b      	lsls	r3, r3, #30
 8001014:	f100 0048 	add.w	r0, r0, #72	@ 0x48
 8001018:	d509      	bpl.n	800102e <restore_non_core_regs+0x26>
 800101a:	f000 fc69 	bl	80018f0 <__gnu_Unwind_Restore_VFP_D>
 800101e:	6823      	ldr	r3, [r4, #0]
 8001020:	0759      	lsls	r1, r3, #29
 8001022:	d509      	bpl.n	8001038 <restore_non_core_regs+0x30>
 8001024:	071a      	lsls	r2, r3, #28
 8001026:	d50e      	bpl.n	8001046 <restore_non_core_regs+0x3e>
 8001028:	06db      	lsls	r3, r3, #27
 800102a:	d513      	bpl.n	8001054 <restore_non_core_regs+0x4c>
 800102c:	bd10      	pop	{r4, pc}
 800102e:	f000 fc57 	bl	80018e0 <__gnu_Unwind_Restore_VFP>
 8001032:	6823      	ldr	r3, [r4, #0]
 8001034:	0759      	lsls	r1, r3, #29
 8001036:	d4f5      	bmi.n	8001024 <restore_non_core_regs+0x1c>
 8001038:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 800103c:	f000 fc60 	bl	8001900 <__gnu_Unwind_Restore_VFP_D_16_to_31>
 8001040:	6823      	ldr	r3, [r4, #0]
 8001042:	071a      	lsls	r2, r3, #28
 8001044:	d4f0      	bmi.n	8001028 <restore_non_core_regs+0x20>
 8001046:	f504 70a8 	add.w	r0, r4, #336	@ 0x150
 800104a:	f000 fc61 	bl	8001910 <__gnu_Unwind_Restore_WMMXD>
 800104e:	6823      	ldr	r3, [r4, #0]
 8001050:	06db      	lsls	r3, r3, #27
 8001052:	d4eb      	bmi.n	800102c <restore_non_core_regs+0x24>
 8001054:	f504 70e8 	add.w	r0, r4, #464	@ 0x1d0
 8001058:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800105c:	f000 bc9c 	b.w	8001998 <__gnu_Unwind_Restore_WMMXC>

08001060 <__gnu_unwind_24bit.constprop.0>:
 8001060:	2009      	movs	r0, #9
 8001062:	4770      	bx	lr

08001064 <_Unwind_decode_typeinfo_ptr.constprop.0>:
 8001064:	4603      	mov	r3, r0
 8001066:	6800      	ldr	r0, [r0, #0]
 8001068:	b100      	cbz	r0, 800106c <_Unwind_decode_typeinfo_ptr.constprop.0+0x8>
 800106a:	4418      	add	r0, r3
 800106c:	4770      	bx	lr
 800106e:	bf00      	nop

08001070 <_Unwind_DebugHook>:
 8001070:	4770      	bx	lr
 8001072:	bf00      	nop

08001074 <unwind_phase2>:
 8001074:	b570      	push	{r4, r5, r6, lr}
 8001076:	4604      	mov	r4, r0
 8001078:	460e      	mov	r6, r1
 800107a:	6c31      	ldr	r1, [r6, #64]	@ 0x40
 800107c:	4620      	mov	r0, r4
 800107e:	f7ff ff79 	bl	8000f74 <get_eit_entry>
 8001082:	4605      	mov	r5, r0
 8001084:	b988      	cbnz	r0, 80010aa <unwind_phase2+0x36>
 8001086:	6c32      	ldr	r2, [r6, #64]	@ 0x40
 8001088:	6162      	str	r2, [r4, #20]
 800108a:	6923      	ldr	r3, [r4, #16]
 800108c:	4632      	mov	r2, r6
 800108e:	4621      	mov	r1, r4
 8001090:	2001      	movs	r0, #1
 8001092:	4798      	blx	r3
 8001094:	2808      	cmp	r0, #8
 8001096:	d0f0      	beq.n	800107a <unwind_phase2+0x6>
 8001098:	2807      	cmp	r0, #7
 800109a:	d106      	bne.n	80010aa <unwind_phase2+0x36>
 800109c:	4628      	mov	r0, r5
 800109e:	6c31      	ldr	r1, [r6, #64]	@ 0x40
 80010a0:	f7ff ffe6 	bl	8001070 <_Unwind_DebugHook>
 80010a4:	1d30      	adds	r0, r6, #4
 80010a6:	f000 fc0f 	bl	80018c8 <__restore_core_regs>
 80010aa:	f004 ffd5 	bl	8006058 <abort>
 80010ae:	bf00      	nop

080010b0 <unwind_phase2_forced>:
 80010b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80010b4:	1d0d      	adds	r5, r1, #4
 80010b6:	f8d0 800c 	ldr.w	r8, [r0, #12]
 80010ba:	f8d0 9018 	ldr.w	r9, [r0, #24]
 80010be:	4607      	mov	r7, r0
 80010c0:	4614      	mov	r4, r2
 80010c2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80010c4:	f5ad 7d72 	sub.w	sp, sp, #968	@ 0x3c8
 80010c8:	f10d 0c0c 	add.w	ip, sp, #12
 80010cc:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 80010d0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80010d2:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 80010d6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80010d8:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 80010dc:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 80010e0:	ae02      	add	r6, sp, #8
 80010e2:	f04f 0e00 	mov.w	lr, #0
 80010e6:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
 80010ea:	f8c6 e000 	str.w	lr, [r6]
 80010ee:	e020      	b.n	8001132 <unwind_phase2_forced+0x82>
 80010f0:	6c33      	ldr	r3, [r6, #64]	@ 0x40
 80010f2:	617b      	str	r3, [r7, #20]
 80010f4:	f44f 72f0 	mov.w	r2, #480	@ 0x1e0
 80010f8:	4631      	mov	r1, r6
 80010fa:	a87a      	add	r0, sp, #488	@ 0x1e8
 80010fc:	f005 feb5 	bl	8006e6a <memcpy>
 8001100:	693b      	ldr	r3, [r7, #16]
 8001102:	aa7a      	add	r2, sp, #488	@ 0x1e8
 8001104:	4639      	mov	r1, r7
 8001106:	4650      	mov	r0, sl
 8001108:	4798      	blx	r3
 800110a:	9b88      	ldr	r3, [sp, #544]	@ 0x220
 800110c:	6473      	str	r3, [r6, #68]	@ 0x44
 800110e:	4621      	mov	r1, r4
 8001110:	e9cd 6900 	strd	r6, r9, [sp]
 8001114:	4605      	mov	r5, r0
 8001116:	463b      	mov	r3, r7
 8001118:	463a      	mov	r2, r7
 800111a:	2001      	movs	r0, #1
 800111c:	47c0      	blx	r8
 800111e:	4604      	mov	r4, r0
 8001120:	bb18      	cbnz	r0, 800116a <unwind_phase2_forced+0xba>
 8001122:	f44f 72f0 	mov.w	r2, #480	@ 0x1e0
 8001126:	a97a      	add	r1, sp, #488	@ 0x1e8
 8001128:	4630      	mov	r0, r6
 800112a:	f005 fe9e 	bl	8006e6a <memcpy>
 800112e:	2d08      	cmp	r5, #8
 8001130:	d119      	bne.n	8001166 <unwind_phase2_forced+0xb6>
 8001132:	6c31      	ldr	r1, [r6, #64]	@ 0x40
 8001134:	4638      	mov	r0, r7
 8001136:	f7ff ff1d 	bl	8000f74 <get_eit_entry>
 800113a:	3409      	adds	r4, #9
 800113c:	fa5f fa84 	uxtb.w	sl, r4
 8001140:	4605      	mov	r5, r0
 8001142:	2800      	cmp	r0, #0
 8001144:	d0d4      	beq.n	80010f0 <unwind_phase2_forced+0x40>
 8001146:	6bb3      	ldr	r3, [r6, #56]	@ 0x38
 8001148:	6473      	str	r3, [r6, #68]	@ 0x44
 800114a:	463a      	mov	r2, r7
 800114c:	e9cd 6900 	strd	r6, r9, [sp]
 8001150:	463b      	mov	r3, r7
 8001152:	f04a 0110 	orr.w	r1, sl, #16
 8001156:	2001      	movs	r0, #1
 8001158:	47c0      	blx	r8
 800115a:	b930      	cbnz	r0, 800116a <unwind_phase2_forced+0xba>
 800115c:	4628      	mov	r0, r5
 800115e:	f50d 7d72 	add.w	sp, sp, #968	@ 0x3c8
 8001162:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001166:	2d07      	cmp	r5, #7
 8001168:	d005      	beq.n	8001176 <unwind_phase2_forced+0xc6>
 800116a:	2509      	movs	r5, #9
 800116c:	4628      	mov	r0, r5
 800116e:	f50d 7d72 	add.w	sp, sp, #968	@ 0x3c8
 8001172:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001176:	4620      	mov	r0, r4
 8001178:	6c31      	ldr	r1, [r6, #64]	@ 0x40
 800117a:	f7ff ff79 	bl	8001070 <_Unwind_DebugHook>
 800117e:	a803      	add	r0, sp, #12
 8001180:	f000 fba2 	bl	80018c8 <__restore_core_regs>

08001184 <_Unwind_GetCFA>:
 8001184:	6c40      	ldr	r0, [r0, #68]	@ 0x44
 8001186:	4770      	bx	lr

08001188 <__gnu_Unwind_RaiseException>:
 8001188:	b5f0      	push	{r4, r5, r6, r7, lr}
 800118a:	6bcb      	ldr	r3, [r1, #60]	@ 0x3c
 800118c:	640b      	str	r3, [r1, #64]	@ 0x40
 800118e:	f101 0c04 	add.w	ip, r1, #4
 8001192:	460e      	mov	r6, r1
 8001194:	4605      	mov	r5, r0
 8001196:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 800119a:	b0f9      	sub	sp, #484	@ 0x1e4
 800119c:	ac01      	add	r4, sp, #4
 800119e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80011a0:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 80011a4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80011a6:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 80011aa:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80011ac:	e89c 000f 	ldmia.w	ip, {r0, r1, r2, r3}
 80011b0:	f04f 37ff 	mov.w	r7, #4294967295	@ 0xffffffff
 80011b4:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 80011b8:	9700      	str	r7, [sp, #0]
 80011ba:	e006      	b.n	80011ca <__gnu_Unwind_RaiseException+0x42>
 80011bc:	692b      	ldr	r3, [r5, #16]
 80011be:	466a      	mov	r2, sp
 80011c0:	4629      	mov	r1, r5
 80011c2:	4798      	blx	r3
 80011c4:	2808      	cmp	r0, #8
 80011c6:	4604      	mov	r4, r0
 80011c8:	d108      	bne.n	80011dc <__gnu_Unwind_RaiseException+0x54>
 80011ca:	9910      	ldr	r1, [sp, #64]	@ 0x40
 80011cc:	4628      	mov	r0, r5
 80011ce:	f7ff fed1 	bl	8000f74 <get_eit_entry>
 80011d2:	2800      	cmp	r0, #0
 80011d4:	d0f2      	beq.n	80011bc <__gnu_Unwind_RaiseException+0x34>
 80011d6:	2009      	movs	r0, #9
 80011d8:	b079      	add	sp, #484	@ 0x1e4
 80011da:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80011dc:	4668      	mov	r0, sp
 80011de:	f7ff ff13 	bl	8001008 <restore_non_core_regs>
 80011e2:	2c06      	cmp	r4, #6
 80011e4:	d1f7      	bne.n	80011d6 <__gnu_Unwind_RaiseException+0x4e>
 80011e6:	4631      	mov	r1, r6
 80011e8:	4628      	mov	r0, r5
 80011ea:	f7ff ff43 	bl	8001074 <unwind_phase2>
 80011ee:	bf00      	nop

080011f0 <__gnu_Unwind_ForcedUnwind>:
 80011f0:	60c1      	str	r1, [r0, #12]
 80011f2:	6bd9      	ldr	r1, [r3, #60]	@ 0x3c
 80011f4:	6182      	str	r2, [r0, #24]
 80011f6:	6419      	str	r1, [r3, #64]	@ 0x40
 80011f8:	2200      	movs	r2, #0
 80011fa:	4619      	mov	r1, r3
 80011fc:	e758      	b.n	80010b0 <unwind_phase2_forced>
 80011fe:	bf00      	nop

08001200 <__gnu_Unwind_Resume>:
 8001200:	b570      	push	{r4, r5, r6, lr}
 8001202:	68c6      	ldr	r6, [r0, #12]
 8001204:	6943      	ldr	r3, [r0, #20]
 8001206:	640b      	str	r3, [r1, #64]	@ 0x40
 8001208:	b9ae      	cbnz	r6, 8001236 <__gnu_Unwind_Resume+0x36>
 800120a:	6903      	ldr	r3, [r0, #16]
 800120c:	460a      	mov	r2, r1
 800120e:	4604      	mov	r4, r0
 8001210:	460d      	mov	r5, r1
 8001212:	4601      	mov	r1, r0
 8001214:	2002      	movs	r0, #2
 8001216:	4798      	blx	r3
 8001218:	2807      	cmp	r0, #7
 800121a:	d005      	beq.n	8001228 <__gnu_Unwind_Resume+0x28>
 800121c:	2808      	cmp	r0, #8
 800121e:	d10f      	bne.n	8001240 <__gnu_Unwind_Resume+0x40>
 8001220:	4629      	mov	r1, r5
 8001222:	4620      	mov	r0, r4
 8001224:	f7ff ff26 	bl	8001074 <unwind_phase2>
 8001228:	4630      	mov	r0, r6
 800122a:	6c29      	ldr	r1, [r5, #64]	@ 0x40
 800122c:	f7ff ff20 	bl	8001070 <_Unwind_DebugHook>
 8001230:	1d28      	adds	r0, r5, #4
 8001232:	f000 fb49 	bl	80018c8 <__restore_core_regs>
 8001236:	2201      	movs	r2, #1
 8001238:	f7ff ff3a 	bl	80010b0 <unwind_phase2_forced>
 800123c:	f004 ff0c 	bl	8006058 <abort>
 8001240:	f004 ff0a 	bl	8006058 <abort>

08001244 <__gnu_Unwind_Resume_or_Rethrow>:
 8001244:	68c2      	ldr	r2, [r0, #12]
 8001246:	b11a      	cbz	r2, 8001250 <__gnu_Unwind_Resume_or_Rethrow+0xc>
 8001248:	6bca      	ldr	r2, [r1, #60]	@ 0x3c
 800124a:	640a      	str	r2, [r1, #64]	@ 0x40
 800124c:	2200      	movs	r2, #0
 800124e:	e72f      	b.n	80010b0 <unwind_phase2_forced>
 8001250:	e79a      	b.n	8001188 <__gnu_Unwind_RaiseException>
 8001252:	bf00      	nop

08001254 <_Unwind_Complete>:
 8001254:	4770      	bx	lr
 8001256:	bf00      	nop

08001258 <_Unwind_DeleteException>:
 8001258:	6883      	ldr	r3, [r0, #8]
 800125a:	4601      	mov	r1, r0
 800125c:	b10b      	cbz	r3, 8001262 <_Unwind_DeleteException+0xa>
 800125e:	2001      	movs	r0, #1
 8001260:	4718      	bx	r3
 8001262:	4770      	bx	lr

08001264 <_Unwind_VRS_Get>:
 8001264:	2901      	cmp	r1, #1
 8001266:	d010      	beq.n	800128a <_Unwind_VRS_Get+0x26>
 8001268:	d809      	bhi.n	800127e <_Unwind_VRS_Get+0x1a>
 800126a:	b983      	cbnz	r3, 800128e <_Unwind_VRS_Get+0x2a>
 800126c:	2a0f      	cmp	r2, #15
 800126e:	d80e      	bhi.n	800128e <_Unwind_VRS_Get+0x2a>
 8001270:	eb00 0282 	add.w	r2, r0, r2, lsl #2
 8001274:	4618      	mov	r0, r3
 8001276:	6853      	ldr	r3, [r2, #4]
 8001278:	9a00      	ldr	r2, [sp, #0]
 800127a:	6013      	str	r3, [r2, #0]
 800127c:	4770      	bx	lr
 800127e:	3903      	subs	r1, #3
 8001280:	2901      	cmp	r1, #1
 8001282:	bf8c      	ite	hi
 8001284:	2002      	movhi	r0, #2
 8001286:	2001      	movls	r0, #1
 8001288:	4770      	bx	lr
 800128a:	4608      	mov	r0, r1
 800128c:	4770      	bx	lr
 800128e:	2002      	movs	r0, #2
 8001290:	4770      	bx	lr
 8001292:	bf00      	nop

08001294 <_Unwind_GetGR>:
 8001294:	b500      	push	{lr}
 8001296:	b085      	sub	sp, #20
 8001298:	460a      	mov	r2, r1
 800129a:	2300      	movs	r3, #0
 800129c:	a903      	add	r1, sp, #12
 800129e:	9100      	str	r1, [sp, #0]
 80012a0:	4619      	mov	r1, r3
 80012a2:	f7ff ffdf 	bl	8001264 <_Unwind_VRS_Get>
 80012a6:	9803      	ldr	r0, [sp, #12]
 80012a8:	b005      	add	sp, #20
 80012aa:	f85d fb04 	ldr.w	pc, [sp], #4
 80012ae:	bf00      	nop

080012b0 <_Unwind_VRS_Set>:
 80012b0:	2901      	cmp	r1, #1
 80012b2:	d010      	beq.n	80012d6 <_Unwind_VRS_Set+0x26>
 80012b4:	d809      	bhi.n	80012ca <_Unwind_VRS_Set+0x1a>
 80012b6:	b983      	cbnz	r3, 80012da <_Unwind_VRS_Set+0x2a>
 80012b8:	2a0f      	cmp	r2, #15
 80012ba:	d80e      	bhi.n	80012da <_Unwind_VRS_Set+0x2a>
 80012bc:	9900      	ldr	r1, [sp, #0]
 80012be:	eb00 0282 	add.w	r2, r0, r2, lsl #2
 80012c2:	6809      	ldr	r1, [r1, #0]
 80012c4:	6051      	str	r1, [r2, #4]
 80012c6:	4618      	mov	r0, r3
 80012c8:	4770      	bx	lr
 80012ca:	3903      	subs	r1, #3
 80012cc:	2901      	cmp	r1, #1
 80012ce:	bf8c      	ite	hi
 80012d0:	2002      	movhi	r0, #2
 80012d2:	2001      	movls	r0, #1
 80012d4:	4770      	bx	lr
 80012d6:	4608      	mov	r0, r1
 80012d8:	4770      	bx	lr
 80012da:	2002      	movs	r0, #2
 80012dc:	4770      	bx	lr
 80012de:	bf00      	nop

080012e0 <_Unwind_SetGR>:
 80012e0:	b510      	push	{r4, lr}
 80012e2:	b084      	sub	sp, #16
 80012e4:	2300      	movs	r3, #0
 80012e6:	ac03      	add	r4, sp, #12
 80012e8:	9203      	str	r2, [sp, #12]
 80012ea:	9400      	str	r4, [sp, #0]
 80012ec:	460a      	mov	r2, r1
 80012ee:	4619      	mov	r1, r3
 80012f0:	f7ff ffde 	bl	80012b0 <_Unwind_VRS_Set>
 80012f4:	b004      	add	sp, #16
 80012f6:	bd10      	pop	{r4, pc}

080012f8 <__gnu_Unwind_Backtrace>:
 80012f8:	b570      	push	{r4, r5, r6, lr}
 80012fa:	6bd3      	ldr	r3, [r2, #60]	@ 0x3c
 80012fc:	6413      	str	r3, [r2, #64]	@ 0x40
 80012fe:	f102 0c04 	add.w	ip, r2, #4
 8001302:	4605      	mov	r5, r0
 8001304:	460c      	mov	r4, r1
 8001306:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 800130a:	f5ad 7d0e 	sub.w	sp, sp, #568	@ 0x238
 800130e:	f10d 0e5c 	add.w	lr, sp, #92	@ 0x5c
 8001312:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 8001316:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 800131a:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 800131e:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8001322:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 8001326:	e89c 000f 	ldmia.w	ip, {r0, r1, r2, r3}
 800132a:	f04f 36ff 	mov.w	r6, #4294967295	@ 0xffffffff
 800132e:	e88e 000f 	stmia.w	lr, {r0, r1, r2, r3}
 8001332:	9616      	str	r6, [sp, #88]	@ 0x58
 8001334:	e010      	b.n	8001358 <__gnu_Unwind_Backtrace+0x60>
 8001336:	f7ff ffd3 	bl	80012e0 <_Unwind_SetGR>
 800133a:	4621      	mov	r1, r4
 800133c:	a816      	add	r0, sp, #88	@ 0x58
 800133e:	47a8      	blx	r5
 8001340:	4603      	mov	r3, r0
 8001342:	aa16      	add	r2, sp, #88	@ 0x58
 8001344:	4669      	mov	r1, sp
 8001346:	2008      	movs	r0, #8
 8001348:	b983      	cbnz	r3, 800136c <__gnu_Unwind_Backtrace+0x74>
 800134a:	9b04      	ldr	r3, [sp, #16]
 800134c:	4798      	blx	r3
 800134e:	2805      	cmp	r0, #5
 8001350:	4606      	mov	r6, r0
 8001352:	d00c      	beq.n	800136e <__gnu_Unwind_Backtrace+0x76>
 8001354:	2809      	cmp	r0, #9
 8001356:	d009      	beq.n	800136c <__gnu_Unwind_Backtrace+0x74>
 8001358:	9926      	ldr	r1, [sp, #152]	@ 0x98
 800135a:	4668      	mov	r0, sp
 800135c:	f7ff fe0a 	bl	8000f74 <get_eit_entry>
 8001360:	4603      	mov	r3, r0
 8001362:	466a      	mov	r2, sp
 8001364:	210c      	movs	r1, #12
 8001366:	a816      	add	r0, sp, #88	@ 0x58
 8001368:	2b00      	cmp	r3, #0
 800136a:	d0e4      	beq.n	8001336 <__gnu_Unwind_Backtrace+0x3e>
 800136c:	2609      	movs	r6, #9
 800136e:	a816      	add	r0, sp, #88	@ 0x58
 8001370:	f7ff fe4a 	bl	8001008 <restore_non_core_regs>
 8001374:	4630      	mov	r0, r6
 8001376:	f50d 7d0e 	add.w	sp, sp, #568	@ 0x238
 800137a:	bd70      	pop	{r4, r5, r6, pc}

0800137c <__gnu_unwind_pr_common>:
 800137c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001380:	4693      	mov	fp, r2
 8001382:	6cca      	ldr	r2, [r1, #76]	@ 0x4c
 8001384:	b089      	sub	sp, #36	@ 0x24
 8001386:	460d      	mov	r5, r1
 8001388:	f852 1b04 	ldr.w	r1, [r2], #4
 800138c:	9206      	str	r2, [sp, #24]
 800138e:	f000 0c03 	and.w	ip, r0, #3
 8001392:	2b00      	cmp	r3, #0
 8001394:	d079      	beq.n	800148a <__gnu_unwind_pr_common+0x10e>
 8001396:	0c0c      	lsrs	r4, r1, #16
 8001398:	f88d 401d 	strb.w	r4, [sp, #29]
 800139c:	0409      	lsls	r1, r1, #16
 800139e:	b2e4      	uxtb	r4, r4
 80013a0:	9105      	str	r1, [sp, #20]
 80013a2:	eb02 0284 	add.w	r2, r2, r4, lsl #2
 80013a6:	2102      	movs	r1, #2
 80013a8:	6d2f      	ldr	r7, [r5, #80]	@ 0x50
 80013aa:	f88d 101c 	strb.w	r1, [sp, #28]
 80013ae:	f1bc 0f02 	cmp.w	ip, #2
 80013b2:	bf08      	it	eq
 80013b4:	6baa      	ldreq	r2, [r5, #56]	@ 0x38
 80013b6:	f017 0701 	ands.w	r7, r7, #1
 80013ba:	d00c      	beq.n	80013d6 <__gnu_unwind_pr_common+0x5a>
 80013bc:	a905      	add	r1, sp, #20
 80013be:	4658      	mov	r0, fp
 80013c0:	f000 fb84 	bl	8001acc <__gnu_unwind_execute>
 80013c4:	b918      	cbnz	r0, 80013ce <__gnu_unwind_pr_common+0x52>
 80013c6:	2008      	movs	r0, #8
 80013c8:	b009      	add	sp, #36	@ 0x24
 80013ca:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80013ce:	2009      	movs	r0, #9
 80013d0:	b009      	add	sp, #36	@ 0x24
 80013d2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80013d6:	6816      	ldr	r6, [r2, #0]
 80013d8:	2e00      	cmp	r6, #0
 80013da:	d0ef      	beq.n	80013bc <__gnu_unwind_pr_common+0x40>
 80013dc:	f000 0108 	and.w	r1, r0, #8
 80013e0:	9101      	str	r1, [sp, #4]
 80013e2:	46b2      	mov	sl, r6
 80013e4:	9702      	str	r7, [sp, #8]
 80013e6:	4664      	mov	r4, ip
 80013e8:	4699      	mov	r9, r3
 80013ea:	f1b9 0f02 	cmp.w	r9, #2
 80013ee:	d048      	beq.n	8001482 <__gnu_unwind_pr_common+0x106>
 80013f0:	f8b2 a000 	ldrh.w	sl, [r2]
 80013f4:	8856      	ldrh	r6, [r2, #2]
 80013f6:	f102 0804 	add.w	r8, r2, #4
 80013fa:	6caa      	ldr	r2, [r5, #72]	@ 0x48
 80013fc:	f026 0301 	bic.w	r3, r6, #1
 8001400:	210f      	movs	r1, #15
 8001402:	4658      	mov	r0, fp
 8001404:	189f      	adds	r7, r3, r2
 8001406:	f7ff ff45 	bl	8001294 <_Unwind_GetGR>
 800140a:	4287      	cmp	r7, r0
 800140c:	d837      	bhi.n	800147e <__gnu_unwind_pr_common+0x102>
 800140e:	f02a 0201 	bic.w	r2, sl, #1
 8001412:	443a      	add	r2, r7
 8001414:	4282      	cmp	r2, r0
 8001416:	bf94      	ite	ls
 8001418:	2200      	movls	r2, #0
 800141a:	2201      	movhi	r2, #1
 800141c:	0073      	lsls	r3, r6, #1
 800141e:	f003 0302 	and.w	r3, r3, #2
 8001422:	f00a 0a01 	and.w	sl, sl, #1
 8001426:	ea43 030a 	orr.w	r3, r3, sl
 800142a:	2b01      	cmp	r3, #1
 800142c:	d047      	beq.n	80014be <__gnu_unwind_pr_common+0x142>
 800142e:	2b02      	cmp	r3, #2
 8001430:	d031      	beq.n	8001496 <__gnu_unwind_pr_common+0x11a>
 8001432:	2b00      	cmp	r3, #0
 8001434:	d1cb      	bne.n	80013ce <__gnu_unwind_pr_common+0x52>
 8001436:	b114      	cbz	r4, 800143e <__gnu_unwind_pr_common+0xc2>
 8001438:	2a00      	cmp	r2, #0
 800143a:	f040 80c9 	bne.w	80015d0 <__gnu_unwind_pr_common+0x254>
 800143e:	f108 0204 	add.w	r2, r8, #4
 8001442:	f8d2 a000 	ldr.w	sl, [r2]
 8001446:	f1ba 0f00 	cmp.w	sl, #0
 800144a:	d1ce      	bne.n	80013ea <__gnu_unwind_pr_common+0x6e>
 800144c:	a905      	add	r1, sp, #20
 800144e:	4658      	mov	r0, fp
 8001450:	9f02      	ldr	r7, [sp, #8]
 8001452:	f000 fb3b 	bl	8001acc <__gnu_unwind_execute>
 8001456:	2800      	cmp	r0, #0
 8001458:	d1b9      	bne.n	80013ce <__gnu_unwind_pr_common+0x52>
 800145a:	2f00      	cmp	r7, #0
 800145c:	d0b3      	beq.n	80013c6 <__gnu_unwind_pr_common+0x4a>
 800145e:	210f      	movs	r1, #15
 8001460:	4658      	mov	r0, fp
 8001462:	f7ff ff17 	bl	8001294 <_Unwind_GetGR>
 8001466:	210e      	movs	r1, #14
 8001468:	4602      	mov	r2, r0
 800146a:	4658      	mov	r0, fp
 800146c:	f7ff ff38 	bl	80012e0 <_Unwind_SetGR>
 8001470:	4a67      	ldr	r2, [pc, #412]	@ (8001610 <__gnu_unwind_pr_common+0x294>)
 8001472:	210f      	movs	r1, #15
 8001474:	4658      	mov	r0, fp
 8001476:	f7ff ff33 	bl	80012e0 <_Unwind_SetGR>
 800147a:	2007      	movs	r0, #7
 800147c:	e7a8      	b.n	80013d0 <__gnu_unwind_pr_common+0x54>
 800147e:	2200      	movs	r2, #0
 8001480:	e7cc      	b.n	800141c <__gnu_unwind_pr_common+0xa0>
 8001482:	6856      	ldr	r6, [r2, #4]
 8001484:	f102 0808 	add.w	r8, r2, #8
 8001488:	e7b7      	b.n	80013fa <__gnu_unwind_pr_common+0x7e>
 800148a:	0209      	lsls	r1, r1, #8
 800148c:	9105      	str	r1, [sp, #20]
 800148e:	f88d 301d 	strb.w	r3, [sp, #29]
 8001492:	2103      	movs	r1, #3
 8001494:	e788      	b.n	80013a8 <__gnu_unwind_pr_common+0x2c>
 8001496:	f8d8 6000 	ldr.w	r6, [r8]
 800149a:	f026 4300 	bic.w	r3, r6, #2147483648	@ 0x80000000
 800149e:	2c00      	cmp	r4, #0
 80014a0:	d144      	bne.n	800152c <__gnu_unwind_pr_common+0x1b0>
 80014a2:	b122      	cbz	r2, 80014ae <__gnu_unwind_pr_common+0x132>
 80014a4:	9a01      	ldr	r2, [sp, #4]
 80014a6:	2a00      	cmp	r2, #0
 80014a8:	d05a      	beq.n	8001560 <__gnu_unwind_pr_common+0x1e4>
 80014aa:	2b00      	cmp	r3, #0
 80014ac:	d058      	beq.n	8001560 <__gnu_unwind_pr_common+0x1e4>
 80014ae:	2e00      	cmp	r6, #0
 80014b0:	da01      	bge.n	80014b6 <__gnu_unwind_pr_common+0x13a>
 80014b2:	f108 0804 	add.w	r8, r8, #4
 80014b6:	3301      	adds	r3, #1
 80014b8:	eb08 0283 	add.w	r2, r8, r3, lsl #2
 80014bc:	e7c1      	b.n	8001442 <__gnu_unwind_pr_common+0xc6>
 80014be:	b9ec      	cbnz	r4, 80014fc <__gnu_unwind_pr_common+0x180>
 80014c0:	b1ca      	cbz	r2, 80014f6 <__gnu_unwind_pr_common+0x17a>
 80014c2:	f8d8 3004 	ldr.w	r3, [r8, #4]
 80014c6:	f8d8 2000 	ldr.w	r2, [r8]
 80014ca:	1c99      	adds	r1, r3, #2
 80014cc:	ea4f 72d2 	mov.w	r2, r2, lsr #31
 80014d0:	f43f af7d 	beq.w	80013ce <__gnu_unwind_pr_common+0x52>
 80014d4:	f105 0158 	add.w	r1, r5, #88	@ 0x58
 80014d8:	3301      	adds	r3, #1
 80014da:	9104      	str	r1, [sp, #16]
 80014dc:	f000 808b 	beq.w	80015f6 <__gnu_unwind_pr_common+0x27a>
 80014e0:	f108 0004 	add.w	r0, r8, #4
 80014e4:	f7ff fdbe 	bl	8001064 <_Unwind_decode_typeinfo_ptr.constprop.0>
 80014e8:	ab04      	add	r3, sp, #16
 80014ea:	4601      	mov	r1, r0
 80014ec:	4628      	mov	r0, r5
 80014ee:	f3af 8000 	nop.w
 80014f2:	2800      	cmp	r0, #0
 80014f4:	d157      	bne.n	80015a6 <__gnu_unwind_pr_common+0x22a>
 80014f6:	f108 0208 	add.w	r2, r8, #8
 80014fa:	e7a2      	b.n	8001442 <__gnu_unwind_pr_common+0xc6>
 80014fc:	210d      	movs	r1, #13
 80014fe:	4658      	mov	r0, fp
 8001500:	f7ff fec8 	bl	8001294 <_Unwind_GetGR>
 8001504:	6a2b      	ldr	r3, [r5, #32]
 8001506:	4283      	cmp	r3, r0
 8001508:	d1f5      	bne.n	80014f6 <__gnu_unwind_pr_common+0x17a>
 800150a:	6aab      	ldr	r3, [r5, #40]	@ 0x28
 800150c:	4598      	cmp	r8, r3
 800150e:	d1f2      	bne.n	80014f6 <__gnu_unwind_pr_common+0x17a>
 8001510:	4640      	mov	r0, r8
 8001512:	f7ff fcdf 	bl	8000ed4 <selfrel_offset31>
 8001516:	210f      	movs	r1, #15
 8001518:	4602      	mov	r2, r0
 800151a:	4658      	mov	r0, fp
 800151c:	f7ff fee0 	bl	80012e0 <_Unwind_SetGR>
 8001520:	462a      	mov	r2, r5
 8001522:	2100      	movs	r1, #0
 8001524:	4658      	mov	r0, fp
 8001526:	f7ff fedb 	bl	80012e0 <_Unwind_SetGR>
 800152a:	e7a6      	b.n	800147a <__gnu_unwind_pr_common+0xfe>
 800152c:	210d      	movs	r1, #13
 800152e:	4658      	mov	r0, fp
 8001530:	9303      	str	r3, [sp, #12]
 8001532:	f7ff feaf 	bl	8001294 <_Unwind_GetGR>
 8001536:	6a2a      	ldr	r2, [r5, #32]
 8001538:	9b03      	ldr	r3, [sp, #12]
 800153a:	4282      	cmp	r2, r0
 800153c:	d1b7      	bne.n	80014ae <__gnu_unwind_pr_common+0x132>
 800153e:	6aaa      	ldr	r2, [r5, #40]	@ 0x28
 8001540:	4590      	cmp	r8, r2
 8001542:	d1b4      	bne.n	80014ae <__gnu_unwind_pr_common+0x132>
 8001544:	2700      	movs	r7, #0
 8001546:	2204      	movs	r2, #4
 8001548:	e9c5 720b 	strd	r7, r2, [r5, #44]	@ 0x2c
 800154c:	4442      	add	r2, r8
 800154e:	62ab      	str	r3, [r5, #40]	@ 0x28
 8001550:	636a      	str	r2, [r5, #52]	@ 0x34
 8001552:	f8d8 2000 	ldr.w	r2, [r8]
 8001556:	42ba      	cmp	r2, r7
 8001558:	db55      	blt.n	8001606 <__gnu_unwind_pr_common+0x28a>
 800155a:	2201      	movs	r2, #1
 800155c:	9202      	str	r2, [sp, #8]
 800155e:	e7aa      	b.n	80014b6 <__gnu_unwind_pr_common+0x13a>
 8001560:	9403      	str	r4, [sp, #12]
 8001562:	f108 0a04 	add.w	sl, r8, #4
 8001566:	2600      	movs	r6, #0
 8001568:	f105 0758 	add.w	r7, r5, #88	@ 0x58
 800156c:	461c      	mov	r4, r3
 800156e:	e00d      	b.n	800158c <__gnu_unwind_pr_common+0x210>
 8001570:	4650      	mov	r0, sl
 8001572:	9704      	str	r7, [sp, #16]
 8001574:	f7ff fd76 	bl	8001064 <_Unwind_decode_typeinfo_ptr.constprop.0>
 8001578:	2200      	movs	r2, #0
 800157a:	4601      	mov	r1, r0
 800157c:	ab04      	add	r3, sp, #16
 800157e:	4628      	mov	r0, r5
 8001580:	3601      	adds	r6, #1
 8001582:	f10a 0a04 	add.w	sl, sl, #4
 8001586:	f3af 8000 	nop.w
 800158a:	b9e0      	cbnz	r0, 80015c6 <__gnu_unwind_pr_common+0x24a>
 800158c:	42a6      	cmp	r6, r4
 800158e:	d1ef      	bne.n	8001570 <__gnu_unwind_pr_common+0x1f4>
 8001590:	210d      	movs	r1, #13
 8001592:	4658      	mov	r0, fp
 8001594:	f7ff fe7e 	bl	8001294 <_Unwind_GetGR>
 8001598:	9b04      	ldr	r3, [sp, #16]
 800159a:	f8c5 8028 	str.w	r8, [r5, #40]	@ 0x28
 800159e:	e9c5 0308 	strd	r0, r3, [r5, #32]
 80015a2:	2006      	movs	r0, #6
 80015a4:	e714      	b.n	80013d0 <__gnu_unwind_pr_common+0x54>
 80015a6:	4604      	mov	r4, r0
 80015a8:	210d      	movs	r1, #13
 80015aa:	4658      	mov	r0, fp
 80015ac:	f7ff fe72 	bl	8001294 <_Unwind_GetGR>
 80015b0:	9e04      	ldr	r6, [sp, #16]
 80015b2:	6228      	str	r0, [r5, #32]
 80015b4:	2c02      	cmp	r4, #2
 80015b6:	bf04      	itt	eq
 80015b8:	62ee      	streq	r6, [r5, #44]	@ 0x2c
 80015ba:	f105 062c 	addeq.w	r6, r5, #44	@ 0x2c
 80015be:	e9c5 6809 	strd	r6, r8, [r5, #36]	@ 0x24
 80015c2:	2006      	movs	r0, #6
 80015c4:	e704      	b.n	80013d0 <__gnu_unwind_pr_common+0x54>
 80015c6:	4623      	mov	r3, r4
 80015c8:	f8d8 6000 	ldr.w	r6, [r8]
 80015cc:	9c03      	ldr	r4, [sp, #12]
 80015ce:	e76e      	b.n	80014ae <__gnu_unwind_pr_common+0x132>
 80015d0:	4640      	mov	r0, r8
 80015d2:	f7ff fc7f 	bl	8000ed4 <selfrel_offset31>
 80015d6:	f108 0204 	add.w	r2, r8, #4
 80015da:	4604      	mov	r4, r0
 80015dc:	63aa      	str	r2, [r5, #56]	@ 0x38
 80015de:	4628      	mov	r0, r5
 80015e0:	f3af 8000 	nop.w
 80015e4:	2800      	cmp	r0, #0
 80015e6:	f43f aef2 	beq.w	80013ce <__gnu_unwind_pr_common+0x52>
 80015ea:	4622      	mov	r2, r4
 80015ec:	210f      	movs	r1, #15
 80015ee:	4658      	mov	r0, fp
 80015f0:	f7ff fe76 	bl	80012e0 <_Unwind_SetGR>
 80015f4:	e741      	b.n	800147a <__gnu_unwind_pr_common+0xfe>
 80015f6:	460c      	mov	r4, r1
 80015f8:	4658      	mov	r0, fp
 80015fa:	210d      	movs	r1, #13
 80015fc:	f7ff fe4a 	bl	8001294 <_Unwind_GetGR>
 8001600:	4626      	mov	r6, r4
 8001602:	6228      	str	r0, [r5, #32]
 8001604:	e7db      	b.n	80015be <__gnu_unwind_pr_common+0x242>
 8001606:	1c58      	adds	r0, r3, #1
 8001608:	eb08 0080 	add.w	r0, r8, r0, lsl #2
 800160c:	e781      	b.n	8001512 <__gnu_unwind_pr_common+0x196>
 800160e:	bf00      	nop
 8001610:	00000000 	.word	0x00000000

08001614 <__aeabi_unwind_cpp_pr0>:
 8001614:	2300      	movs	r3, #0
 8001616:	e6b1      	b.n	800137c <__gnu_unwind_pr_common>

08001618 <__aeabi_unwind_cpp_pr1>:
 8001618:	2301      	movs	r3, #1
 800161a:	e6af      	b.n	800137c <__gnu_unwind_pr_common>

0800161c <__aeabi_unwind_cpp_pr2>:
 800161c:	2302      	movs	r3, #2
 800161e:	e6ad      	b.n	800137c <__gnu_unwind_pr_common>

08001620 <_Unwind_VRS_Pop>:
 8001620:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8001624:	4606      	mov	r6, r0
 8001626:	b0c3      	sub	sp, #268	@ 0x10c
 8001628:	4615      	mov	r5, r2
 800162a:	461c      	mov	r4, r3
 800162c:	2904      	cmp	r1, #4
 800162e:	f200 80d1 	bhi.w	80017d4 <_Unwind_VRS_Pop+0x1b4>
 8001632:	e8df f001 	tbb	[pc, r1]
 8001636:	51ac      	.short	0x51ac
 8001638:	2acf      	.short	0x2acf
 800163a:	03          	.byte	0x03
 800163b:	00          	.byte	0x00
 800163c:	2c00      	cmp	r4, #0
 800163e:	f040 80c9 	bne.w	80017d4 <_Unwind_VRS_Pop+0x1b4>
 8001642:	2a10      	cmp	r2, #16
 8001644:	f200 80c6 	bhi.w	80017d4 <_Unwind_VRS_Pop+0x1b4>
 8001648:	6803      	ldr	r3, [r0, #0]
 800164a:	06dc      	lsls	r4, r3, #27
 800164c:	f100 80e7 	bmi.w	800181e <_Unwind_VRS_Pop+0x1fe>
 8001650:	af20      	add	r7, sp, #128	@ 0x80
 8001652:	4638      	mov	r0, r7
 8001654:	f000 f9aa 	bl	80019ac <__gnu_Unwind_Save_WMMXC>
 8001658:	6bb4      	ldr	r4, [r6, #56]	@ 0x38
 800165a:	4639      	mov	r1, r7
 800165c:	2300      	movs	r3, #0
 800165e:	f04f 0c01 	mov.w	ip, #1
 8001662:	fa0c f203 	lsl.w	r2, ip, r3
 8001666:	422a      	tst	r2, r5
 8001668:	4620      	mov	r0, r4
 800166a:	f103 0301 	add.w	r3, r3, #1
 800166e:	d003      	beq.n	8001678 <_Unwind_VRS_Pop+0x58>
 8001670:	f850 2b04 	ldr.w	r2, [r0], #4
 8001674:	600a      	str	r2, [r1, #0]
 8001676:	4604      	mov	r4, r0
 8001678:	2b04      	cmp	r3, #4
 800167a:	f101 0104 	add.w	r1, r1, #4
 800167e:	d1f0      	bne.n	8001662 <_Unwind_VRS_Pop+0x42>
 8001680:	63b4      	str	r4, [r6, #56]	@ 0x38
 8001682:	4638      	mov	r0, r7
 8001684:	f000 f988 	bl	8001998 <__gnu_Unwind_Restore_WMMXC>
 8001688:	e099      	b.n	80017be <_Unwind_VRS_Pop+0x19e>
 800168a:	2c03      	cmp	r4, #3
 800168c:	f040 80a2 	bne.w	80017d4 <_Unwind_VRS_Pop+0x1b4>
 8001690:	b294      	uxth	r4, r2
 8001692:	eb04 4312 	add.w	r3, r4, r2, lsr #16
 8001696:	2b10      	cmp	r3, #16
 8001698:	ea4f 4512 	mov.w	r5, r2, lsr #16
 800169c:	f200 809a 	bhi.w	80017d4 <_Unwind_VRS_Pop+0x1b4>
 80016a0:	6803      	ldr	r3, [r0, #0]
 80016a2:	071f      	lsls	r7, r3, #28
 80016a4:	f100 80c3 	bmi.w	800182e <_Unwind_VRS_Pop+0x20e>
 80016a8:	af20      	add	r7, sp, #128	@ 0x80
 80016aa:	4638      	mov	r0, r7
 80016ac:	f000 f952 	bl	8001954 <__gnu_Unwind_Save_WMMXD>
 80016b0:	6bb2      	ldr	r2, [r6, #56]	@ 0x38
 80016b2:	eb07 01c5 	add.w	r1, r7, r5, lsl #3
 80016b6:	b154      	cbz	r4, 80016ce <_Unwind_VRS_Pop+0xae>
 80016b8:	460b      	mov	r3, r1
 80016ba:	1ad0      	subs	r0, r2, r3
 80016bc:	eb01 01c4 	add.w	r1, r1, r4, lsl #3
 80016c0:	00e4      	lsls	r4, r4, #3
 80016c2:	581d      	ldr	r5, [r3, r0]
 80016c4:	f843 5b04 	str.w	r5, [r3], #4
 80016c8:	428b      	cmp	r3, r1
 80016ca:	d1fa      	bne.n	80016c2 <_Unwind_VRS_Pop+0xa2>
 80016cc:	4422      	add	r2, r4
 80016ce:	63b2      	str	r2, [r6, #56]	@ 0x38
 80016d0:	4638      	mov	r0, r7
 80016d2:	f000 f91d 	bl	8001910 <__gnu_Unwind_Restore_WMMXD>
 80016d6:	e072      	b.n	80017be <_Unwind_VRS_Pop+0x19e>
 80016d8:	2c01      	cmp	r4, #1
 80016da:	ea4f 4812 	mov.w	r8, r2, lsr #16
 80016de:	b295      	uxth	r5, r2
 80016e0:	d071      	beq.n	80017c6 <_Unwind_VRS_Pop+0x1a6>
 80016e2:	2c05      	cmp	r4, #5
 80016e4:	d176      	bne.n	80017d4 <_Unwind_VRS_Pop+0x1b4>
 80016e6:	eb08 0905 	add.w	r9, r8, r5
 80016ea:	f1b9 0f20 	cmp.w	r9, #32
 80016ee:	d871      	bhi.n	80017d4 <_Unwind_VRS_Pop+0x1b4>
 80016f0:	f1b8 0f0f 	cmp.w	r8, #15
 80016f4:	d872      	bhi.n	80017dc <_Unwind_VRS_Pop+0x1bc>
 80016f6:	f1b9 0f10 	cmp.w	r9, #16
 80016fa:	6803      	ldr	r3, [r0, #0]
 80016fc:	f200 809f 	bhi.w	800183e <_Unwind_VRS_Pop+0x21e>
 8001700:	07d9      	lsls	r1, r3, #31
 8001702:	d508      	bpl.n	8001716 <_Unwind_VRS_Pop+0xf6>
 8001704:	f023 0301 	bic.w	r3, r3, #1
 8001708:	4630      	mov	r0, r6
 800170a:	f043 0302 	orr.w	r3, r3, #2
 800170e:	f840 3b48 	str.w	r3, [r0], #72
 8001712:	f000 f8f1 	bl	80018f8 <__gnu_Unwind_Save_VFP_D>
 8001716:	af20      	add	r7, sp, #128	@ 0x80
 8001718:	4638      	mov	r0, r7
 800171a:	f000 f8ed 	bl	80018f8 <__gnu_Unwind_Save_VFP_D>
 800171e:	6bb3      	ldr	r3, [r6, #56]	@ 0x38
 8001720:	2d00      	cmp	r5, #0
 8001722:	f000 80b9 	beq.w	8001898 <_Unwind_VRS_Pop+0x278>
 8001726:	006d      	lsls	r5, r5, #1
 8001728:	1e6a      	subs	r2, r5, #1
 800172a:	eb07 01c8 	add.w	r1, r7, r8, lsl #3
 800172e:	2500      	movs	r5, #0
 8001730:	3201      	adds	r2, #1
 8001732:	3904      	subs	r1, #4
 8001734:	eb03 0282 	add.w	r2, r3, r2, lsl #2
 8001738:	f853 0b04 	ldr.w	r0, [r3], #4
 800173c:	f841 0f04 	str.w	r0, [r1, #4]!
 8001740:	4293      	cmp	r3, r2
 8001742:	d1f9      	bne.n	8001738 <_Unwind_VRS_Pop+0x118>
 8001744:	2d00      	cmp	r5, #0
 8001746:	f000 80a1 	beq.w	800188c <_Unwind_VRS_Pop+0x26c>
 800174a:	4641      	mov	r1, r8
 800174c:	2910      	cmp	r1, #16
 800174e:	bf38      	it	cc
 8001750:	2110      	movcc	r1, #16
 8001752:	006b      	lsls	r3, r5, #1
 8001754:	3910      	subs	r1, #16
 8001756:	466f      	mov	r7, sp
 8001758:	3b01      	subs	r3, #1
 800175a:	eb07 01c1 	add.w	r1, r7, r1, lsl #3
 800175e:	3301      	adds	r3, #1
 8001760:	3904      	subs	r1, #4
 8001762:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8001766:	f852 0b04 	ldr.w	r0, [r2], #4
 800176a:	f841 0f04 	str.w	r0, [r1, #4]!
 800176e:	429a      	cmp	r2, r3
 8001770:	d1f9      	bne.n	8001766 <_Unwind_VRS_Pop+0x146>
 8001772:	2c01      	cmp	r4, #1
 8001774:	f000 8088 	beq.w	8001888 <_Unwind_VRS_Pop+0x268>
 8001778:	f1b8 0f0f 	cmp.w	r8, #15
 800177c:	63b2      	str	r2, [r6, #56]	@ 0x38
 800177e:	d802      	bhi.n	8001786 <_Unwind_VRS_Pop+0x166>
 8001780:	a820      	add	r0, sp, #128	@ 0x80
 8001782:	f000 f8b5 	bl	80018f0 <__gnu_Unwind_Restore_VFP_D>
 8001786:	4638      	mov	r0, r7
 8001788:	f000 f8ba 	bl	8001900 <__gnu_Unwind_Restore_VFP_D_16_to_31>
 800178c:	e017      	b.n	80017be <_Unwind_VRS_Pop+0x19e>
 800178e:	bb0c      	cbnz	r4, 80017d4 <_Unwind_VRS_Pop+0x1b4>
 8001790:	6b80      	ldr	r0, [r0, #56]	@ 0x38
 8001792:	4623      	mov	r3, r4
 8001794:	fa1f fc82 	uxth.w	ip, r2
 8001798:	2401      	movs	r4, #1
 800179a:	1d37      	adds	r7, r6, #4
 800179c:	fa04 f103 	lsl.w	r1, r4, r3
 80017a0:	ea11 0f0c 	tst.w	r1, ip
 80017a4:	4602      	mov	r2, r0
 80017a6:	d004      	beq.n	80017b2 <_Unwind_VRS_Pop+0x192>
 80017a8:	f852 1b04 	ldr.w	r1, [r2], #4
 80017ac:	f847 1023 	str.w	r1, [r7, r3, lsl #2]
 80017b0:	4610      	mov	r0, r2
 80017b2:	3301      	adds	r3, #1
 80017b4:	2b10      	cmp	r3, #16
 80017b6:	d1f1      	bne.n	800179c <_Unwind_VRS_Pop+0x17c>
 80017b8:	04ac      	lsls	r4, r5, #18
 80017ba:	d400      	bmi.n	80017be <_Unwind_VRS_Pop+0x19e>
 80017bc:	63b0      	str	r0, [r6, #56]	@ 0x38
 80017be:	2000      	movs	r0, #0
 80017c0:	b043      	add	sp, #268	@ 0x10c
 80017c2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80017c6:	eb08 0305 	add.w	r3, r8, r5
 80017ca:	2b10      	cmp	r3, #16
 80017cc:	d802      	bhi.n	80017d4 <_Unwind_VRS_Pop+0x1b4>
 80017ce:	f1b8 0f10 	cmp.w	r8, #16
 80017d2:	d114      	bne.n	80017fe <_Unwind_VRS_Pop+0x1de>
 80017d4:	2002      	movs	r0, #2
 80017d6:	b043      	add	sp, #268	@ 0x10c
 80017d8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80017dc:	2d00      	cmp	r5, #0
 80017de:	d0ee      	beq.n	80017be <_Unwind_VRS_Pop+0x19e>
 80017e0:	6803      	ldr	r3, [r0, #0]
 80017e2:	075a      	lsls	r2, r3, #29
 80017e4:	d45c      	bmi.n	80018a0 <_Unwind_VRS_Pop+0x280>
 80017e6:	466f      	mov	r7, sp
 80017e8:	4638      	mov	r0, r7
 80017ea:	f000 f88d 	bl	8001908 <__gnu_Unwind_Save_VFP_D_16_to_31>
 80017ee:	6bb2      	ldr	r2, [r6, #56]	@ 0x38
 80017f0:	006b      	lsls	r3, r5, #1
 80017f2:	f1a8 0110 	sub.w	r1, r8, #16
 80017f6:	3b01      	subs	r3, #1
 80017f8:	eb07 01c1 	add.w	r1, r7, r1, lsl #3
 80017fc:	e7af      	b.n	800175e <_Unwind_VRS_Pop+0x13e>
 80017fe:	6803      	ldr	r3, [r0, #0]
 8001800:	07da      	lsls	r2, r3, #31
 8001802:	d459      	bmi.n	80018b8 <_Unwind_VRS_Pop+0x298>
 8001804:	af20      	add	r7, sp, #128	@ 0x80
 8001806:	4638      	mov	r0, r7
 8001808:	f000 f86e 	bl	80018e8 <__gnu_Unwind_Save_VFP>
 800180c:	6bb3      	ldr	r3, [r6, #56]	@ 0x38
 800180e:	2d00      	cmp	r5, #0
 8001810:	d189      	bne.n	8001726 <_Unwind_VRS_Pop+0x106>
 8001812:	3304      	adds	r3, #4
 8001814:	63b3      	str	r3, [r6, #56]	@ 0x38
 8001816:	4638      	mov	r0, r7
 8001818:	f000 f862 	bl	80018e0 <__gnu_Unwind_Restore_VFP>
 800181c:	e7cf      	b.n	80017be <_Unwind_VRS_Pop+0x19e>
 800181e:	f023 0310 	bic.w	r3, r3, #16
 8001822:	6003      	str	r3, [r0, #0]
 8001824:	f500 70e8 	add.w	r0, r0, #464	@ 0x1d0
 8001828:	f000 f8c0 	bl	80019ac <__gnu_Unwind_Save_WMMXC>
 800182c:	e710      	b.n	8001650 <_Unwind_VRS_Pop+0x30>
 800182e:	f023 0308 	bic.w	r3, r3, #8
 8001832:	6003      	str	r3, [r0, #0]
 8001834:	f500 70a8 	add.w	r0, r0, #336	@ 0x150
 8001838:	f000 f88c 	bl	8001954 <__gnu_Unwind_Save_WMMXD>
 800183c:	e734      	b.n	80016a8 <_Unwind_VRS_Pop+0x88>
 800183e:	07d9      	lsls	r1, r3, #31
 8001840:	d508      	bpl.n	8001854 <_Unwind_VRS_Pop+0x234>
 8001842:	f023 0301 	bic.w	r3, r3, #1
 8001846:	f043 0302 	orr.w	r3, r3, #2
 800184a:	f840 3b48 	str.w	r3, [r0], #72
 800184e:	f000 f853 	bl	80018f8 <__gnu_Unwind_Save_VFP_D>
 8001852:	6833      	ldr	r3, [r6, #0]
 8001854:	0758      	lsls	r0, r3, #29
 8001856:	d506      	bpl.n	8001866 <_Unwind_VRS_Pop+0x246>
 8001858:	4630      	mov	r0, r6
 800185a:	f023 0304 	bic.w	r3, r3, #4
 800185e:	f840 3bd0 	str.w	r3, [r0], #208
 8001862:	f000 f851 	bl	8001908 <__gnu_Unwind_Save_VFP_D_16_to_31>
 8001866:	af20      	add	r7, sp, #128	@ 0x80
 8001868:	4638      	mov	r0, r7
 800186a:	f000 f845 	bl	80018f8 <__gnu_Unwind_Save_VFP_D>
 800186e:	4668      	mov	r0, sp
 8001870:	f000 f84a 	bl	8001908 <__gnu_Unwind_Save_VFP_D_16_to_31>
 8001874:	f1c8 0210 	rsb	r2, r8, #16
 8001878:	0052      	lsls	r2, r2, #1
 800187a:	6bb3      	ldr	r3, [r6, #56]	@ 0x38
 800187c:	f1a9 0510 	sub.w	r5, r9, #16
 8001880:	3a01      	subs	r2, #1
 8001882:	eb07 01c8 	add.w	r1, r7, r8, lsl #3
 8001886:	e753      	b.n	8001730 <_Unwind_VRS_Pop+0x110>
 8001888:	af20      	add	r7, sp, #128	@ 0x80
 800188a:	e7c2      	b.n	8001812 <_Unwind_VRS_Pop+0x1f2>
 800188c:	2c01      	cmp	r4, #1
 800188e:	d0c0      	beq.n	8001812 <_Unwind_VRS_Pop+0x1f2>
 8001890:	f1b8 0f0f 	cmp.w	r8, #15
 8001894:	63b3      	str	r3, [r6, #56]	@ 0x38
 8001896:	d892      	bhi.n	80017be <_Unwind_VRS_Pop+0x19e>
 8001898:	4638      	mov	r0, r7
 800189a:	f000 f829 	bl	80018f0 <__gnu_Unwind_Restore_VFP_D>
 800189e:	e78e      	b.n	80017be <_Unwind_VRS_Pop+0x19e>
 80018a0:	f023 0304 	bic.w	r3, r3, #4
 80018a4:	f840 3bd0 	str.w	r3, [r0], #208
 80018a8:	466f      	mov	r7, sp
 80018aa:	f000 f82d 	bl	8001908 <__gnu_Unwind_Save_VFP_D_16_to_31>
 80018ae:	4638      	mov	r0, r7
 80018b0:	f000 f82a 	bl	8001908 <__gnu_Unwind_Save_VFP_D_16_to_31>
 80018b4:	6bb2      	ldr	r2, [r6, #56]	@ 0x38
 80018b6:	e79b      	b.n	80017f0 <_Unwind_VRS_Pop+0x1d0>
 80018b8:	4630      	mov	r0, r6
 80018ba:	f023 0303 	bic.w	r3, r3, #3
 80018be:	f840 3b48 	str.w	r3, [r0], #72
 80018c2:	f000 f811 	bl	80018e8 <__gnu_Unwind_Save_VFP>
 80018c6:	e79d      	b.n	8001804 <_Unwind_VRS_Pop+0x1e4>

080018c8 <__restore_core_regs>:
 80018c8:	f100 0134 	add.w	r1, r0, #52	@ 0x34
 80018cc:	e891 0038 	ldmia.w	r1, {r3, r4, r5}
 80018d0:	469c      	mov	ip, r3
 80018d2:	46a6      	mov	lr, r4
 80018d4:	f84c 5d04 	str.w	r5, [ip, #-4]!
 80018d8:	e890 0fff 	ldmia.w	r0, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp}
 80018dc:	46e5      	mov	sp, ip
 80018de:	bd00      	pop	{pc}

080018e0 <__gnu_Unwind_Restore_VFP>:
 80018e0:	ec90 0b21 	fldmiax	r0, {d0-d15}	@ Deprecated
 80018e4:	4770      	bx	lr
 80018e6:	bf00      	nop

080018e8 <__gnu_Unwind_Save_VFP>:
 80018e8:	ec80 0b21 	fstmiax	r0, {d0-d15}	@ Deprecated
 80018ec:	4770      	bx	lr
 80018ee:	bf00      	nop

080018f0 <__gnu_Unwind_Restore_VFP_D>:
 80018f0:	ec90 0b20 	vldmia	r0, {d0-d15}
 80018f4:	4770      	bx	lr
 80018f6:	bf00      	nop

080018f8 <__gnu_Unwind_Save_VFP_D>:
 80018f8:	ec80 0b20 	vstmia	r0, {d0-d15}
 80018fc:	4770      	bx	lr
 80018fe:	bf00      	nop

08001900 <__gnu_Unwind_Restore_VFP_D_16_to_31>:
 8001900:	ecd0 0b20 	vldmia	r0, {d16-d31}
 8001904:	4770      	bx	lr
 8001906:	bf00      	nop

08001908 <__gnu_Unwind_Save_VFP_D_16_to_31>:
 8001908:	ecc0 0b20 	vstmia	r0, {d16-d31}
 800190c:	4770      	bx	lr
 800190e:	bf00      	nop

08001910 <__gnu_Unwind_Restore_WMMXD>:
 8001910:	ecf0 0102 	ldfe	f0, [r0], #8
 8001914:	ecf0 1102 	ldfe	f1, [r0], #8
 8001918:	ecf0 2102 	ldfe	f2, [r0], #8
 800191c:	ecf0 3102 	ldfe	f3, [r0], #8
 8001920:	ecf0 4102 	ldfe	f4, [r0], #8
 8001924:	ecf0 5102 	ldfe	f5, [r0], #8
 8001928:	ecf0 6102 	ldfe	f6, [r0], #8
 800192c:	ecf0 7102 	ldfe	f7, [r0], #8
 8001930:	ecf0 8102 	ldfp	f0, [r0], #8
 8001934:	ecf0 9102 	ldfp	f1, [r0], #8
 8001938:	ecf0 a102 	ldfp	f2, [r0], #8
 800193c:	ecf0 b102 	ldfp	f3, [r0], #8
 8001940:	ecf0 c102 	ldfp	f4, [r0], #8
 8001944:	ecf0 d102 	ldfp	f5, [r0], #8
 8001948:	ecf0 e102 	ldfp	f6, [r0], #8
 800194c:	ecf0 f102 	ldfp	f7, [r0], #8
 8001950:	4770      	bx	lr
 8001952:	bf00      	nop

08001954 <__gnu_Unwind_Save_WMMXD>:
 8001954:	ece0 0102 	stfe	f0, [r0], #8
 8001958:	ece0 1102 	stfe	f1, [r0], #8
 800195c:	ece0 2102 	stfe	f2, [r0], #8
 8001960:	ece0 3102 	stfe	f3, [r0], #8
 8001964:	ece0 4102 	stfe	f4, [r0], #8
 8001968:	ece0 5102 	stfe	f5, [r0], #8
 800196c:	ece0 6102 	stfe	f6, [r0], #8
 8001970:	ece0 7102 	stfe	f7, [r0], #8
 8001974:	ece0 8102 	stfp	f0, [r0], #8
 8001978:	ece0 9102 	stfp	f1, [r0], #8
 800197c:	ece0 a102 	stfp	f2, [r0], #8
 8001980:	ece0 b102 	stfp	f3, [r0], #8
 8001984:	ece0 c102 	stfp	f4, [r0], #8
 8001988:	ece0 d102 	stfp	f5, [r0], #8
 800198c:	ece0 e102 	stfp	f6, [r0], #8
 8001990:	ece0 f102 	stfp	f7, [r0], #8
 8001994:	4770      	bx	lr
 8001996:	bf00      	nop

08001998 <__gnu_Unwind_Restore_WMMXC>:
 8001998:	fcb0 8101 	ldc2	1, cr8, [r0], #4
 800199c:	fcb0 9101 	ldc2	1, cr9, [r0], #4
 80019a0:	fcb0 a101 	ldc2	1, cr10, [r0], #4
 80019a4:	fcb0 b101 	ldc2	1, cr11, [r0], #4
 80019a8:	4770      	bx	lr
 80019aa:	bf00      	nop

080019ac <__gnu_Unwind_Save_WMMXC>:
 80019ac:	fca0 8101 	stc2	1, cr8, [r0], #4
 80019b0:	fca0 9101 	stc2	1, cr9, [r0], #4
 80019b4:	fca0 a101 	stc2	1, cr10, [r0], #4
 80019b8:	fca0 b101 	stc2	1, cr11, [r0], #4
 80019bc:	4770      	bx	lr
 80019be:	bf00      	nop

080019c0 <_Unwind_RaiseException>:
 80019c0:	46ec      	mov	ip, sp
 80019c2:	b500      	push	{lr}
 80019c4:	e92d 5000 	stmdb	sp!, {ip, lr}
 80019c8:	e92d 1fff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip}
 80019cc:	f04f 0300 	mov.w	r3, #0
 80019d0:	e92d 000c 	stmdb	sp!, {r2, r3}
 80019d4:	a901      	add	r1, sp, #4
 80019d6:	f7ff fbd7 	bl	8001188 <__gnu_Unwind_RaiseException>
 80019da:	f8dd e040 	ldr.w	lr, [sp, #64]	@ 0x40
 80019de:	b012      	add	sp, #72	@ 0x48
 80019e0:	4770      	bx	lr
 80019e2:	bf00      	nop

080019e4 <_Unwind_Resume>:
 80019e4:	46ec      	mov	ip, sp
 80019e6:	b500      	push	{lr}
 80019e8:	e92d 5000 	stmdb	sp!, {ip, lr}
 80019ec:	e92d 1fff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip}
 80019f0:	f04f 0300 	mov.w	r3, #0
 80019f4:	e92d 000c 	stmdb	sp!, {r2, r3}
 80019f8:	a901      	add	r1, sp, #4
 80019fa:	f7ff fc01 	bl	8001200 <__gnu_Unwind_Resume>
 80019fe:	f8dd e040 	ldr.w	lr, [sp, #64]	@ 0x40
 8001a02:	b012      	add	sp, #72	@ 0x48
 8001a04:	4770      	bx	lr
 8001a06:	bf00      	nop

08001a08 <_Unwind_Resume_or_Rethrow>:
 8001a08:	46ec      	mov	ip, sp
 8001a0a:	b500      	push	{lr}
 8001a0c:	e92d 5000 	stmdb	sp!, {ip, lr}
 8001a10:	e92d 1fff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip}
 8001a14:	f04f 0300 	mov.w	r3, #0
 8001a18:	e92d 000c 	stmdb	sp!, {r2, r3}
 8001a1c:	a901      	add	r1, sp, #4
 8001a1e:	f7ff fc11 	bl	8001244 <__gnu_Unwind_Resume_or_Rethrow>
 8001a22:	f8dd e040 	ldr.w	lr, [sp, #64]	@ 0x40
 8001a26:	b012      	add	sp, #72	@ 0x48
 8001a28:	4770      	bx	lr
 8001a2a:	bf00      	nop

08001a2c <_Unwind_ForcedUnwind>:
 8001a2c:	46ec      	mov	ip, sp
 8001a2e:	b500      	push	{lr}
 8001a30:	e92d 5000 	stmdb	sp!, {ip, lr}
 8001a34:	e92d 1fff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip}
 8001a38:	f04f 0300 	mov.w	r3, #0
 8001a3c:	e92d 000c 	stmdb	sp!, {r2, r3}
 8001a40:	ab01      	add	r3, sp, #4
 8001a42:	f7ff fbd5 	bl	80011f0 <__gnu_Unwind_ForcedUnwind>
 8001a46:	f8dd e040 	ldr.w	lr, [sp, #64]	@ 0x40
 8001a4a:	b012      	add	sp, #72	@ 0x48
 8001a4c:	4770      	bx	lr
 8001a4e:	bf00      	nop

08001a50 <_Unwind_Backtrace>:
 8001a50:	46ec      	mov	ip, sp
 8001a52:	b500      	push	{lr}
 8001a54:	e92d 5000 	stmdb	sp!, {ip, lr}
 8001a58:	e92d 1fff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip}
 8001a5c:	f04f 0300 	mov.w	r3, #0
 8001a60:	e92d 000c 	stmdb	sp!, {r2, r3}
 8001a64:	aa01      	add	r2, sp, #4
 8001a66:	f7ff fc47 	bl	80012f8 <__gnu_Unwind_Backtrace>
 8001a6a:	f8dd e040 	ldr.w	lr, [sp, #64]	@ 0x40
 8001a6e:	b012      	add	sp, #72	@ 0x48
 8001a70:	4770      	bx	lr
 8001a72:	bf00      	nop

08001a74 <next_unwind_byte>:
 8001a74:	7a02      	ldrb	r2, [r0, #8]
 8001a76:	4603      	mov	r3, r0
 8001a78:	b97a      	cbnz	r2, 8001a9a <next_unwind_byte+0x26>
 8001a7a:	7a42      	ldrb	r2, [r0, #9]
 8001a7c:	b1a2      	cbz	r2, 8001aa8 <next_unwind_byte+0x34>
 8001a7e:	6841      	ldr	r1, [r0, #4]
 8001a80:	3a01      	subs	r2, #1
 8001a82:	b410      	push	{r4}
 8001a84:	7242      	strb	r2, [r0, #9]
 8001a86:	6808      	ldr	r0, [r1, #0]
 8001a88:	2203      	movs	r2, #3
 8001a8a:	1d0c      	adds	r4, r1, #4
 8001a8c:	721a      	strb	r2, [r3, #8]
 8001a8e:	0202      	lsls	r2, r0, #8
 8001a90:	605c      	str	r4, [r3, #4]
 8001a92:	0e00      	lsrs	r0, r0, #24
 8001a94:	bc10      	pop	{r4}
 8001a96:	601a      	str	r2, [r3, #0]
 8001a98:	4770      	bx	lr
 8001a9a:	6800      	ldr	r0, [r0, #0]
 8001a9c:	3a01      	subs	r2, #1
 8001a9e:	721a      	strb	r2, [r3, #8]
 8001aa0:	0202      	lsls	r2, r0, #8
 8001aa2:	601a      	str	r2, [r3, #0]
 8001aa4:	0e00      	lsrs	r0, r0, #24
 8001aa6:	4770      	bx	lr
 8001aa8:	20b0      	movs	r0, #176	@ 0xb0
 8001aaa:	4770      	bx	lr

08001aac <_Unwind_GetGR.constprop.0>:
 8001aac:	b500      	push	{lr}
 8001aae:	b085      	sub	sp, #20
 8001ab0:	2300      	movs	r3, #0
 8001ab2:	aa03      	add	r2, sp, #12
 8001ab4:	9200      	str	r2, [sp, #0]
 8001ab6:	4619      	mov	r1, r3
 8001ab8:	220c      	movs	r2, #12
 8001aba:	f7ff fbd3 	bl	8001264 <_Unwind_VRS_Get>
 8001abe:	9803      	ldr	r0, [sp, #12]
 8001ac0:	b005      	add	sp, #20
 8001ac2:	f85d fb04 	ldr.w	pc, [sp], #4
 8001ac6:	bf00      	nop

08001ac8 <unwind_UCB_from_context>:
 8001ac8:	e7f0      	b.n	8001aac <_Unwind_GetGR.constprop.0>
 8001aca:	bf00      	nop

08001acc <__gnu_unwind_execute>:
 8001acc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8001ad0:	4606      	mov	r6, r0
 8001ad2:	b085      	sub	sp, #20
 8001ad4:	460d      	mov	r5, r1
 8001ad6:	f04f 0800 	mov.w	r8, #0
 8001ada:	4628      	mov	r0, r5
 8001adc:	f7ff ffca 	bl	8001a74 <next_unwind_byte>
 8001ae0:	28b0      	cmp	r0, #176	@ 0xb0
 8001ae2:	4604      	mov	r4, r0
 8001ae4:	f000 80da 	beq.w	8001c9c <__gnu_unwind_execute+0x1d0>
 8001ae8:	0607      	lsls	r7, r0, #24
 8001aea:	d546      	bpl.n	8001b7a <__gnu_unwind_execute+0xae>
 8001aec:	f000 03f0 	and.w	r3, r0, #240	@ 0xf0
 8001af0:	2b80      	cmp	r3, #128	@ 0x80
 8001af2:	d05e      	beq.n	8001bb2 <__gnu_unwind_execute+0xe6>
 8001af4:	2bb0      	cmp	r3, #176	@ 0xb0
 8001af6:	d073      	beq.n	8001be0 <__gnu_unwind_execute+0x114>
 8001af8:	d81b      	bhi.n	8001b32 <__gnu_unwind_execute+0x66>
 8001afa:	2b90      	cmp	r3, #144	@ 0x90
 8001afc:	f000 809b 	beq.w	8001c36 <__gnu_unwind_execute+0x16a>
 8001b00:	2ba0      	cmp	r3, #160	@ 0xa0
 8001b02:	d112      	bne.n	8001b2a <__gnu_unwind_execute+0x5e>
 8001b04:	43c3      	mvns	r3, r0
 8001b06:	f003 0307 	and.w	r3, r3, #7
 8001b0a:	f44f 627f 	mov.w	r2, #4080	@ 0xff0
 8001b0e:	411a      	asrs	r2, r3
 8001b10:	0701      	lsls	r1, r0, #28
 8001b12:	f402 627f 	and.w	r2, r2, #4080	@ 0xff0
 8001b16:	d501      	bpl.n	8001b1c <__gnu_unwind_execute+0x50>
 8001b18:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8001b1c:	2300      	movs	r3, #0
 8001b1e:	4619      	mov	r1, r3
 8001b20:	4630      	mov	r0, r6
 8001b22:	f7ff fd7d 	bl	8001620 <_Unwind_VRS_Pop>
 8001b26:	2800      	cmp	r0, #0
 8001b28:	d0d7      	beq.n	8001ada <__gnu_unwind_execute+0xe>
 8001b2a:	2009      	movs	r0, #9
 8001b2c:	b005      	add	sp, #20
 8001b2e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8001b32:	2bc0      	cmp	r3, #192	@ 0xc0
 8001b34:	d16d      	bne.n	8001c12 <__gnu_unwind_execute+0x146>
 8001b36:	28c6      	cmp	r0, #198	@ 0xc6
 8001b38:	f000 8093 	beq.w	8001c62 <__gnu_unwind_execute+0x196>
 8001b3c:	28c7      	cmp	r0, #199	@ 0xc7
 8001b3e:	f000 80b2 	beq.w	8001ca6 <__gnu_unwind_execute+0x1da>
 8001b42:	f000 03f8 	and.w	r3, r0, #248	@ 0xf8
 8001b46:	2bc0      	cmp	r3, #192	@ 0xc0
 8001b48:	f000 80d2 	beq.w	8001cf0 <__gnu_unwind_execute+0x224>
 8001b4c:	28c8      	cmp	r0, #200	@ 0xc8
 8001b4e:	f000 80dd 	beq.w	8001d0c <__gnu_unwind_execute+0x240>
 8001b52:	28c9      	cmp	r0, #201	@ 0xc9
 8001b54:	d1e9      	bne.n	8001b2a <__gnu_unwind_execute+0x5e>
 8001b56:	4628      	mov	r0, r5
 8001b58:	f7ff ff8c 	bl	8001a74 <next_unwind_byte>
 8001b5c:	0302      	lsls	r2, r0, #12
 8001b5e:	f000 000f 	and.w	r0, r0, #15
 8001b62:	f402 2270 	and.w	r2, r2, #983040	@ 0xf0000
 8001b66:	3001      	adds	r0, #1
 8001b68:	4302      	orrs	r2, r0
 8001b6a:	2101      	movs	r1, #1
 8001b6c:	2305      	movs	r3, #5
 8001b6e:	4630      	mov	r0, r6
 8001b70:	f7ff fd56 	bl	8001620 <_Unwind_VRS_Pop>
 8001b74:	2800      	cmp	r0, #0
 8001b76:	d0b0      	beq.n	8001ada <__gnu_unwind_execute+0xe>
 8001b78:	e7d7      	b.n	8001b2a <__gnu_unwind_execute+0x5e>
 8001b7a:	0083      	lsls	r3, r0, #2
 8001b7c:	b2db      	uxtb	r3, r3
 8001b7e:	1d1f      	adds	r7, r3, #4
 8001b80:	f10d 090c 	add.w	r9, sp, #12
 8001b84:	2300      	movs	r3, #0
 8001b86:	4619      	mov	r1, r3
 8001b88:	f8cd 9000 	str.w	r9, [sp]
 8001b8c:	220d      	movs	r2, #13
 8001b8e:	4630      	mov	r0, r6
 8001b90:	f7ff fb68 	bl	8001264 <_Unwind_VRS_Get>
 8001b94:	9b03      	ldr	r3, [sp, #12]
 8001b96:	f8cd 9000 	str.w	r9, [sp]
 8001b9a:	0660      	lsls	r0, r4, #25
 8001b9c:	bf4c      	ite	mi
 8001b9e:	1bdf      	submi	r7, r3, r7
 8001ba0:	18ff      	addpl	r7, r7, r3
 8001ba2:	2300      	movs	r3, #0
 8001ba4:	220d      	movs	r2, #13
 8001ba6:	4619      	mov	r1, r3
 8001ba8:	4630      	mov	r0, r6
 8001baa:	9703      	str	r7, [sp, #12]
 8001bac:	f7ff fb80 	bl	80012b0 <_Unwind_VRS_Set>
 8001bb0:	e793      	b.n	8001ada <__gnu_unwind_execute+0xe>
 8001bb2:	4628      	mov	r0, r5
 8001bb4:	f7ff ff5e 	bl	8001a74 <next_unwind_byte>
 8001bb8:	0224      	lsls	r4, r4, #8
 8001bba:	4320      	orrs	r0, r4
 8001bbc:	f5b0 4f00 	cmp.w	r0, #32768	@ 0x8000
 8001bc0:	d0b3      	beq.n	8001b2a <__gnu_unwind_execute+0x5e>
 8001bc2:	0104      	lsls	r4, r0, #4
 8001bc4:	2300      	movs	r3, #0
 8001bc6:	b2a2      	uxth	r2, r4
 8001bc8:	4619      	mov	r1, r3
 8001bca:	4630      	mov	r0, r6
 8001bcc:	f7ff fd28 	bl	8001620 <_Unwind_VRS_Pop>
 8001bd0:	2800      	cmp	r0, #0
 8001bd2:	d1aa      	bne.n	8001b2a <__gnu_unwind_execute+0x5e>
 8001bd4:	f414 4f00 	tst.w	r4, #32768	@ 0x8000
 8001bd8:	bf18      	it	ne
 8001bda:	f04f 0801 	movne.w	r8, #1
 8001bde:	e77c      	b.n	8001ada <__gnu_unwind_execute+0xe>
 8001be0:	28b1      	cmp	r0, #177	@ 0xb1
 8001be2:	d051      	beq.n	8001c88 <__gnu_unwind_execute+0x1bc>
 8001be4:	28b2      	cmp	r0, #178	@ 0xb2
 8001be6:	f000 80ad 	beq.w	8001d44 <__gnu_unwind_execute+0x278>
 8001bea:	28b3      	cmp	r0, #179	@ 0xb3
 8001bec:	d06d      	beq.n	8001cca <__gnu_unwind_execute+0x1fe>
 8001bee:	f000 03fc 	and.w	r3, r0, #252	@ 0xfc
 8001bf2:	2bb4      	cmp	r3, #180	@ 0xb4
 8001bf4:	d099      	beq.n	8001b2a <__gnu_unwind_execute+0x5e>
 8001bf6:	f000 0207 	and.w	r2, r0, #7
 8001bfa:	3201      	adds	r2, #1
 8001bfc:	2301      	movs	r3, #1
 8001bfe:	f442 2200 	orr.w	r2, r2, #524288	@ 0x80000
 8001c02:	4619      	mov	r1, r3
 8001c04:	4630      	mov	r0, r6
 8001c06:	f7ff fd0b 	bl	8001620 <_Unwind_VRS_Pop>
 8001c0a:	2800      	cmp	r0, #0
 8001c0c:	f43f af65 	beq.w	8001ada <__gnu_unwind_execute+0xe>
 8001c10:	e78b      	b.n	8001b2a <__gnu_unwind_execute+0x5e>
 8001c12:	f000 03f8 	and.w	r3, r0, #248	@ 0xf8
 8001c16:	2bd0      	cmp	r3, #208	@ 0xd0
 8001c18:	d187      	bne.n	8001b2a <__gnu_unwind_execute+0x5e>
 8001c1a:	f000 0207 	and.w	r2, r0, #7
 8001c1e:	3201      	adds	r2, #1
 8001c20:	2305      	movs	r3, #5
 8001c22:	f442 2200 	orr.w	r2, r2, #524288	@ 0x80000
 8001c26:	2101      	movs	r1, #1
 8001c28:	4630      	mov	r0, r6
 8001c2a:	f7ff fcf9 	bl	8001620 <_Unwind_VRS_Pop>
 8001c2e:	2800      	cmp	r0, #0
 8001c30:	f43f af53 	beq.w	8001ada <__gnu_unwind_execute+0xe>
 8001c34:	e779      	b.n	8001b2a <__gnu_unwind_execute+0x5e>
 8001c36:	f000 030d 	and.w	r3, r0, #13
 8001c3a:	2b0d      	cmp	r3, #13
 8001c3c:	f43f af75 	beq.w	8001b2a <__gnu_unwind_execute+0x5e>
 8001c40:	af03      	add	r7, sp, #12
 8001c42:	2300      	movs	r3, #0
 8001c44:	f000 020f 	and.w	r2, r0, #15
 8001c48:	4619      	mov	r1, r3
 8001c4a:	9700      	str	r7, [sp, #0]
 8001c4c:	4630      	mov	r0, r6
 8001c4e:	f7ff fb09 	bl	8001264 <_Unwind_VRS_Get>
 8001c52:	2300      	movs	r3, #0
 8001c54:	9700      	str	r7, [sp, #0]
 8001c56:	220d      	movs	r2, #13
 8001c58:	4619      	mov	r1, r3
 8001c5a:	4630      	mov	r0, r6
 8001c5c:	f7ff fb28 	bl	80012b0 <_Unwind_VRS_Set>
 8001c60:	e73b      	b.n	8001ada <__gnu_unwind_execute+0xe>
 8001c62:	4628      	mov	r0, r5
 8001c64:	f7ff ff06 	bl	8001a74 <next_unwind_byte>
 8001c68:	0302      	lsls	r2, r0, #12
 8001c6a:	f000 000f 	and.w	r0, r0, #15
 8001c6e:	3001      	adds	r0, #1
 8001c70:	f402 2270 	and.w	r2, r2, #983040	@ 0xf0000
 8001c74:	2303      	movs	r3, #3
 8001c76:	4302      	orrs	r2, r0
 8001c78:	4619      	mov	r1, r3
 8001c7a:	4630      	mov	r0, r6
 8001c7c:	f7ff fcd0 	bl	8001620 <_Unwind_VRS_Pop>
 8001c80:	2800      	cmp	r0, #0
 8001c82:	f43f af2a 	beq.w	8001ada <__gnu_unwind_execute+0xe>
 8001c86:	e750      	b.n	8001b2a <__gnu_unwind_execute+0x5e>
 8001c88:	4628      	mov	r0, r5
 8001c8a:	f7ff fef3 	bl	8001a74 <next_unwind_byte>
 8001c8e:	1e43      	subs	r3, r0, #1
 8001c90:	b2db      	uxtb	r3, r3
 8001c92:	2b0e      	cmp	r3, #14
 8001c94:	4602      	mov	r2, r0
 8001c96:	f67f af41 	bls.w	8001b1c <__gnu_unwind_execute+0x50>
 8001c9a:	e746      	b.n	8001b2a <__gnu_unwind_execute+0x5e>
 8001c9c:	f1b8 0f00 	cmp.w	r8, #0
 8001ca0:	d040      	beq.n	8001d24 <__gnu_unwind_execute+0x258>
 8001ca2:	2000      	movs	r0, #0
 8001ca4:	e742      	b.n	8001b2c <__gnu_unwind_execute+0x60>
 8001ca6:	4628      	mov	r0, r5
 8001ca8:	f7ff fee4 	bl	8001a74 <next_unwind_byte>
 8001cac:	1e43      	subs	r3, r0, #1
 8001cae:	b2db      	uxtb	r3, r3
 8001cb0:	2b0e      	cmp	r3, #14
 8001cb2:	4602      	mov	r2, r0
 8001cb4:	f63f af39 	bhi.w	8001b2a <__gnu_unwind_execute+0x5e>
 8001cb8:	2300      	movs	r3, #0
 8001cba:	2104      	movs	r1, #4
 8001cbc:	4630      	mov	r0, r6
 8001cbe:	f7ff fcaf 	bl	8001620 <_Unwind_VRS_Pop>
 8001cc2:	2800      	cmp	r0, #0
 8001cc4:	f43f af09 	beq.w	8001ada <__gnu_unwind_execute+0xe>
 8001cc8:	e72f      	b.n	8001b2a <__gnu_unwind_execute+0x5e>
 8001cca:	4628      	mov	r0, r5
 8001ccc:	f7ff fed2 	bl	8001a74 <next_unwind_byte>
 8001cd0:	0302      	lsls	r2, r0, #12
 8001cd2:	f000 000f 	and.w	r0, r0, #15
 8001cd6:	3001      	adds	r0, #1
 8001cd8:	f402 2270 	and.w	r2, r2, #983040	@ 0xf0000
 8001cdc:	2301      	movs	r3, #1
 8001cde:	4302      	orrs	r2, r0
 8001ce0:	4619      	mov	r1, r3
 8001ce2:	4630      	mov	r0, r6
 8001ce4:	f7ff fc9c 	bl	8001620 <_Unwind_VRS_Pop>
 8001ce8:	2800      	cmp	r0, #0
 8001cea:	f43f aef6 	beq.w	8001ada <__gnu_unwind_execute+0xe>
 8001cee:	e71c      	b.n	8001b2a <__gnu_unwind_execute+0x5e>
 8001cf0:	f000 020f 	and.w	r2, r0, #15
 8001cf4:	3201      	adds	r2, #1
 8001cf6:	2303      	movs	r3, #3
 8001cf8:	f442 2220 	orr.w	r2, r2, #655360	@ 0xa0000
 8001cfc:	4619      	mov	r1, r3
 8001cfe:	4630      	mov	r0, r6
 8001d00:	f7ff fc8e 	bl	8001620 <_Unwind_VRS_Pop>
 8001d04:	2800      	cmp	r0, #0
 8001d06:	f43f aee8 	beq.w	8001ada <__gnu_unwind_execute+0xe>
 8001d0a:	e70e      	b.n	8001b2a <__gnu_unwind_execute+0x5e>
 8001d0c:	4628      	mov	r0, r5
 8001d0e:	f7ff feb1 	bl	8001a74 <next_unwind_byte>
 8001d12:	f000 02f0 	and.w	r2, r0, #240	@ 0xf0
 8001d16:	f000 030f 	and.w	r3, r0, #15
 8001d1a:	3210      	adds	r2, #16
 8001d1c:	3301      	adds	r3, #1
 8001d1e:	ea43 3202 	orr.w	r2, r3, r2, lsl #12
 8001d22:	e722      	b.n	8001b6a <__gnu_unwind_execute+0x9e>
 8001d24:	ac03      	add	r4, sp, #12
 8001d26:	4643      	mov	r3, r8
 8001d28:	4641      	mov	r1, r8
 8001d2a:	220e      	movs	r2, #14
 8001d2c:	9400      	str	r4, [sp, #0]
 8001d2e:	4630      	mov	r0, r6
 8001d30:	f7ff fa98 	bl	8001264 <_Unwind_VRS_Get>
 8001d34:	9400      	str	r4, [sp, #0]
 8001d36:	4643      	mov	r3, r8
 8001d38:	220f      	movs	r2, #15
 8001d3a:	4641      	mov	r1, r8
 8001d3c:	4630      	mov	r0, r6
 8001d3e:	f7ff fab7 	bl	80012b0 <_Unwind_VRS_Set>
 8001d42:	e7ae      	b.n	8001ca2 <__gnu_unwind_execute+0x1d6>
 8001d44:	2300      	movs	r3, #0
 8001d46:	f10d 090c 	add.w	r9, sp, #12
 8001d4a:	220d      	movs	r2, #13
 8001d4c:	4619      	mov	r1, r3
 8001d4e:	f8cd 9000 	str.w	r9, [sp]
 8001d52:	4630      	mov	r0, r6
 8001d54:	f7ff fa86 	bl	8001264 <_Unwind_VRS_Get>
 8001d58:	4628      	mov	r0, r5
 8001d5a:	f7ff fe8b 	bl	8001a74 <next_unwind_byte>
 8001d5e:	0602      	lsls	r2, r0, #24
 8001d60:	9c03      	ldr	r4, [sp, #12]
 8001d62:	f04f 0702 	mov.w	r7, #2
 8001d66:	d50b      	bpl.n	8001d80 <__gnu_unwind_execute+0x2b4>
 8001d68:	f000 007f 	and.w	r0, r0, #127	@ 0x7f
 8001d6c:	40b8      	lsls	r0, r7
 8001d6e:	4404      	add	r4, r0
 8001d70:	4628      	mov	r0, r5
 8001d72:	9403      	str	r4, [sp, #12]
 8001d74:	f7ff fe7e 	bl	8001a74 <next_unwind_byte>
 8001d78:	0603      	lsls	r3, r0, #24
 8001d7a:	f107 0707 	add.w	r7, r7, #7
 8001d7e:	d4f3      	bmi.n	8001d68 <__gnu_unwind_execute+0x29c>
 8001d80:	fa00 f207 	lsl.w	r2, r0, r7
 8001d84:	f504 7401 	add.w	r4, r4, #516	@ 0x204
 8001d88:	4422      	add	r2, r4
 8001d8a:	2300      	movs	r3, #0
 8001d8c:	9203      	str	r2, [sp, #12]
 8001d8e:	f8cd 9000 	str.w	r9, [sp]
 8001d92:	220d      	movs	r2, #13
 8001d94:	4619      	mov	r1, r3
 8001d96:	4630      	mov	r0, r6
 8001d98:	f7ff fa8a 	bl	80012b0 <_Unwind_VRS_Set>
 8001d9c:	e69d      	b.n	8001ada <__gnu_unwind_execute+0xe>
 8001d9e:	bf00      	nop

08001da0 <__gnu_unwind_frame>:
 8001da0:	b510      	push	{r4, lr}
 8001da2:	6cc2      	ldr	r2, [r0, #76]	@ 0x4c
 8001da4:	6853      	ldr	r3, [r2, #4]
 8001da6:	b084      	sub	sp, #16
 8001da8:	f04f 0c03 	mov.w	ip, #3
 8001dac:	3208      	adds	r2, #8
 8001dae:	021c      	lsls	r4, r3, #8
 8001db0:	4608      	mov	r0, r1
 8001db2:	0e1b      	lsrs	r3, r3, #24
 8001db4:	a901      	add	r1, sp, #4
 8001db6:	9401      	str	r4, [sp, #4]
 8001db8:	9202      	str	r2, [sp, #8]
 8001dba:	f88d c00c 	strb.w	ip, [sp, #12]
 8001dbe:	f88d 300d 	strb.w	r3, [sp, #13]
 8001dc2:	f7ff fe83 	bl	8001acc <__gnu_unwind_execute>
 8001dc6:	b004      	add	sp, #16
 8001dc8:	bd10      	pop	{r4, pc}
 8001dca:	bf00      	nop

08001dcc <_Unwind_GetRegionStart>:
 8001dcc:	b508      	push	{r3, lr}
 8001dce:	f7ff fe7b 	bl	8001ac8 <unwind_UCB_from_context>
 8001dd2:	6c80      	ldr	r0, [r0, #72]	@ 0x48
 8001dd4:	bd08      	pop	{r3, pc}
 8001dd6:	bf00      	nop

08001dd8 <_Unwind_GetLanguageSpecificData>:
 8001dd8:	b508      	push	{r3, lr}
 8001dda:	f7ff fe75 	bl	8001ac8 <unwind_UCB_from_context>
 8001dde:	6cc0      	ldr	r0, [r0, #76]	@ 0x4c
 8001de0:	79c3      	ldrb	r3, [r0, #7]
 8001de2:	3302      	adds	r3, #2
 8001de4:	eb00 0083 	add.w	r0, r0, r3, lsl #2
 8001de8:	bd08      	pop	{r3, pc}
 8001dea:	bf00      	nop

08001dec <__aeabi_idiv0>:
 8001dec:	4770      	bx	lr
 8001dee:	bf00      	nop

08001df0 <_ZSt3absl>:

  using ::abs;

#ifndef __CORRECT_ISO_CPP_STDLIB_H_PROTO
  inline long
  abs(long __i) { return __builtin_labs(__i); }
 8001df0:	b480      	push	{r7}
 8001df2:	b083      	sub	sp, #12
 8001df4:	af00      	add	r7, sp, #0
 8001df6:	6078      	str	r0, [r7, #4]
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	2b00      	cmp	r3, #0
 8001dfc:	bfb8      	it	lt
 8001dfe:	425b      	neglt	r3, r3
 8001e00:	4618      	mov	r0, r3
 8001e02:	370c      	adds	r7, #12
 8001e04:	46bd      	mov	sp, r7
 8001e06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e0a:	4770      	bx	lr

08001e0c <_Z12Degree5_InitP7Degree5P17ADC_HandleTypeDefP17TIM_HandleTypeDefP20__UART_HandleTypeDef>:
#include <stdlib.h>
#include <setjmp.h>

jmp_buf env;

void Degree5_Init(Degree5* controller, ADC_HandleTypeDef* adc1, TIM_HandleTypeDef* tim, UART_HandleTypeDef* uart) {
 8001e0c:	b480      	push	{r7}
 8001e0e:	b085      	sub	sp, #20
 8001e10:	af00      	add	r7, sp, #0
 8001e12:	60f8      	str	r0, [r7, #12]
 8001e14:	60b9      	str	r1, [r7, #8]
 8001e16:	607a      	str	r2, [r7, #4]
 8001e18:	603b      	str	r3, [r7, #0]
    controller->hadc1 = adc1;
 8001e1a:	68fb      	ldr	r3, [r7, #12]
 8001e1c:	68ba      	ldr	r2, [r7, #8]
 8001e1e:	601a      	str	r2, [r3, #0]
    controller->htim = tim;
 8001e20:	68fb      	ldr	r3, [r7, #12]
 8001e22:	687a      	ldr	r2, [r7, #4]
 8001e24:	609a      	str	r2, [r3, #8]
    controller->huart = uart;
 8001e26:	68fb      	ldr	r3, [r7, #12]
 8001e28:	683a      	ldr	r2, [r7, #0]
 8001e2a:	60da      	str	r2, [r3, #12]
    controller->current_pwm = 750; // Initial position
 8001e2c:	68fb      	ldr	r3, [r7, #12]
 8001e2e:	f240 22ee 	movw	r2, #750	@ 0x2ee
 8001e32:	821a      	strh	r2, [r3, #16]
}
 8001e34:	bf00      	nop
 8001e36:	3714      	adds	r7, #20
 8001e38:	46bd      	mov	sp, r7
 8001e3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e3e:	4770      	bx	lr

08001e40 <_Z15Degree5_ReadADCP7Degree5PmS1_>:

void Degree5_ReadADC(Degree5* controller, uint32_t* raw1, uint32_t* raw2) {
 8001e40:	b580      	push	{r7, lr}
 8001e42:	b088      	sub	sp, #32
 8001e44:	af00      	add	r7, sp, #0
 8001e46:	60f8      	str	r0, [r7, #12]
 8001e48:	60b9      	str	r1, [r7, #8]
 8001e4a:	607a      	str	r2, [r7, #4]
    ADC_ChannelConfTypeDef sConfig = {0};
 8001e4c:	f107 0310 	add.w	r3, r7, #16
 8001e50:	2200      	movs	r2, #0
 8001e52:	601a      	str	r2, [r3, #0]
 8001e54:	605a      	str	r2, [r3, #4]
 8001e56:	609a      	str	r2, [r3, #8]
 8001e58:	60da      	str	r2, [r3, #12]

    // Lesen von Kanal 0
    sConfig.Channel = ADC_CHANNEL_0;
 8001e5a:	2300      	movs	r3, #0
 8001e5c:	613b      	str	r3, [r7, #16]
    sConfig.Rank = 1; // Erster Kanal
 8001e5e:	2301      	movs	r3, #1
 8001e60:	617b      	str	r3, [r7, #20]
    sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8001e62:	2300      	movs	r3, #0
 8001e64:	61bb      	str	r3, [r7, #24]
    HAL_ADC_ConfigChannel(controller->hadc1, &sConfig);
 8001e66:	68fb      	ldr	r3, [r7, #12]
 8001e68:	681b      	ldr	r3, [r3, #0]
 8001e6a:	f107 0210 	add.w	r2, r7, #16
 8001e6e:	4611      	mov	r1, r2
 8001e70:	4618      	mov	r0, r3
 8001e72:	f001 f92d 	bl	80030d0 <HAL_ADC_ConfigChannel>

    HAL_ADC_Start(controller->hadc1);
 8001e76:	68fb      	ldr	r3, [r7, #12]
 8001e78:	681b      	ldr	r3, [r3, #0]
 8001e7a:	4618      	mov	r0, r3
 8001e7c:	f000 ff70 	bl	8002d60 <HAL_ADC_Start>
    if (HAL_ADC_PollForConversion(controller->hadc1, HAL_MAX_DELAY) == HAL_OK) {
 8001e80:	68fb      	ldr	r3, [r7, #12]
 8001e82:	681b      	ldr	r3, [r3, #0]
 8001e84:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8001e88:	4618      	mov	r0, r3
 8001e8a:	f001 f869 	bl	8002f60 <HAL_ADC_PollForConversion>
 8001e8e:	4603      	mov	r3, r0
 8001e90:	2b00      	cmp	r3, #0
 8001e92:	bf0c      	ite	eq
 8001e94:	2301      	moveq	r3, #1
 8001e96:	2300      	movne	r3, #0
 8001e98:	b2db      	uxtb	r3, r3
 8001e9a:	2b00      	cmp	r3, #0
 8001e9c:	d007      	beq.n	8001eae <_Z15Degree5_ReadADCP7Degree5PmS1_+0x6e>
        *raw1 = HAL_ADC_GetValue(controller->hadc1);
 8001e9e:	68fb      	ldr	r3, [r7, #12]
 8001ea0:	681b      	ldr	r3, [r3, #0]
 8001ea2:	4618      	mov	r0, r3
 8001ea4:	f001 f906 	bl	80030b4 <HAL_ADC_GetValue>
 8001ea8:	4602      	mov	r2, r0
 8001eaa:	68bb      	ldr	r3, [r7, #8]
 8001eac:	601a      	str	r2, [r3, #0]
    }

    // Lesen von Kanal 1
    sConfig.Channel = ADC_CHANNEL_1;
 8001eae:	2301      	movs	r3, #1
 8001eb0:	613b      	str	r3, [r7, #16]
    sConfig.Rank = 1; // Wieder erster Kanal
 8001eb2:	2301      	movs	r3, #1
 8001eb4:	617b      	str	r3, [r7, #20]
    HAL_ADC_ConfigChannel(controller->hadc1, &sConfig);
 8001eb6:	68fb      	ldr	r3, [r7, #12]
 8001eb8:	681b      	ldr	r3, [r3, #0]
 8001eba:	f107 0210 	add.w	r2, r7, #16
 8001ebe:	4611      	mov	r1, r2
 8001ec0:	4618      	mov	r0, r3
 8001ec2:	f001 f905 	bl	80030d0 <HAL_ADC_ConfigChannel>

    HAL_ADC_Start(controller->hadc1);
 8001ec6:	68fb      	ldr	r3, [r7, #12]
 8001ec8:	681b      	ldr	r3, [r3, #0]
 8001eca:	4618      	mov	r0, r3
 8001ecc:	f000 ff48 	bl	8002d60 <HAL_ADC_Start>
    if (HAL_ADC_PollForConversion(controller->hadc1, HAL_MAX_DELAY) == HAL_OK) {
 8001ed0:	68fb      	ldr	r3, [r7, #12]
 8001ed2:	681b      	ldr	r3, [r3, #0]
 8001ed4:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8001ed8:	4618      	mov	r0, r3
 8001eda:	f001 f841 	bl	8002f60 <HAL_ADC_PollForConversion>
 8001ede:	4603      	mov	r3, r0
 8001ee0:	2b00      	cmp	r3, #0
 8001ee2:	bf0c      	ite	eq
 8001ee4:	2301      	moveq	r3, #1
 8001ee6:	2300      	movne	r3, #0
 8001ee8:	b2db      	uxtb	r3, r3
 8001eea:	2b00      	cmp	r3, #0
 8001eec:	d007      	beq.n	8001efe <_Z15Degree5_ReadADCP7Degree5PmS1_+0xbe>
        *raw2 = HAL_ADC_GetValue(controller->hadc1);
 8001eee:	68fb      	ldr	r3, [r7, #12]
 8001ef0:	681b      	ldr	r3, [r3, #0]
 8001ef2:	4618      	mov	r0, r3
 8001ef4:	f001 f8de 	bl	80030b4 <HAL_ADC_GetValue>
 8001ef8:	4602      	mov	r2, r0
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	601a      	str	r2, [r3, #0]
    }
}
 8001efe:	bf00      	nop
 8001f00:	3720      	adds	r7, #32
 8001f02:	46bd      	mov	sp, r7
 8001f04:	bd80      	pop	{r7, pc}

08001f06 <_Z24Degree5_SetServoPositionP7Degree5t>:

void Degree5_SetServoPosition(Degree5* controller, uint16_t target_pwm) {
 8001f06:	b580      	push	{r7, lr}
 8001f08:	b088      	sub	sp, #32
 8001f0a:	af00      	add	r7, sp, #0
 8001f0c:	6078      	str	r0, [r7, #4]
 8001f0e:	460b      	mov	r3, r1
 8001f10:	807b      	strh	r3, [r7, #2]
    uint32_t step_count = 0;
 8001f12:	2300      	movs	r3, #0
 8001f14:	61fb      	str	r3, [r7, #28]
    const uint16_t tolerance = 20; // Toleranz für ADC-Werte
 8001f16:	2314      	movs	r3, #20
 8001f18:	837b      	strh	r3, [r7, #26]

    if (controller->current_pwm < target_pwm) {
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	8a1b      	ldrh	r3, [r3, #16]
 8001f1e:	887a      	ldrh	r2, [r7, #2]
 8001f20:	429a      	cmp	r2, r3
 8001f22:	d943      	bls.n	8001fac <_Z24Degree5_SetServoPositionP7Degree5t+0xa6>
        while (controller->current_pwm < target_pwm) {
 8001f24:	e03c      	b.n	8001fa0 <_Z24Degree5_SetServoPositionP7Degree5t+0x9a>
            controller->current_pwm++;
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	8a1b      	ldrh	r3, [r3, #16]
 8001f2a:	3301      	adds	r3, #1
 8001f2c:	b29a      	uxth	r2, r3
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	821a      	strh	r2, [r3, #16]
            controller->htim->Instance->CCR1 = controller->current_pwm;
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	8a1a      	ldrh	r2, [r3, #16]
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	689b      	ldr	r3, [r3, #8]
 8001f3a:	681b      	ldr	r3, [r3, #0]
 8001f3c:	635a      	str	r2, [r3, #52]	@ 0x34
            HAL_Delay(1); // Geschwindigkeit des Übergangs anpassen
 8001f3e:	2001      	movs	r0, #1
 8001f40:	f000 fe96 	bl	8002c70 <HAL_Delay>
            step_count++;
 8001f44:	69fb      	ldr	r3, [r7, #28]
 8001f46:	3301      	adds	r3, #1
 8001f48:	61fb      	str	r3, [r7, #28]

            // ADC-Werte nach 10 Schritten prüfen
            if (step_count >= 10) {
 8001f4a:	69fb      	ldr	r3, [r7, #28]
 8001f4c:	2b09      	cmp	r3, #9
 8001f4e:	d927      	bls.n	8001fa0 <_Z24Degree5_SetServoPositionP7Degree5t+0x9a>
                uint32_t raw1, raw2;
                Degree5_ReadADC(controller, &raw1, &raw2);
 8001f50:	f107 0210 	add.w	r2, r7, #16
 8001f54:	f107 0314 	add.w	r3, r7, #20
 8001f58:	4619      	mov	r1, r3
 8001f5a:	6878      	ldr	r0, [r7, #4]
 8001f5c:	f7ff ff70 	bl	8001e40 <_Z15Degree5_ReadADCP7Degree5PmS1_>

                if ((raw1 > 2048 && raw2 <= 2048) || (raw2 > 2048 && raw1 <= 2048)) {
 8001f60:	697b      	ldr	r3, [r7, #20]
 8001f62:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8001f66:	d903      	bls.n	8001f70 <_Z24Degree5_SetServoPositionP7Degree5t+0x6a>
 8001f68:	693b      	ldr	r3, [r7, #16]
 8001f6a:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8001f6e:	d969      	bls.n	8002044 <_Z24Degree5_SetServoPositionP7Degree5t+0x13e>
 8001f70:	693b      	ldr	r3, [r7, #16]
 8001f72:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8001f76:	d903      	bls.n	8001f80 <_Z24Degree5_SetServoPositionP7Degree5t+0x7a>
 8001f78:	697b      	ldr	r3, [r7, #20]
 8001f7a:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8001f7e:	d961      	bls.n	8002044 <_Z24Degree5_SetServoPositionP7Degree5t+0x13e>
                    break;
                } else if (abs((int32_t)(raw1 - raw2)) <= tolerance) {
 8001f80:	697a      	ldr	r2, [r7, #20]
 8001f82:	693b      	ldr	r3, [r7, #16]
 8001f84:	1ad3      	subs	r3, r2, r3
 8001f86:	4618      	mov	r0, r3
 8001f88:	f7ff ff32 	bl	8001df0 <_ZSt3absl>
 8001f8c:	4603      	mov	r3, r0
 8001f8e:	2b14      	cmp	r3, #20
 8001f90:	bfd4      	ite	le
 8001f92:	2301      	movle	r3, #1
 8001f94:	2300      	movgt	r3, #0
 8001f96:	b2db      	uxtb	r3, r3
 8001f98:	2b00      	cmp	r3, #0
 8001f9a:	d150      	bne.n	800203e <_Z24Degree5_SetServoPositionP7Degree5t+0x138>
                    break;
                }
                step_count = 0; // Schrittzähler zurücksetzen
 8001f9c:	2300      	movs	r3, #0
 8001f9e:	61fb      	str	r3, [r7, #28]
        while (controller->current_pwm < target_pwm) {
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	8a1b      	ldrh	r3, [r3, #16]
 8001fa4:	887a      	ldrh	r2, [r7, #2]
 8001fa6:	429a      	cmp	r2, r3
 8001fa8:	d8bd      	bhi.n	8001f26 <_Z24Degree5_SetServoPositionP7Degree5t+0x20>
                }
                step_count = 0; // Schrittzähler zurücksetzen
            }
        }
    }
}
 8001faa:	e04b      	b.n	8002044 <_Z24Degree5_SetServoPositionP7Degree5t+0x13e>
    } else if (controller->current_pwm > target_pwm) {
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	8a1b      	ldrh	r3, [r3, #16]
 8001fb0:	887a      	ldrh	r2, [r7, #2]
 8001fb2:	429a      	cmp	r2, r3
 8001fb4:	d246      	bcs.n	8002044 <_Z24Degree5_SetServoPositionP7Degree5t+0x13e>
        while (controller->current_pwm > target_pwm) {
 8001fb6:	e03c      	b.n	8002032 <_Z24Degree5_SetServoPositionP7Degree5t+0x12c>
            controller->current_pwm--;
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	8a1b      	ldrh	r3, [r3, #16]
 8001fbc:	3b01      	subs	r3, #1
 8001fbe:	b29a      	uxth	r2, r3
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	821a      	strh	r2, [r3, #16]
            controller->htim->Instance->CCR1 = controller->current_pwm;
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	8a1a      	ldrh	r2, [r3, #16]
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	689b      	ldr	r3, [r3, #8]
 8001fcc:	681b      	ldr	r3, [r3, #0]
 8001fce:	635a      	str	r2, [r3, #52]	@ 0x34
            HAL_Delay(1); // Geschwindigkeit des Übergangs anpassen
 8001fd0:	2001      	movs	r0, #1
 8001fd2:	f000 fe4d 	bl	8002c70 <HAL_Delay>
            step_count++;
 8001fd6:	69fb      	ldr	r3, [r7, #28]
 8001fd8:	3301      	adds	r3, #1
 8001fda:	61fb      	str	r3, [r7, #28]
            if (step_count >= 10) {
 8001fdc:	69fb      	ldr	r3, [r7, #28]
 8001fde:	2b09      	cmp	r3, #9
 8001fe0:	d927      	bls.n	8002032 <_Z24Degree5_SetServoPositionP7Degree5t+0x12c>
                Degree5_ReadADC(controller, &raw1, &raw2);
 8001fe2:	f107 0208 	add.w	r2, r7, #8
 8001fe6:	f107 030c 	add.w	r3, r7, #12
 8001fea:	4619      	mov	r1, r3
 8001fec:	6878      	ldr	r0, [r7, #4]
 8001fee:	f7ff ff27 	bl	8001e40 <_Z15Degree5_ReadADCP7Degree5PmS1_>
                if ((raw1 > 2048 && raw2 <= 2048) || (raw2 > 2048 && raw1 <= 2048)) {
 8001ff2:	68fb      	ldr	r3, [r7, #12]
 8001ff4:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8001ff8:	d903      	bls.n	8002002 <_Z24Degree5_SetServoPositionP7Degree5t+0xfc>
 8001ffa:	68bb      	ldr	r3, [r7, #8]
 8001ffc:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8002000:	d920      	bls.n	8002044 <_Z24Degree5_SetServoPositionP7Degree5t+0x13e>
 8002002:	68bb      	ldr	r3, [r7, #8]
 8002004:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8002008:	d903      	bls.n	8002012 <_Z24Degree5_SetServoPositionP7Degree5t+0x10c>
 800200a:	68fb      	ldr	r3, [r7, #12]
 800200c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8002010:	d918      	bls.n	8002044 <_Z24Degree5_SetServoPositionP7Degree5t+0x13e>
                } else if (abs((int32_t)(raw1 - raw2)) <= tolerance) {
 8002012:	68fa      	ldr	r2, [r7, #12]
 8002014:	68bb      	ldr	r3, [r7, #8]
 8002016:	1ad3      	subs	r3, r2, r3
 8002018:	4618      	mov	r0, r3
 800201a:	f7ff fee9 	bl	8001df0 <_ZSt3absl>
 800201e:	4603      	mov	r3, r0
 8002020:	2b14      	cmp	r3, #20
 8002022:	bfd4      	ite	le
 8002024:	2301      	movle	r3, #1
 8002026:	2300      	movgt	r3, #0
 8002028:	b2db      	uxtb	r3, r3
 800202a:	2b00      	cmp	r3, #0
 800202c:	d109      	bne.n	8002042 <_Z24Degree5_SetServoPositionP7Degree5t+0x13c>
                step_count = 0; // Schrittzähler zurücksetzen
 800202e:	2300      	movs	r3, #0
 8002030:	61fb      	str	r3, [r7, #28]
        while (controller->current_pwm > target_pwm) {
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	8a1b      	ldrh	r3, [r3, #16]
 8002036:	887a      	ldrh	r2, [r7, #2]
 8002038:	429a      	cmp	r2, r3
 800203a:	d3bd      	bcc.n	8001fb8 <_Z24Degree5_SetServoPositionP7Degree5t+0xb2>
}
 800203c:	e002      	b.n	8002044 <_Z24Degree5_SetServoPositionP7Degree5t+0x13e>
                    break;
 800203e:	bf00      	nop
 8002040:	e000      	b.n	8002044 <_Z24Degree5_SetServoPositionP7Degree5t+0x13e>
                    break;
 8002042:	bf00      	nop
}
 8002044:	bf00      	nop
 8002046:	3720      	adds	r7, #32
 8002048:	46bd      	mov	sp, r7
 800204a:	bd80      	pop	{r7, pc}

0800204c <_Z30Degree5_ReadADCAndControlServoP7Degree5>:

void Degree5_ReadADCAndControlServo(Degree5* controller) {
 800204c:	b590      	push	{r4, r7, lr}
 800204e:	b093      	sub	sp, #76	@ 0x4c
 8002050:	af00      	add	r7, sp, #0
 8002052:	6078      	str	r0, [r7, #4]
    uint32_t raw1 = 0, raw2 = 0;
 8002054:	2300      	movs	r3, #0
 8002056:	643b      	str	r3, [r7, #64]	@ 0x40
 8002058:	2300      	movs	r3, #0
 800205a:	63fb      	str	r3, [r7, #60]	@ 0x3c
    char msg[50];
    const uint16_t tolerance = 20;
 800205c:	2314      	movs	r3, #20
 800205e:	f8a7 3044 	strh.w	r3, [r7, #68]	@ 0x44

    Degree5_ReadADC(controller, &raw1, &raw2);
 8002062:	f107 023c 	add.w	r2, r7, #60	@ 0x3c
 8002066:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 800206a:	4619      	mov	r1, r3
 800206c:	6878      	ldr	r0, [r7, #4]
 800206e:	f7ff fee7 	bl	8001e40 <_Z15Degree5_ReadADCP7Degree5PmS1_>

    // Debug-Nachricht für ADC1
    sprintf(msg, "ADC1: %lu\r\n", raw1);
 8002072:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8002074:	f107 0308 	add.w	r3, r7, #8
 8002078:	493b      	ldr	r1, [pc, #236]	@ (8002168 <_Z30Degree5_ReadADCAndControlServoP7Degree5+0x11c>)
 800207a:	4618      	mov	r0, r3
 800207c:	f004 fdc4 	bl	8006c08 <siprintf>
    HAL_UART_Transmit(controller->huart, (uint8_t*)msg, strlen(msg), HAL_MAX_DELAY);
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	68dc      	ldr	r4, [r3, #12]
 8002084:	f107 0308 	add.w	r3, r7, #8
 8002088:	4618      	mov	r0, r3
 800208a:	f7fe f911 	bl	80002b0 <strlen>
 800208e:	4603      	mov	r3, r0
 8002090:	b29a      	uxth	r2, r3
 8002092:	f107 0108 	add.w	r1, r7, #8
 8002096:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800209a:	4620      	mov	r0, r4
 800209c:	f003 fbdd 	bl	800585a <HAL_UART_Transmit>
    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, (raw1 > 2048) ? GPIO_PIN_RESET : GPIO_PIN_SET);
 80020a0:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80020a2:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80020a6:	bf94      	ite	ls
 80020a8:	2301      	movls	r3, #1
 80020aa:	2300      	movhi	r3, #0
 80020ac:	b2db      	uxtb	r3, r3
 80020ae:	461a      	mov	r2, r3
 80020b0:	2101      	movs	r1, #1
 80020b2:	482e      	ldr	r0, [pc, #184]	@ (800216c <_Z30Degree5_ReadADCAndControlServoP7Degree5+0x120>)
 80020b4:	f001 fce4 	bl	8003a80 <HAL_GPIO_WritePin>

    HAL_Delay(100);
 80020b8:	2064      	movs	r0, #100	@ 0x64
 80020ba:	f000 fdd9 	bl	8002c70 <HAL_Delay>

    // Debug-Nachricht für ADC2
    sprintf(msg, "ADC2: %lu\r\n", raw2);
 80020be:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 80020c0:	f107 0308 	add.w	r3, r7, #8
 80020c4:	492a      	ldr	r1, [pc, #168]	@ (8002170 <_Z30Degree5_ReadADCAndControlServoP7Degree5+0x124>)
 80020c6:	4618      	mov	r0, r3
 80020c8:	f004 fd9e 	bl	8006c08 <siprintf>
    HAL_UART_Transmit(controller->huart, (uint8_t*)msg, strlen(msg), HAL_MAX_DELAY);
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	68dc      	ldr	r4, [r3, #12]
 80020d0:	f107 0308 	add.w	r3, r7, #8
 80020d4:	4618      	mov	r0, r3
 80020d6:	f7fe f8eb 	bl	80002b0 <strlen>
 80020da:	4603      	mov	r3, r0
 80020dc:	b29a      	uxth	r2, r3
 80020de:	f107 0108 	add.w	r1, r7, #8
 80020e2:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80020e6:	4620      	mov	r0, r4
 80020e8:	f003 fbb7 	bl	800585a <HAL_UART_Transmit>
    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7, (raw2 > 2048) ? GPIO_PIN_RESET : GPIO_PIN_SET);
 80020ec:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80020ee:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80020f2:	bf94      	ite	ls
 80020f4:	2301      	movls	r3, #1
 80020f6:	2300      	movhi	r3, #0
 80020f8:	b2db      	uxtb	r3, r3
 80020fa:	461a      	mov	r2, r3
 80020fc:	2180      	movs	r1, #128	@ 0x80
 80020fe:	481b      	ldr	r0, [pc, #108]	@ (800216c <_Z30Degree5_ReadADCAndControlServoP7Degree5+0x120>)
 8002100:	f001 fcbe 	bl	8003a80 <HAL_GPIO_WritePin>

    HAL_Delay(100);
 8002104:	2064      	movs	r0, #100	@ 0x64
 8002106:	f000 fdb3 	bl	8002c70 <HAL_Delay>

    uint16_t target_pwm = 750;
 800210a:	f240 23ee 	movw	r3, #750	@ 0x2ee
 800210e:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46
    if (raw1 > raw2) {
 8002112:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8002114:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002116:	429a      	cmp	r2, r3
 8002118:	d903      	bls.n	8002122 <_Z30Degree5_ReadADCAndControlServoP7Degree5+0xd6>
        target_pwm = 250;
 800211a:	23fa      	movs	r3, #250	@ 0xfa
 800211c:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46
 8002120:	e007      	b.n	8002132 <_Z30Degree5_ReadADCAndControlServoP7Degree5+0xe6>
    } else if (raw1 < raw2) {
 8002122:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8002124:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002126:	429a      	cmp	r2, r3
 8002128:	d203      	bcs.n	8002132 <_Z30Degree5_ReadADCAndControlServoP7Degree5+0xe6>
        target_pwm = 1250;
 800212a:	f240 43e2 	movw	r3, #1250	@ 0x4e2
 800212e:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46
    }

    if (abs((int32_t)(raw1 - raw2)) >= tolerance) {
 8002132:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8002134:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002136:	1ad3      	subs	r3, r2, r3
 8002138:	4618      	mov	r0, r3
 800213a:	f7ff fe59 	bl	8001df0 <_ZSt3absl>
 800213e:	4603      	mov	r3, r0
 8002140:	2b13      	cmp	r3, #19
 8002142:	bfcc      	ite	gt
 8002144:	2301      	movgt	r3, #1
 8002146:	2300      	movle	r3, #0
 8002148:	b2db      	uxtb	r3, r3
 800214a:	2b00      	cmp	r3, #0
 800214c:	d005      	beq.n	800215a <_Z30Degree5_ReadADCAndControlServoP7Degree5+0x10e>
        Degree5_SetServoPosition(controller, target_pwm);
 800214e:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 8002152:	4619      	mov	r1, r3
 8002154:	6878      	ldr	r0, [r7, #4]
 8002156:	f7ff fed6 	bl	8001f06 <_Z24Degree5_SetServoPositionP7Degree5t>
    }
    HAL_Delay(100);
 800215a:	2064      	movs	r0, #100	@ 0x64
 800215c:	f000 fd88 	bl	8002c70 <HAL_Delay>
}
 8002160:	bf00      	nop
 8002162:	374c      	adds	r7, #76	@ 0x4c
 8002164:	46bd      	mov	sp, r7
 8002166:	bd90      	pop	{r4, r7, pc}
 8002168:	08008d98 	.word	0x08008d98
 800216c:	40020400 	.word	0x40020400
 8002170:	08008da4 	.word	0x08008da4

08002174 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8002174:	b580      	push	{r7, lr}
 8002176:	b086      	sub	sp, #24
 8002178:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800217a:	f000 fd01 	bl	8002b80 <HAL_Init>

  /* USER CODE BEGIN Init */
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800217e:	f000 f82b 	bl	80021d8 <_Z18SystemClock_Configv>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8002182:	f000 fa55 	bl	8002630 <_ZL12MX_GPIO_Initv>
  MX_USART2_UART_Init();
 8002186:	f000 fa25 	bl	80025d4 <_ZL19MX_USART2_UART_Initv>
  MX_SPI1_Init();
 800218a:	f000 f8f9 	bl	8002380 <_ZL12MX_SPI1_Initv>
  MX_TIM1_Init();
 800218e:	f000 f933 	bl	80023f8 <_ZL12MX_TIM1_Initv>
  MX_ADC1_Init();
 8002192:	f000 f899 	bl	80022c8 <_ZL12MX_ADC1_Initv>
  MX_TIM2_Init();
 8002196:	f000 f98f 	bl	80024b8 <_ZL12MX_TIM2_Initv>
  /* USER CODE BEGIN 2 */
	HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1);
 800219a:	2100      	movs	r1, #0
 800219c:	480a      	ldr	r0, [pc, #40]	@ (80021c8 <main+0x54>)
 800219e:	f002 fd27 	bl	8004bf0 <HAL_TIM_PWM_Start>

	Degree5 degree5Controller;
	Degree5_Init(&degree5Controller, &hadc1, &htim2, &huart2);
 80021a2:	1d38      	adds	r0, r7, #4
 80021a4:	4b09      	ldr	r3, [pc, #36]	@ (80021cc <main+0x58>)
 80021a6:	4a08      	ldr	r2, [pc, #32]	@ (80021c8 <main+0x54>)
 80021a8:	4909      	ldr	r1, [pc, #36]	@ (80021d0 <main+0x5c>)
 80021aa:	f7ff fe2f 	bl	8001e0c <_Z12Degree5_InitP7Degree5P17ADC_HandleTypeDefP17TIM_HandleTypeDefP20__UART_HandleTypeDef>
	HAL_Delay(1000);
 80021ae:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80021b2:	f000 fd5d 	bl	8002c70 <HAL_Delay>

	HAL_TIM_Base_Start(&htim1);
 80021b6:	4807      	ldr	r0, [pc, #28]	@ (80021d4 <main+0x60>)
 80021b8:	f002 fc50 	bl	8004a5c <HAL_TIM_Base_Start>
		Degree5_SetServoAngle(&degree5Controller, servo_angle);
		HAL_Delay(5000); // Wiederhole nach 1 Sekunde
#endif
#ifdef LightSensor

		Degree5_ReadADCAndControlServo(&degree5Controller);
 80021bc:	1d3b      	adds	r3, r7, #4
 80021be:	4618      	mov	r0, r3
 80021c0:	f7ff ff44 	bl	800204c <_Z30Degree5_ReadADCAndControlServoP7Degree5>
 80021c4:	e7fa      	b.n	80021bc <main+0x48>
 80021c6:	bf00      	nop
 80021c8:	200002d8 	.word	0x200002d8
 80021cc:	20000320 	.word	0x20000320
 80021d0:	200001f0 	.word	0x200001f0
 80021d4:	20000290 	.word	0x20000290

080021d8 <_Z18SystemClock_Configv>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80021d8:	b580      	push	{r7, lr}
 80021da:	b094      	sub	sp, #80	@ 0x50
 80021dc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80021de:	f107 031c 	add.w	r3, r7, #28
 80021e2:	2234      	movs	r2, #52	@ 0x34
 80021e4:	2100      	movs	r1, #0
 80021e6:	4618      	mov	r0, r3
 80021e8:	f004 fd71 	bl	8006cce <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80021ec:	f107 0308 	add.w	r3, r7, #8
 80021f0:	2200      	movs	r2, #0
 80021f2:	601a      	str	r2, [r3, #0]
 80021f4:	605a      	str	r2, [r3, #4]
 80021f6:	609a      	str	r2, [r3, #8]
 80021f8:	60da      	str	r2, [r3, #12]
 80021fa:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80021fc:	2300      	movs	r3, #0
 80021fe:	607b      	str	r3, [r7, #4]
 8002200:	4b2f      	ldr	r3, [pc, #188]	@ (80022c0 <_Z18SystemClock_Configv+0xe8>)
 8002202:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002204:	4a2e      	ldr	r2, [pc, #184]	@ (80022c0 <_Z18SystemClock_Configv+0xe8>)
 8002206:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800220a:	6413      	str	r3, [r2, #64]	@ 0x40
 800220c:	4b2c      	ldr	r3, [pc, #176]	@ (80022c0 <_Z18SystemClock_Configv+0xe8>)
 800220e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002210:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002214:	607b      	str	r3, [r7, #4]
 8002216:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8002218:	2300      	movs	r3, #0
 800221a:	603b      	str	r3, [r7, #0]
 800221c:	4b29      	ldr	r3, [pc, #164]	@ (80022c4 <_Z18SystemClock_Configv+0xec>)
 800221e:	681b      	ldr	r3, [r3, #0]
 8002220:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8002224:	4a27      	ldr	r2, [pc, #156]	@ (80022c4 <_Z18SystemClock_Configv+0xec>)
 8002226:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800222a:	6013      	str	r3, [r2, #0]
 800222c:	4b25      	ldr	r3, [pc, #148]	@ (80022c4 <_Z18SystemClock_Configv+0xec>)
 800222e:	681b      	ldr	r3, [r3, #0]
 8002230:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8002234:	603b      	str	r3, [r7, #0]
 8002236:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8002238:	2302      	movs	r3, #2
 800223a:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800223c:	2301      	movs	r3, #1
 800223e:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8002240:	2310      	movs	r3, #16
 8002242:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002244:	2302      	movs	r3, #2
 8002246:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8002248:	2300      	movs	r3, #0
 800224a:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = 8;
 800224c:	2308      	movs	r3, #8
 800224e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 84;
 8002250:	2354      	movs	r3, #84	@ 0x54
 8002252:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8002254:	2302      	movs	r3, #2
 8002256:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8002258:	2302      	movs	r3, #2
 800225a:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 800225c:	2302      	movs	r3, #2
 800225e:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002260:	f107 031c 	add.w	r3, r7, #28
 8002264:	4618      	mov	r0, r3
 8002266:	f001 ffd1 	bl	800420c <HAL_RCC_OscConfig>
 800226a:	4603      	mov	r3, r0
 800226c:	2b00      	cmp	r3, #0
 800226e:	bf14      	ite	ne
 8002270:	2301      	movne	r3, #1
 8002272:	2300      	moveq	r3, #0
 8002274:	b2db      	uxtb	r3, r3
 8002276:	2b00      	cmp	r3, #0
 8002278:	d001      	beq.n	800227e <_Z18SystemClock_Configv+0xa6>
  {
    Error_Handler();
 800227a:	f000 fa95 	bl	80027a8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800227e:	230f      	movs	r3, #15
 8002280:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002282:	2302      	movs	r3, #2
 8002284:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002286:	2300      	movs	r3, #0
 8002288:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 800228a:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 800228e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV4;
 8002290:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8002294:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8002296:	f107 0308 	add.w	r3, r7, #8
 800229a:	2102      	movs	r1, #2
 800229c:	4618      	mov	r0, r3
 800229e:	f001 fc33 	bl	8003b08 <HAL_RCC_ClockConfig>
 80022a2:	4603      	mov	r3, r0
 80022a4:	2b00      	cmp	r3, #0
 80022a6:	bf14      	ite	ne
 80022a8:	2301      	movne	r3, #1
 80022aa:	2300      	moveq	r3, #0
 80022ac:	b2db      	uxtb	r3, r3
 80022ae:	2b00      	cmp	r3, #0
 80022b0:	d001      	beq.n	80022b6 <_Z18SystemClock_Configv+0xde>
  {
    Error_Handler();
 80022b2:	f000 fa79 	bl	80027a8 <Error_Handler>
  }
}
 80022b6:	bf00      	nop
 80022b8:	3750      	adds	r7, #80	@ 0x50
 80022ba:	46bd      	mov	sp, r7
 80022bc:	bd80      	pop	{r7, pc}
 80022be:	bf00      	nop
 80022c0:	40023800 	.word	0x40023800
 80022c4:	40007000 	.word	0x40007000

080022c8 <_ZL12MX_ADC1_Initv>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80022c8:	b580      	push	{r7, lr}
 80022ca:	b084      	sub	sp, #16
 80022cc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80022ce:	463b      	mov	r3, r7
 80022d0:	2200      	movs	r2, #0
 80022d2:	601a      	str	r2, [r3, #0]
 80022d4:	605a      	str	r2, [r3, #4]
 80022d6:	609a      	str	r2, [r3, #8]
 80022d8:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 80022da:	4b26      	ldr	r3, [pc, #152]	@ (8002374 <_ZL12MX_ADC1_Initv+0xac>)
 80022dc:	4a26      	ldr	r2, [pc, #152]	@ (8002378 <_ZL12MX_ADC1_Initv+0xb0>)
 80022de:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 80022e0:	4b24      	ldr	r3, [pc, #144]	@ (8002374 <_ZL12MX_ADC1_Initv+0xac>)
 80022e2:	2200      	movs	r2, #0
 80022e4:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80022e6:	4b23      	ldr	r3, [pc, #140]	@ (8002374 <_ZL12MX_ADC1_Initv+0xac>)
 80022e8:	2200      	movs	r2, #0
 80022ea:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 80022ec:	4b21      	ldr	r3, [pc, #132]	@ (8002374 <_ZL12MX_ADC1_Initv+0xac>)
 80022ee:	2200      	movs	r2, #0
 80022f0:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 80022f2:	4b20      	ldr	r3, [pc, #128]	@ (8002374 <_ZL12MX_ADC1_Initv+0xac>)
 80022f4:	2200      	movs	r2, #0
 80022f6:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80022f8:	4b1e      	ldr	r3, [pc, #120]	@ (8002374 <_ZL12MX_ADC1_Initv+0xac>)
 80022fa:	2200      	movs	r2, #0
 80022fc:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8002300:	4b1c      	ldr	r3, [pc, #112]	@ (8002374 <_ZL12MX_ADC1_Initv+0xac>)
 8002302:	2200      	movs	r2, #0
 8002304:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8002306:	4b1b      	ldr	r3, [pc, #108]	@ (8002374 <_ZL12MX_ADC1_Initv+0xac>)
 8002308:	4a1c      	ldr	r2, [pc, #112]	@ (800237c <_ZL12MX_ADC1_Initv+0xb4>)
 800230a:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800230c:	4b19      	ldr	r3, [pc, #100]	@ (8002374 <_ZL12MX_ADC1_Initv+0xac>)
 800230e:	2200      	movs	r2, #0
 8002310:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8002312:	4b18      	ldr	r3, [pc, #96]	@ (8002374 <_ZL12MX_ADC1_Initv+0xac>)
 8002314:	2201      	movs	r2, #1
 8002316:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8002318:	4b16      	ldr	r3, [pc, #88]	@ (8002374 <_ZL12MX_ADC1_Initv+0xac>)
 800231a:	2200      	movs	r2, #0
 800231c:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8002320:	4b14      	ldr	r3, [pc, #80]	@ (8002374 <_ZL12MX_ADC1_Initv+0xac>)
 8002322:	2201      	movs	r2, #1
 8002324:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8002326:	4813      	ldr	r0, [pc, #76]	@ (8002374 <_ZL12MX_ADC1_Initv+0xac>)
 8002328:	f000 fccc 	bl	8002cc4 <HAL_ADC_Init>
 800232c:	4603      	mov	r3, r0
 800232e:	2b00      	cmp	r3, #0
 8002330:	bf14      	ite	ne
 8002332:	2301      	movne	r3, #1
 8002334:	2300      	moveq	r3, #0
 8002336:	b2db      	uxtb	r3, r3
 8002338:	2b00      	cmp	r3, #0
 800233a:	d001      	beq.n	8002340 <_ZL12MX_ADC1_Initv+0x78>
  {
    Error_Handler();
 800233c:	f000 fa34 	bl	80027a8 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8002340:	2300      	movs	r3, #0
 8002342:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8002344:	2301      	movs	r3, #1
 8002346:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8002348:	2300      	movs	r3, #0
 800234a:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800234c:	463b      	mov	r3, r7
 800234e:	4619      	mov	r1, r3
 8002350:	4808      	ldr	r0, [pc, #32]	@ (8002374 <_ZL12MX_ADC1_Initv+0xac>)
 8002352:	f000 febd 	bl	80030d0 <HAL_ADC_ConfigChannel>
 8002356:	4603      	mov	r3, r0
 8002358:	2b00      	cmp	r3, #0
 800235a:	bf14      	ite	ne
 800235c:	2301      	movne	r3, #1
 800235e:	2300      	moveq	r3, #0
 8002360:	b2db      	uxtb	r3, r3
 8002362:	2b00      	cmp	r3, #0
 8002364:	d001      	beq.n	800236a <_ZL12MX_ADC1_Initv+0xa2>
  {
    Error_Handler();
 8002366:	f000 fa1f 	bl	80027a8 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 800236a:	bf00      	nop
 800236c:	3710      	adds	r7, #16
 800236e:	46bd      	mov	sp, r7
 8002370:	bd80      	pop	{r7, pc}
 8002372:	bf00      	nop
 8002374:	200001f0 	.word	0x200001f0
 8002378:	40012000 	.word	0x40012000
 800237c:	0f000001 	.word	0x0f000001

08002380 <_ZL12MX_SPI1_Initv>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8002380:	b580      	push	{r7, lr}
 8002382:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8002384:	4b1a      	ldr	r3, [pc, #104]	@ (80023f0 <_ZL12MX_SPI1_Initv+0x70>)
 8002386:	4a1b      	ldr	r2, [pc, #108]	@ (80023f4 <_ZL12MX_SPI1_Initv+0x74>)
 8002388:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800238a:	4b19      	ldr	r3, [pc, #100]	@ (80023f0 <_ZL12MX_SPI1_Initv+0x70>)
 800238c:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8002390:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8002392:	4b17      	ldr	r3, [pc, #92]	@ (80023f0 <_ZL12MX_SPI1_Initv+0x70>)
 8002394:	2200      	movs	r2, #0
 8002396:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8002398:	4b15      	ldr	r3, [pc, #84]	@ (80023f0 <_ZL12MX_SPI1_Initv+0x70>)
 800239a:	2200      	movs	r2, #0
 800239c:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 800239e:	4b14      	ldr	r3, [pc, #80]	@ (80023f0 <_ZL12MX_SPI1_Initv+0x70>)
 80023a0:	2200      	movs	r2, #0
 80023a2:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80023a4:	4b12      	ldr	r3, [pc, #72]	@ (80023f0 <_ZL12MX_SPI1_Initv+0x70>)
 80023a6:	2200      	movs	r2, #0
 80023a8:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80023aa:	4b11      	ldr	r3, [pc, #68]	@ (80023f0 <_ZL12MX_SPI1_Initv+0x70>)
 80023ac:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80023b0:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 80023b2:	4b0f      	ldr	r3, [pc, #60]	@ (80023f0 <_ZL12MX_SPI1_Initv+0x70>)
 80023b4:	2218      	movs	r2, #24
 80023b6:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80023b8:	4b0d      	ldr	r3, [pc, #52]	@ (80023f0 <_ZL12MX_SPI1_Initv+0x70>)
 80023ba:	2200      	movs	r2, #0
 80023bc:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80023be:	4b0c      	ldr	r3, [pc, #48]	@ (80023f0 <_ZL12MX_SPI1_Initv+0x70>)
 80023c0:	2200      	movs	r2, #0
 80023c2:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80023c4:	4b0a      	ldr	r3, [pc, #40]	@ (80023f0 <_ZL12MX_SPI1_Initv+0x70>)
 80023c6:	2200      	movs	r2, #0
 80023c8:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 10;
 80023ca:	4b09      	ldr	r3, [pc, #36]	@ (80023f0 <_ZL12MX_SPI1_Initv+0x70>)
 80023cc:	220a      	movs	r2, #10
 80023ce:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80023d0:	4807      	ldr	r0, [pc, #28]	@ (80023f0 <_ZL12MX_SPI1_Initv+0x70>)
 80023d2:	f002 fa61 	bl	8004898 <HAL_SPI_Init>
 80023d6:	4603      	mov	r3, r0
 80023d8:	2b00      	cmp	r3, #0
 80023da:	bf14      	ite	ne
 80023dc:	2301      	movne	r3, #1
 80023de:	2300      	moveq	r3, #0
 80023e0:	b2db      	uxtb	r3, r3
 80023e2:	2b00      	cmp	r3, #0
 80023e4:	d001      	beq.n	80023ea <_ZL12MX_SPI1_Initv+0x6a>
  {
    Error_Handler();
 80023e6:	f000 f9df 	bl	80027a8 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80023ea:	bf00      	nop
 80023ec:	bd80      	pop	{r7, pc}
 80023ee:	bf00      	nop
 80023f0:	20000238 	.word	0x20000238
 80023f4:	40013000 	.word	0x40013000

080023f8 <_ZL12MX_TIM1_Initv>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 80023f8:	b580      	push	{r7, lr}
 80023fa:	b086      	sub	sp, #24
 80023fc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80023fe:	f107 0308 	add.w	r3, r7, #8
 8002402:	2200      	movs	r2, #0
 8002404:	601a      	str	r2, [r3, #0]
 8002406:	605a      	str	r2, [r3, #4]
 8002408:	609a      	str	r2, [r3, #8]
 800240a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800240c:	463b      	mov	r3, r7
 800240e:	2200      	movs	r2, #0
 8002410:	601a      	str	r2, [r3, #0]
 8002412:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8002414:	4b26      	ldr	r3, [pc, #152]	@ (80024b0 <_ZL12MX_TIM1_Initv+0xb8>)
 8002416:	4a27      	ldr	r2, [pc, #156]	@ (80024b4 <_ZL12MX_TIM1_Initv+0xbc>)
 8002418:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 800241a:	4b25      	ldr	r3, [pc, #148]	@ (80024b0 <_ZL12MX_TIM1_Initv+0xb8>)
 800241c:	2200      	movs	r2, #0
 800241e:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002420:	4b23      	ldr	r3, [pc, #140]	@ (80024b0 <_ZL12MX_TIM1_Initv+0xb8>)
 8002422:	2200      	movs	r2, #0
 8002424:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 8002426:	4b22      	ldr	r3, [pc, #136]	@ (80024b0 <_ZL12MX_TIM1_Initv+0xb8>)
 8002428:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800242c:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800242e:	4b20      	ldr	r3, [pc, #128]	@ (80024b0 <_ZL12MX_TIM1_Initv+0xb8>)
 8002430:	2200      	movs	r2, #0
 8002432:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8002434:	4b1e      	ldr	r3, [pc, #120]	@ (80024b0 <_ZL12MX_TIM1_Initv+0xb8>)
 8002436:	2200      	movs	r2, #0
 8002438:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800243a:	4b1d      	ldr	r3, [pc, #116]	@ (80024b0 <_ZL12MX_TIM1_Initv+0xb8>)
 800243c:	2200      	movs	r2, #0
 800243e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8002440:	481b      	ldr	r0, [pc, #108]	@ (80024b0 <_ZL12MX_TIM1_Initv+0xb8>)
 8002442:	f002 fab7 	bl	80049b4 <HAL_TIM_Base_Init>
 8002446:	4603      	mov	r3, r0
 8002448:	2b00      	cmp	r3, #0
 800244a:	bf14      	ite	ne
 800244c:	2301      	movne	r3, #1
 800244e:	2300      	moveq	r3, #0
 8002450:	b2db      	uxtb	r3, r3
 8002452:	2b00      	cmp	r3, #0
 8002454:	d001      	beq.n	800245a <_ZL12MX_TIM1_Initv+0x62>
  {
    Error_Handler();
 8002456:	f000 f9a7 	bl	80027a8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800245a:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800245e:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8002460:	f107 0308 	add.w	r3, r7, #8
 8002464:	4619      	mov	r1, r3
 8002466:	4812      	ldr	r0, [pc, #72]	@ (80024b0 <_ZL12MX_TIM1_Initv+0xb8>)
 8002468:	f002 fd3e 	bl	8004ee8 <HAL_TIM_ConfigClockSource>
 800246c:	4603      	mov	r3, r0
 800246e:	2b00      	cmp	r3, #0
 8002470:	bf14      	ite	ne
 8002472:	2301      	movne	r3, #1
 8002474:	2300      	moveq	r3, #0
 8002476:	b2db      	uxtb	r3, r3
 8002478:	2b00      	cmp	r3, #0
 800247a:	d001      	beq.n	8002480 <_ZL12MX_TIM1_Initv+0x88>
  {
    Error_Handler();
 800247c:	f000 f994 	bl	80027a8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002480:	2300      	movs	r3, #0
 8002482:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002484:	2300      	movs	r3, #0
 8002486:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8002488:	463b      	mov	r3, r7
 800248a:	4619      	mov	r1, r3
 800248c:	4808      	ldr	r0, [pc, #32]	@ (80024b0 <_ZL12MX_TIM1_Initv+0xb8>)
 800248e:	f003 f913 	bl	80056b8 <HAL_TIMEx_MasterConfigSynchronization>
 8002492:	4603      	mov	r3, r0
 8002494:	2b00      	cmp	r3, #0
 8002496:	bf14      	ite	ne
 8002498:	2301      	movne	r3, #1
 800249a:	2300      	moveq	r3, #0
 800249c:	b2db      	uxtb	r3, r3
 800249e:	2b00      	cmp	r3, #0
 80024a0:	d001      	beq.n	80024a6 <_ZL12MX_TIM1_Initv+0xae>
  {
    Error_Handler();
 80024a2:	f000 f981 	bl	80027a8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 80024a6:	bf00      	nop
 80024a8:	3718      	adds	r7, #24
 80024aa:	46bd      	mov	sp, r7
 80024ac:	bd80      	pop	{r7, pc}
 80024ae:	bf00      	nop
 80024b0:	20000290 	.word	0x20000290
 80024b4:	40010000 	.word	0x40010000

080024b8 <_ZL12MX_TIM2_Initv>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80024b8:	b580      	push	{r7, lr}
 80024ba:	b08e      	sub	sp, #56	@ 0x38
 80024bc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80024be:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80024c2:	2200      	movs	r2, #0
 80024c4:	601a      	str	r2, [r3, #0]
 80024c6:	605a      	str	r2, [r3, #4]
 80024c8:	609a      	str	r2, [r3, #8]
 80024ca:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80024cc:	f107 0320 	add.w	r3, r7, #32
 80024d0:	2200      	movs	r2, #0
 80024d2:	601a      	str	r2, [r3, #0]
 80024d4:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80024d6:	1d3b      	adds	r3, r7, #4
 80024d8:	2200      	movs	r2, #0
 80024da:	601a      	str	r2, [r3, #0]
 80024dc:	605a      	str	r2, [r3, #4]
 80024de:	609a      	str	r2, [r3, #8]
 80024e0:	60da      	str	r2, [r3, #12]
 80024e2:	611a      	str	r2, [r3, #16]
 80024e4:	615a      	str	r2, [r3, #20]
 80024e6:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80024e8:	4b39      	ldr	r3, [pc, #228]	@ (80025d0 <_ZL12MX_TIM2_Initv+0x118>)
 80024ea:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80024ee:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 42-1;
 80024f0:	4b37      	ldr	r3, [pc, #220]	@ (80025d0 <_ZL12MX_TIM2_Initv+0x118>)
 80024f2:	2229      	movs	r2, #41	@ 0x29
 80024f4:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80024f6:	4b36      	ldr	r3, [pc, #216]	@ (80025d0 <_ZL12MX_TIM2_Initv+0x118>)
 80024f8:	2200      	movs	r2, #0
 80024fa:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 20000-1;
 80024fc:	4b34      	ldr	r3, [pc, #208]	@ (80025d0 <_ZL12MX_TIM2_Initv+0x118>)
 80024fe:	f644 621f 	movw	r2, #19999	@ 0x4e1f
 8002502:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002504:	4b32      	ldr	r3, [pc, #200]	@ (80025d0 <_ZL12MX_TIM2_Initv+0x118>)
 8002506:	2200      	movs	r2, #0
 8002508:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800250a:	4b31      	ldr	r3, [pc, #196]	@ (80025d0 <_ZL12MX_TIM2_Initv+0x118>)
 800250c:	2200      	movs	r2, #0
 800250e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8002510:	482f      	ldr	r0, [pc, #188]	@ (80025d0 <_ZL12MX_TIM2_Initv+0x118>)
 8002512:	f002 fa4f 	bl	80049b4 <HAL_TIM_Base_Init>
 8002516:	4603      	mov	r3, r0
 8002518:	2b00      	cmp	r3, #0
 800251a:	bf14      	ite	ne
 800251c:	2301      	movne	r3, #1
 800251e:	2300      	moveq	r3, #0
 8002520:	b2db      	uxtb	r3, r3
 8002522:	2b00      	cmp	r3, #0
 8002524:	d001      	beq.n	800252a <_ZL12MX_TIM2_Initv+0x72>
  {
    Error_Handler();
 8002526:	f000 f93f 	bl	80027a8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800252a:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800252e:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8002530:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8002534:	4619      	mov	r1, r3
 8002536:	4826      	ldr	r0, [pc, #152]	@ (80025d0 <_ZL12MX_TIM2_Initv+0x118>)
 8002538:	f002 fcd6 	bl	8004ee8 <HAL_TIM_ConfigClockSource>
 800253c:	4603      	mov	r3, r0
 800253e:	2b00      	cmp	r3, #0
 8002540:	bf14      	ite	ne
 8002542:	2301      	movne	r3, #1
 8002544:	2300      	moveq	r3, #0
 8002546:	b2db      	uxtb	r3, r3
 8002548:	2b00      	cmp	r3, #0
 800254a:	d001      	beq.n	8002550 <_ZL12MX_TIM2_Initv+0x98>
  {
    Error_Handler();
 800254c:	f000 f92c 	bl	80027a8 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8002550:	481f      	ldr	r0, [pc, #124]	@ (80025d0 <_ZL12MX_TIM2_Initv+0x118>)
 8002552:	f002 faef 	bl	8004b34 <HAL_TIM_PWM_Init>
 8002556:	4603      	mov	r3, r0
 8002558:	2b00      	cmp	r3, #0
 800255a:	bf14      	ite	ne
 800255c:	2301      	movne	r3, #1
 800255e:	2300      	moveq	r3, #0
 8002560:	b2db      	uxtb	r3, r3
 8002562:	2b00      	cmp	r3, #0
 8002564:	d001      	beq.n	800256a <_ZL12MX_TIM2_Initv+0xb2>
  {
    Error_Handler();
 8002566:	f000 f91f 	bl	80027a8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800256a:	2300      	movs	r3, #0
 800256c:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800256e:	2300      	movs	r3, #0
 8002570:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8002572:	f107 0320 	add.w	r3, r7, #32
 8002576:	4619      	mov	r1, r3
 8002578:	4815      	ldr	r0, [pc, #84]	@ (80025d0 <_ZL12MX_TIM2_Initv+0x118>)
 800257a:	f003 f89d 	bl	80056b8 <HAL_TIMEx_MasterConfigSynchronization>
 800257e:	4603      	mov	r3, r0
 8002580:	2b00      	cmp	r3, #0
 8002582:	bf14      	ite	ne
 8002584:	2301      	movne	r3, #1
 8002586:	2300      	moveq	r3, #0
 8002588:	b2db      	uxtb	r3, r3
 800258a:	2b00      	cmp	r3, #0
 800258c:	d001      	beq.n	8002592 <_ZL12MX_TIM2_Initv+0xda>
  {
    Error_Handler();
 800258e:	f000 f90b 	bl	80027a8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002592:	2360      	movs	r3, #96	@ 0x60
 8002594:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8002596:	2300      	movs	r3, #0
 8002598:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800259a:	2300      	movs	r3, #0
 800259c:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800259e:	2300      	movs	r3, #0
 80025a0:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80025a2:	1d3b      	adds	r3, r7, #4
 80025a4:	2200      	movs	r2, #0
 80025a6:	4619      	mov	r1, r3
 80025a8:	4809      	ldr	r0, [pc, #36]	@ (80025d0 <_ZL12MX_TIM2_Initv+0x118>)
 80025aa:	f002 fbdb 	bl	8004d64 <HAL_TIM_PWM_ConfigChannel>
 80025ae:	4603      	mov	r3, r0
 80025b0:	2b00      	cmp	r3, #0
 80025b2:	bf14      	ite	ne
 80025b4:	2301      	movne	r3, #1
 80025b6:	2300      	moveq	r3, #0
 80025b8:	b2db      	uxtb	r3, r3
 80025ba:	2b00      	cmp	r3, #0
 80025bc:	d001      	beq.n	80025c2 <_ZL12MX_TIM2_Initv+0x10a>
  {
    Error_Handler();
 80025be:	f000 f8f3 	bl	80027a8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 80025c2:	4803      	ldr	r0, [pc, #12]	@ (80025d0 <_ZL12MX_TIM2_Initv+0x118>)
 80025c4:	f000 f9e0 	bl	8002988 <HAL_TIM_MspPostInit>

}
 80025c8:	bf00      	nop
 80025ca:	3738      	adds	r7, #56	@ 0x38
 80025cc:	46bd      	mov	sp, r7
 80025ce:	bd80      	pop	{r7, pc}
 80025d0:	200002d8 	.word	0x200002d8

080025d4 <_ZL19MX_USART2_UART_Initv>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80025d4:	b580      	push	{r7, lr}
 80025d6:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80025d8:	4b13      	ldr	r3, [pc, #76]	@ (8002628 <_ZL19MX_USART2_UART_Initv+0x54>)
 80025da:	4a14      	ldr	r2, [pc, #80]	@ (800262c <_ZL19MX_USART2_UART_Initv+0x58>)
 80025dc:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80025de:	4b12      	ldr	r3, [pc, #72]	@ (8002628 <_ZL19MX_USART2_UART_Initv+0x54>)
 80025e0:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80025e4:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80025e6:	4b10      	ldr	r3, [pc, #64]	@ (8002628 <_ZL19MX_USART2_UART_Initv+0x54>)
 80025e8:	2200      	movs	r2, #0
 80025ea:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80025ec:	4b0e      	ldr	r3, [pc, #56]	@ (8002628 <_ZL19MX_USART2_UART_Initv+0x54>)
 80025ee:	2200      	movs	r2, #0
 80025f0:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80025f2:	4b0d      	ldr	r3, [pc, #52]	@ (8002628 <_ZL19MX_USART2_UART_Initv+0x54>)
 80025f4:	2200      	movs	r2, #0
 80025f6:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80025f8:	4b0b      	ldr	r3, [pc, #44]	@ (8002628 <_ZL19MX_USART2_UART_Initv+0x54>)
 80025fa:	220c      	movs	r2, #12
 80025fc:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80025fe:	4b0a      	ldr	r3, [pc, #40]	@ (8002628 <_ZL19MX_USART2_UART_Initv+0x54>)
 8002600:	2200      	movs	r2, #0
 8002602:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8002604:	4b08      	ldr	r3, [pc, #32]	@ (8002628 <_ZL19MX_USART2_UART_Initv+0x54>)
 8002606:	2200      	movs	r2, #0
 8002608:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800260a:	4807      	ldr	r0, [pc, #28]	@ (8002628 <_ZL19MX_USART2_UART_Initv+0x54>)
 800260c:	f003 f8d0 	bl	80057b0 <HAL_UART_Init>
 8002610:	4603      	mov	r3, r0
 8002612:	2b00      	cmp	r3, #0
 8002614:	bf14      	ite	ne
 8002616:	2301      	movne	r3, #1
 8002618:	2300      	moveq	r3, #0
 800261a:	b2db      	uxtb	r3, r3
 800261c:	2b00      	cmp	r3, #0
 800261e:	d001      	beq.n	8002624 <_ZL19MX_USART2_UART_Initv+0x50>
  {
    Error_Handler();
 8002620:	f000 f8c2 	bl	80027a8 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8002624:	bf00      	nop
 8002626:	bd80      	pop	{r7, pc}
 8002628:	20000320 	.word	0x20000320
 800262c:	40004400 	.word	0x40004400

08002630 <_ZL12MX_GPIO_Initv>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8002630:	b580      	push	{r7, lr}
 8002632:	b08a      	sub	sp, #40	@ 0x28
 8002634:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002636:	f107 0314 	add.w	r3, r7, #20
 800263a:	2200      	movs	r2, #0
 800263c:	601a      	str	r2, [r3, #0]
 800263e:	605a      	str	r2, [r3, #4]
 8002640:	609a      	str	r2, [r3, #8]
 8002642:	60da      	str	r2, [r3, #12]
 8002644:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002646:	2300      	movs	r3, #0
 8002648:	613b      	str	r3, [r7, #16]
 800264a:	4b53      	ldr	r3, [pc, #332]	@ (8002798 <_ZL12MX_GPIO_Initv+0x168>)
 800264c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800264e:	4a52      	ldr	r2, [pc, #328]	@ (8002798 <_ZL12MX_GPIO_Initv+0x168>)
 8002650:	f043 0304 	orr.w	r3, r3, #4
 8002654:	6313      	str	r3, [r2, #48]	@ 0x30
 8002656:	4b50      	ldr	r3, [pc, #320]	@ (8002798 <_ZL12MX_GPIO_Initv+0x168>)
 8002658:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800265a:	f003 0304 	and.w	r3, r3, #4
 800265e:	613b      	str	r3, [r7, #16]
 8002660:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8002662:	2300      	movs	r3, #0
 8002664:	60fb      	str	r3, [r7, #12]
 8002666:	4b4c      	ldr	r3, [pc, #304]	@ (8002798 <_ZL12MX_GPIO_Initv+0x168>)
 8002668:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800266a:	4a4b      	ldr	r2, [pc, #300]	@ (8002798 <_ZL12MX_GPIO_Initv+0x168>)
 800266c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002670:	6313      	str	r3, [r2, #48]	@ 0x30
 8002672:	4b49      	ldr	r3, [pc, #292]	@ (8002798 <_ZL12MX_GPIO_Initv+0x168>)
 8002674:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002676:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800267a:	60fb      	str	r3, [r7, #12]
 800267c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800267e:	2300      	movs	r3, #0
 8002680:	60bb      	str	r3, [r7, #8]
 8002682:	4b45      	ldr	r3, [pc, #276]	@ (8002798 <_ZL12MX_GPIO_Initv+0x168>)
 8002684:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002686:	4a44      	ldr	r2, [pc, #272]	@ (8002798 <_ZL12MX_GPIO_Initv+0x168>)
 8002688:	f043 0301 	orr.w	r3, r3, #1
 800268c:	6313      	str	r3, [r2, #48]	@ 0x30
 800268e:	4b42      	ldr	r3, [pc, #264]	@ (8002798 <_ZL12MX_GPIO_Initv+0x168>)
 8002690:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002692:	f003 0301 	and.w	r3, r3, #1
 8002696:	60bb      	str	r3, [r7, #8]
 8002698:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800269a:	2300      	movs	r3, #0
 800269c:	607b      	str	r3, [r7, #4]
 800269e:	4b3e      	ldr	r3, [pc, #248]	@ (8002798 <_ZL12MX_GPIO_Initv+0x168>)
 80026a0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80026a2:	4a3d      	ldr	r2, [pc, #244]	@ (8002798 <_ZL12MX_GPIO_Initv+0x168>)
 80026a4:	f043 0302 	orr.w	r3, r3, #2
 80026a8:	6313      	str	r3, [r2, #48]	@ 0x30
 80026aa:	4b3b      	ldr	r3, [pc, #236]	@ (8002798 <_ZL12MX_GPIO_Initv+0x168>)
 80026ac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80026ae:	f003 0302 	and.w	r3, r3, #2
 80026b2:	607b      	str	r3, [r7, #4]
 80026b4:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_7, GPIO_PIN_RESET);
 80026b6:	2200      	movs	r2, #0
 80026b8:	2180      	movs	r1, #128	@ 0x80
 80026ba:	4838      	ldr	r0, [pc, #224]	@ (800279c <_ZL12MX_GPIO_Initv+0x16c>)
 80026bc:	f001 f9e0 	bl	8003a80 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, GPIO_PIN_RESET);
 80026c0:	2200      	movs	r2, #0
 80026c2:	2140      	movs	r1, #64	@ 0x40
 80026c4:	4836      	ldr	r0, [pc, #216]	@ (80027a0 <_ZL12MX_GPIO_Initv+0x170>)
 80026c6:	f001 f9db 	bl	8003a80 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80026ca:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80026ce:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80026d0:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 80026d4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80026d6:	2300      	movs	r3, #0
 80026d8:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80026da:	f107 0314 	add.w	r3, r7, #20
 80026de:	4619      	mov	r1, r3
 80026e0:	482e      	ldr	r0, [pc, #184]	@ (800279c <_ZL12MX_GPIO_Initv+0x16c>)
 80026e2:	f001 f839 	bl	8003758 <HAL_GPIO_Init>

  /*Configure GPIO pin : PC7 */
  GPIO_InitStruct.Pin = GPIO_PIN_7;
 80026e6:	2380      	movs	r3, #128	@ 0x80
 80026e8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 80026ea:	2311      	movs	r3, #17
 80026ec:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80026ee:	2300      	movs	r3, #0
 80026f0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
 80026f2:	2301      	movs	r3, #1
 80026f4:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80026f6:	f107 0314 	add.w	r3, r7, #20
 80026fa:	4619      	mov	r1, r3
 80026fc:	4827      	ldr	r0, [pc, #156]	@ (800279c <_ZL12MX_GPIO_Initv+0x16c>)
 80026fe:	f001 f82b 	bl	8003758 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA8 */
  GPIO_InitStruct.Pin = GPIO_PIN_8;
 8002702:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8002706:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8002708:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 800270c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800270e:	2300      	movs	r3, #0
 8002710:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002712:	f107 0314 	add.w	r3, r7, #20
 8002716:	4619      	mov	r1, r3
 8002718:	4822      	ldr	r0, [pc, #136]	@ (80027a4 <_ZL12MX_GPIO_Initv+0x174>)
 800271a:	f001 f81d 	bl	8003758 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA9 */
  GPIO_InitStruct.Pin = GPIO_PIN_9;
 800271e:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8002722:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002724:	2300      	movs	r3, #0
 8002726:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002728:	2300      	movs	r3, #0
 800272a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800272c:	f107 0314 	add.w	r3, r7, #20
 8002730:	4619      	mov	r1, r3
 8002732:	481c      	ldr	r0, [pc, #112]	@ (80027a4 <_ZL12MX_GPIO_Initv+0x174>)
 8002734:	f001 f810 	bl	8003758 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB6 */
  GPIO_InitStruct.Pin = GPIO_PIN_6;
 8002738:	2340      	movs	r3, #64	@ 0x40
 800273a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800273c:	2301      	movs	r3, #1
 800273e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002740:	2300      	movs	r3, #0
 8002742:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002744:	2303      	movs	r3, #3
 8002746:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002748:	f107 0314 	add.w	r3, r7, #20
 800274c:	4619      	mov	r1, r3
 800274e:	4814      	ldr	r0, [pc, #80]	@ (80027a0 <_ZL12MX_GPIO_Initv+0x170>)
 8002750:	f001 f802 	bl	8003758 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 8002754:	2200      	movs	r2, #0
 8002756:	2100      	movs	r1, #0
 8002758:	2017      	movs	r0, #23
 800275a:	f000 ffc6 	bl	80036ea <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 800275e:	2017      	movs	r0, #23
 8002760:	f000 ffdf 	bl	8003722 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8002764:	2200      	movs	r2, #0
 8002766:	2100      	movs	r1, #0
 8002768:	2028      	movs	r0, #40	@ 0x28
 800276a:	f000 ffbe 	bl	80036ea <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 800276e:	2028      	movs	r0, #40	@ 0x28
 8002770:	f000 ffd7 	bl	8003722 <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12, GPIO_PIN_SET); // CS auf High
 8002774:	2201      	movs	r2, #1
 8002776:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 800277a:	4809      	ldr	r0, [pc, #36]	@ (80027a0 <_ZL12MX_GPIO_Initv+0x170>)
 800277c:	f001 f980 	bl	8003a80 <HAL_GPIO_WritePin>
	HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);  // Set priority
 8002780:	2200      	movs	r2, #0
 8002782:	2100      	movs	r1, #0
 8002784:	2017      	movs	r0, #23
 8002786:	f000 ffb0 	bl	80036ea <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);           // Enable the IRQ line for EXTI
 800278a:	2017      	movs	r0, #23
 800278c:	f000 ffc9 	bl	8003722 <HAL_NVIC_EnableIRQ>
/* USER CODE END MX_GPIO_Init_2 */
}
 8002790:	bf00      	nop
 8002792:	3728      	adds	r7, #40	@ 0x28
 8002794:	46bd      	mov	sp, r7
 8002796:	bd80      	pop	{r7, pc}
 8002798:	40023800 	.word	0x40023800
 800279c:	40020800 	.word	0x40020800
 80027a0:	40020400 	.word	0x40020400
 80027a4:	40020000 	.word	0x40020000

080027a8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80027a8:	b480      	push	{r7}
 80027aa:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80027ac:	b672      	cpsid	i
}
 80027ae:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1)
 80027b0:	bf00      	nop
 80027b2:	e7fd      	b.n	80027b0 <Error_Handler+0x8>

080027b4 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80027b4:	b580      	push	{r7, lr}
 80027b6:	b082      	sub	sp, #8
 80027b8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80027ba:	2300      	movs	r3, #0
 80027bc:	607b      	str	r3, [r7, #4]
 80027be:	4b10      	ldr	r3, [pc, #64]	@ (8002800 <HAL_MspInit+0x4c>)
 80027c0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80027c2:	4a0f      	ldr	r2, [pc, #60]	@ (8002800 <HAL_MspInit+0x4c>)
 80027c4:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80027c8:	6453      	str	r3, [r2, #68]	@ 0x44
 80027ca:	4b0d      	ldr	r3, [pc, #52]	@ (8002800 <HAL_MspInit+0x4c>)
 80027cc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80027ce:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80027d2:	607b      	str	r3, [r7, #4]
 80027d4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80027d6:	2300      	movs	r3, #0
 80027d8:	603b      	str	r3, [r7, #0]
 80027da:	4b09      	ldr	r3, [pc, #36]	@ (8002800 <HAL_MspInit+0x4c>)
 80027dc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80027de:	4a08      	ldr	r2, [pc, #32]	@ (8002800 <HAL_MspInit+0x4c>)
 80027e0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80027e4:	6413      	str	r3, [r2, #64]	@ 0x40
 80027e6:	4b06      	ldr	r3, [pc, #24]	@ (8002800 <HAL_MspInit+0x4c>)
 80027e8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80027ea:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80027ee:	603b      	str	r3, [r7, #0]
 80027f0:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 80027f2:	2007      	movs	r0, #7
 80027f4:	f000 ff6e 	bl	80036d4 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80027f8:	bf00      	nop
 80027fa:	3708      	adds	r7, #8
 80027fc:	46bd      	mov	sp, r7
 80027fe:	bd80      	pop	{r7, pc}
 8002800:	40023800 	.word	0x40023800

08002804 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8002804:	b580      	push	{r7, lr}
 8002806:	b08a      	sub	sp, #40	@ 0x28
 8002808:	af00      	add	r7, sp, #0
 800280a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800280c:	f107 0314 	add.w	r3, r7, #20
 8002810:	2200      	movs	r2, #0
 8002812:	601a      	str	r2, [r3, #0]
 8002814:	605a      	str	r2, [r3, #4]
 8002816:	609a      	str	r2, [r3, #8]
 8002818:	60da      	str	r2, [r3, #12]
 800281a:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	681b      	ldr	r3, [r3, #0]
 8002820:	4a17      	ldr	r2, [pc, #92]	@ (8002880 <HAL_ADC_MspInit+0x7c>)
 8002822:	4293      	cmp	r3, r2
 8002824:	d127      	bne.n	8002876 <HAL_ADC_MspInit+0x72>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8002826:	2300      	movs	r3, #0
 8002828:	613b      	str	r3, [r7, #16]
 800282a:	4b16      	ldr	r3, [pc, #88]	@ (8002884 <HAL_ADC_MspInit+0x80>)
 800282c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800282e:	4a15      	ldr	r2, [pc, #84]	@ (8002884 <HAL_ADC_MspInit+0x80>)
 8002830:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002834:	6453      	str	r3, [r2, #68]	@ 0x44
 8002836:	4b13      	ldr	r3, [pc, #76]	@ (8002884 <HAL_ADC_MspInit+0x80>)
 8002838:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800283a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800283e:	613b      	str	r3, [r7, #16]
 8002840:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002842:	2300      	movs	r3, #0
 8002844:	60fb      	str	r3, [r7, #12]
 8002846:	4b0f      	ldr	r3, [pc, #60]	@ (8002884 <HAL_ADC_MspInit+0x80>)
 8002848:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800284a:	4a0e      	ldr	r2, [pc, #56]	@ (8002884 <HAL_ADC_MspInit+0x80>)
 800284c:	f043 0301 	orr.w	r3, r3, #1
 8002850:	6313      	str	r3, [r2, #48]	@ 0x30
 8002852:	4b0c      	ldr	r3, [pc, #48]	@ (8002884 <HAL_ADC_MspInit+0x80>)
 8002854:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002856:	f003 0301 	and.w	r3, r3, #1
 800285a:	60fb      	str	r3, [r7, #12]
 800285c:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA0-WKUP     ------> ADC1_IN0
    PA1     ------> ADC1_IN1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 800285e:	2303      	movs	r3, #3
 8002860:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002862:	2303      	movs	r3, #3
 8002864:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002866:	2300      	movs	r3, #0
 8002868:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800286a:	f107 0314 	add.w	r3, r7, #20
 800286e:	4619      	mov	r1, r3
 8002870:	4805      	ldr	r0, [pc, #20]	@ (8002888 <HAL_ADC_MspInit+0x84>)
 8002872:	f000 ff71 	bl	8003758 <HAL_GPIO_Init>

  /* USER CODE END ADC1_MspInit 1 */

  }

}
 8002876:	bf00      	nop
 8002878:	3728      	adds	r7, #40	@ 0x28
 800287a:	46bd      	mov	sp, r7
 800287c:	bd80      	pop	{r7, pc}
 800287e:	bf00      	nop
 8002880:	40012000 	.word	0x40012000
 8002884:	40023800 	.word	0x40023800
 8002888:	40020000 	.word	0x40020000

0800288c <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 800288c:	b580      	push	{r7, lr}
 800288e:	b08a      	sub	sp, #40	@ 0x28
 8002890:	af00      	add	r7, sp, #0
 8002892:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002894:	f107 0314 	add.w	r3, r7, #20
 8002898:	2200      	movs	r2, #0
 800289a:	601a      	str	r2, [r3, #0]
 800289c:	605a      	str	r2, [r3, #4]
 800289e:	609a      	str	r2, [r3, #8]
 80028a0:	60da      	str	r2, [r3, #12]
 80028a2:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	681b      	ldr	r3, [r3, #0]
 80028a8:	4a19      	ldr	r2, [pc, #100]	@ (8002910 <HAL_SPI_MspInit+0x84>)
 80028aa:	4293      	cmp	r3, r2
 80028ac:	d12b      	bne.n	8002906 <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80028ae:	2300      	movs	r3, #0
 80028b0:	613b      	str	r3, [r7, #16]
 80028b2:	4b18      	ldr	r3, [pc, #96]	@ (8002914 <HAL_SPI_MspInit+0x88>)
 80028b4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80028b6:	4a17      	ldr	r2, [pc, #92]	@ (8002914 <HAL_SPI_MspInit+0x88>)
 80028b8:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 80028bc:	6453      	str	r3, [r2, #68]	@ 0x44
 80028be:	4b15      	ldr	r3, [pc, #84]	@ (8002914 <HAL_SPI_MspInit+0x88>)
 80028c0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80028c2:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80028c6:	613b      	str	r3, [r7, #16]
 80028c8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80028ca:	2300      	movs	r3, #0
 80028cc:	60fb      	str	r3, [r7, #12]
 80028ce:	4b11      	ldr	r3, [pc, #68]	@ (8002914 <HAL_SPI_MspInit+0x88>)
 80028d0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80028d2:	4a10      	ldr	r2, [pc, #64]	@ (8002914 <HAL_SPI_MspInit+0x88>)
 80028d4:	f043 0301 	orr.w	r3, r3, #1
 80028d8:	6313      	str	r3, [r2, #48]	@ 0x30
 80028da:	4b0e      	ldr	r3, [pc, #56]	@ (8002914 <HAL_SPI_MspInit+0x88>)
 80028dc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80028de:	f003 0301 	and.w	r3, r3, #1
 80028e2:	60fb      	str	r3, [r7, #12]
 80028e4:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 80028e6:	23e0      	movs	r3, #224	@ 0xe0
 80028e8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80028ea:	2302      	movs	r3, #2
 80028ec:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80028ee:	2302      	movs	r3, #2
 80028f0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80028f2:	2303      	movs	r3, #3
 80028f4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80028f6:	2305      	movs	r3, #5
 80028f8:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80028fa:	f107 0314 	add.w	r3, r7, #20
 80028fe:	4619      	mov	r1, r3
 8002900:	4805      	ldr	r0, [pc, #20]	@ (8002918 <HAL_SPI_MspInit+0x8c>)
 8002902:	f000 ff29 	bl	8003758 <HAL_GPIO_Init>

  /* USER CODE END SPI1_MspInit 1 */

  }

}
 8002906:	bf00      	nop
 8002908:	3728      	adds	r7, #40	@ 0x28
 800290a:	46bd      	mov	sp, r7
 800290c:	bd80      	pop	{r7, pc}
 800290e:	bf00      	nop
 8002910:	40013000 	.word	0x40013000
 8002914:	40023800 	.word	0x40023800
 8002918:	40020000 	.word	0x40020000

0800291c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 800291c:	b480      	push	{r7}
 800291e:	b085      	sub	sp, #20
 8002920:	af00      	add	r7, sp, #0
 8002922:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	681b      	ldr	r3, [r3, #0]
 8002928:	4a15      	ldr	r2, [pc, #84]	@ (8002980 <HAL_TIM_Base_MspInit+0x64>)
 800292a:	4293      	cmp	r3, r2
 800292c:	d10e      	bne.n	800294c <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800292e:	2300      	movs	r3, #0
 8002930:	60fb      	str	r3, [r7, #12]
 8002932:	4b14      	ldr	r3, [pc, #80]	@ (8002984 <HAL_TIM_Base_MspInit+0x68>)
 8002934:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002936:	4a13      	ldr	r2, [pc, #76]	@ (8002984 <HAL_TIM_Base_MspInit+0x68>)
 8002938:	f043 0301 	orr.w	r3, r3, #1
 800293c:	6453      	str	r3, [r2, #68]	@ 0x44
 800293e:	4b11      	ldr	r3, [pc, #68]	@ (8002984 <HAL_TIM_Base_MspInit+0x68>)
 8002940:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002942:	f003 0301 	and.w	r3, r3, #1
 8002946:	60fb      	str	r3, [r7, #12]
 8002948:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 800294a:	e012      	b.n	8002972 <HAL_TIM_Base_MspInit+0x56>
  else if(htim_base->Instance==TIM2)
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	681b      	ldr	r3, [r3, #0]
 8002950:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002954:	d10d      	bne.n	8002972 <HAL_TIM_Base_MspInit+0x56>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8002956:	2300      	movs	r3, #0
 8002958:	60bb      	str	r3, [r7, #8]
 800295a:	4b0a      	ldr	r3, [pc, #40]	@ (8002984 <HAL_TIM_Base_MspInit+0x68>)
 800295c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800295e:	4a09      	ldr	r2, [pc, #36]	@ (8002984 <HAL_TIM_Base_MspInit+0x68>)
 8002960:	f043 0301 	orr.w	r3, r3, #1
 8002964:	6413      	str	r3, [r2, #64]	@ 0x40
 8002966:	4b07      	ldr	r3, [pc, #28]	@ (8002984 <HAL_TIM_Base_MspInit+0x68>)
 8002968:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800296a:	f003 0301 	and.w	r3, r3, #1
 800296e:	60bb      	str	r3, [r7, #8]
 8002970:	68bb      	ldr	r3, [r7, #8]
}
 8002972:	bf00      	nop
 8002974:	3714      	adds	r7, #20
 8002976:	46bd      	mov	sp, r7
 8002978:	f85d 7b04 	ldr.w	r7, [sp], #4
 800297c:	4770      	bx	lr
 800297e:	bf00      	nop
 8002980:	40010000 	.word	0x40010000
 8002984:	40023800 	.word	0x40023800

08002988 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8002988:	b580      	push	{r7, lr}
 800298a:	b088      	sub	sp, #32
 800298c:	af00      	add	r7, sp, #0
 800298e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002990:	f107 030c 	add.w	r3, r7, #12
 8002994:	2200      	movs	r2, #0
 8002996:	601a      	str	r2, [r3, #0]
 8002998:	605a      	str	r2, [r3, #4]
 800299a:	609a      	str	r2, [r3, #8]
 800299c:	60da      	str	r2, [r3, #12]
 800299e:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM2)
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	681b      	ldr	r3, [r3, #0]
 80029a4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80029a8:	d11e      	bne.n	80029e8 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80029aa:	2300      	movs	r3, #0
 80029ac:	60bb      	str	r3, [r7, #8]
 80029ae:	4b10      	ldr	r3, [pc, #64]	@ (80029f0 <HAL_TIM_MspPostInit+0x68>)
 80029b0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80029b2:	4a0f      	ldr	r2, [pc, #60]	@ (80029f0 <HAL_TIM_MspPostInit+0x68>)
 80029b4:	f043 0301 	orr.w	r3, r3, #1
 80029b8:	6313      	str	r3, [r2, #48]	@ 0x30
 80029ba:	4b0d      	ldr	r3, [pc, #52]	@ (80029f0 <HAL_TIM_MspPostInit+0x68>)
 80029bc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80029be:	f003 0301 	and.w	r3, r3, #1
 80029c2:	60bb      	str	r3, [r7, #8]
 80029c4:	68bb      	ldr	r3, [r7, #8]
    /**TIM2 GPIO Configuration
    PA15     ------> TIM2_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 80029c6:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80029ca:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80029cc:	2302      	movs	r3, #2
 80029ce:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80029d0:	2300      	movs	r3, #0
 80029d2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80029d4:	2300      	movs	r3, #0
 80029d6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 80029d8:	2301      	movs	r3, #1
 80029da:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80029dc:	f107 030c 	add.w	r3, r7, #12
 80029e0:	4619      	mov	r1, r3
 80029e2:	4804      	ldr	r0, [pc, #16]	@ (80029f4 <HAL_TIM_MspPostInit+0x6c>)
 80029e4:	f000 feb8 	bl	8003758 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 80029e8:	bf00      	nop
 80029ea:	3720      	adds	r7, #32
 80029ec:	46bd      	mov	sp, r7
 80029ee:	bd80      	pop	{r7, pc}
 80029f0:	40023800 	.word	0x40023800
 80029f4:	40020000 	.word	0x40020000

080029f8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80029f8:	b580      	push	{r7, lr}
 80029fa:	b08a      	sub	sp, #40	@ 0x28
 80029fc:	af00      	add	r7, sp, #0
 80029fe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002a00:	f107 0314 	add.w	r3, r7, #20
 8002a04:	2200      	movs	r2, #0
 8002a06:	601a      	str	r2, [r3, #0]
 8002a08:	605a      	str	r2, [r3, #4]
 8002a0a:	609a      	str	r2, [r3, #8]
 8002a0c:	60da      	str	r2, [r3, #12]
 8002a0e:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	681b      	ldr	r3, [r3, #0]
 8002a14:	4a19      	ldr	r2, [pc, #100]	@ (8002a7c <HAL_UART_MspInit+0x84>)
 8002a16:	4293      	cmp	r3, r2
 8002a18:	d12b      	bne.n	8002a72 <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8002a1a:	2300      	movs	r3, #0
 8002a1c:	613b      	str	r3, [r7, #16]
 8002a1e:	4b18      	ldr	r3, [pc, #96]	@ (8002a80 <HAL_UART_MspInit+0x88>)
 8002a20:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002a22:	4a17      	ldr	r2, [pc, #92]	@ (8002a80 <HAL_UART_MspInit+0x88>)
 8002a24:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002a28:	6413      	str	r3, [r2, #64]	@ 0x40
 8002a2a:	4b15      	ldr	r3, [pc, #84]	@ (8002a80 <HAL_UART_MspInit+0x88>)
 8002a2c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002a2e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002a32:	613b      	str	r3, [r7, #16]
 8002a34:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002a36:	2300      	movs	r3, #0
 8002a38:	60fb      	str	r3, [r7, #12]
 8002a3a:	4b11      	ldr	r3, [pc, #68]	@ (8002a80 <HAL_UART_MspInit+0x88>)
 8002a3c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002a3e:	4a10      	ldr	r2, [pc, #64]	@ (8002a80 <HAL_UART_MspInit+0x88>)
 8002a40:	f043 0301 	orr.w	r3, r3, #1
 8002a44:	6313      	str	r3, [r2, #48]	@ 0x30
 8002a46:	4b0e      	ldr	r3, [pc, #56]	@ (8002a80 <HAL_UART_MspInit+0x88>)
 8002a48:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002a4a:	f003 0301 	and.w	r3, r3, #1
 8002a4e:	60fb      	str	r3, [r7, #12]
 8002a50:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8002a52:	230c      	movs	r3, #12
 8002a54:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002a56:	2302      	movs	r3, #2
 8002a58:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a5a:	2300      	movs	r3, #0
 8002a5c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002a5e:	2303      	movs	r3, #3
 8002a60:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8002a62:	2307      	movs	r3, #7
 8002a64:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002a66:	f107 0314 	add.w	r3, r7, #20
 8002a6a:	4619      	mov	r1, r3
 8002a6c:	4805      	ldr	r0, [pc, #20]	@ (8002a84 <HAL_UART_MspInit+0x8c>)
 8002a6e:	f000 fe73 	bl	8003758 <HAL_GPIO_Init>

  /* USER CODE END USART2_MspInit 1 */

  }

}
 8002a72:	bf00      	nop
 8002a74:	3728      	adds	r7, #40	@ 0x28
 8002a76:	46bd      	mov	sp, r7
 8002a78:	bd80      	pop	{r7, pc}
 8002a7a:	bf00      	nop
 8002a7c:	40004400 	.word	0x40004400
 8002a80:	40023800 	.word	0x40023800
 8002a84:	40020000 	.word	0x40020000

08002a88 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002a88:	b480      	push	{r7}
 8002a8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8002a8c:	bf00      	nop
 8002a8e:	e7fd      	b.n	8002a8c <NMI_Handler+0x4>

08002a90 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002a90:	b480      	push	{r7}
 8002a92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002a94:	bf00      	nop
 8002a96:	e7fd      	b.n	8002a94 <HardFault_Handler+0x4>

08002a98 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002a98:	b480      	push	{r7}
 8002a9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002a9c:	bf00      	nop
 8002a9e:	e7fd      	b.n	8002a9c <MemManage_Handler+0x4>

08002aa0 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002aa0:	b480      	push	{r7}
 8002aa2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002aa4:	bf00      	nop
 8002aa6:	e7fd      	b.n	8002aa4 <BusFault_Handler+0x4>

08002aa8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002aa8:	b480      	push	{r7}
 8002aaa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002aac:	bf00      	nop
 8002aae:	e7fd      	b.n	8002aac <UsageFault_Handler+0x4>

08002ab0 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002ab0:	b480      	push	{r7}
 8002ab2:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002ab4:	bf00      	nop
 8002ab6:	46bd      	mov	sp, r7
 8002ab8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002abc:	4770      	bx	lr

08002abe <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002abe:	b480      	push	{r7}
 8002ac0:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002ac2:	bf00      	nop
 8002ac4:	46bd      	mov	sp, r7
 8002ac6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002aca:	4770      	bx	lr

08002acc <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002acc:	b480      	push	{r7}
 8002ace:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002ad0:	bf00      	nop
 8002ad2:	46bd      	mov	sp, r7
 8002ad4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ad8:	4770      	bx	lr

08002ada <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002ada:	b580      	push	{r7, lr}
 8002adc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002ade:	f000 f8a7 	bl	8002c30 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002ae2:	bf00      	nop
 8002ae4:	bd80      	pop	{r7, pc}

08002ae6 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8002ae6:	b580      	push	{r7, lr}
 8002ae8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_8);
 8002aea:	f44f 7080 	mov.w	r0, #256	@ 0x100
 8002aee:	f000 ffe1 	bl	8003ab4 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8002af2:	bf00      	nop
 8002af4:	bd80      	pop	{r7, pc}

08002af6 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8002af6:	b580      	push	{r7, lr}
 8002af8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 8002afa:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 8002afe:	f000 ffd9 	bl	8003ab4 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8002b02:	bf00      	nop
 8002b04:	bd80      	pop	{r7, pc}
	...

08002b08 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002b08:	b480      	push	{r7}
 8002b0a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002b0c:	4b06      	ldr	r3, [pc, #24]	@ (8002b28 <SystemInit+0x20>)
 8002b0e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002b12:	4a05      	ldr	r2, [pc, #20]	@ (8002b28 <SystemInit+0x20>)
 8002b14:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8002b18:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002b1c:	bf00      	nop
 8002b1e:	46bd      	mov	sp, r7
 8002b20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b24:	4770      	bx	lr
 8002b26:	bf00      	nop
 8002b28:	e000ed00 	.word	0xe000ed00

08002b2c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8002b2c:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8002b64 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8002b30:	f7ff ffea 	bl	8002b08 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8002b34:	480c      	ldr	r0, [pc, #48]	@ (8002b68 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8002b36:	490d      	ldr	r1, [pc, #52]	@ (8002b6c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8002b38:	4a0d      	ldr	r2, [pc, #52]	@ (8002b70 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8002b3a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002b3c:	e002      	b.n	8002b44 <LoopCopyDataInit>

08002b3e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002b3e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002b40:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002b42:	3304      	adds	r3, #4

08002b44 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002b44:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002b46:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002b48:	d3f9      	bcc.n	8002b3e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002b4a:	4a0a      	ldr	r2, [pc, #40]	@ (8002b74 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8002b4c:	4c0a      	ldr	r4, [pc, #40]	@ (8002b78 <LoopFillZerobss+0x22>)
  movs r3, #0
 8002b4e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002b50:	e001      	b.n	8002b56 <LoopFillZerobss>

08002b52 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002b52:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002b54:	3204      	adds	r2, #4

08002b56 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002b56:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002b58:	d3fb      	bcc.n	8002b52 <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 8002b5a:	f004 f95f 	bl	8006e1c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002b5e:	f7ff fb09 	bl	8002174 <main>
  bx  lr    
 8002b62:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8002b64:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8002b68:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002b6c:	200001d4 	.word	0x200001d4
  ldr r2, =_sidata
 8002b70:	080094e8 	.word	0x080094e8
  ldr r2, =_sbss
 8002b74:	200001d4 	.word	0x200001d4
  ldr r4, =_ebss
 8002b78:	200004bc 	.word	0x200004bc

08002b7c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002b7c:	e7fe      	b.n	8002b7c <ADC_IRQHandler>
	...

08002b80 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002b80:	b580      	push	{r7, lr}
 8002b82:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002b84:	4b0e      	ldr	r3, [pc, #56]	@ (8002bc0 <HAL_Init+0x40>)
 8002b86:	681b      	ldr	r3, [r3, #0]
 8002b88:	4a0d      	ldr	r2, [pc, #52]	@ (8002bc0 <HAL_Init+0x40>)
 8002b8a:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8002b8e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002b90:	4b0b      	ldr	r3, [pc, #44]	@ (8002bc0 <HAL_Init+0x40>)
 8002b92:	681b      	ldr	r3, [r3, #0]
 8002b94:	4a0a      	ldr	r2, [pc, #40]	@ (8002bc0 <HAL_Init+0x40>)
 8002b96:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8002b9a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002b9c:	4b08      	ldr	r3, [pc, #32]	@ (8002bc0 <HAL_Init+0x40>)
 8002b9e:	681b      	ldr	r3, [r3, #0]
 8002ba0:	4a07      	ldr	r2, [pc, #28]	@ (8002bc0 <HAL_Init+0x40>)
 8002ba2:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002ba6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002ba8:	2003      	movs	r0, #3
 8002baa:	f000 fd93 	bl	80036d4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002bae:	2000      	movs	r0, #0
 8002bb0:	f000 f808 	bl	8002bc4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002bb4:	f7ff fdfe 	bl	80027b4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002bb8:	2300      	movs	r3, #0
}
 8002bba:	4618      	mov	r0, r3
 8002bbc:	bd80      	pop	{r7, pc}
 8002bbe:	bf00      	nop
 8002bc0:	40023c00 	.word	0x40023c00

08002bc4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002bc4:	b580      	push	{r7, lr}
 8002bc6:	b082      	sub	sp, #8
 8002bc8:	af00      	add	r7, sp, #0
 8002bca:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002bcc:	4b15      	ldr	r3, [pc, #84]	@ (8002c24 <HAL_InitTick+0x60>)
 8002bce:	681a      	ldr	r2, [r3, #0]
 8002bd0:	4b15      	ldr	r3, [pc, #84]	@ (8002c28 <HAL_InitTick+0x64>)
 8002bd2:	781b      	ldrb	r3, [r3, #0]
 8002bd4:	4619      	mov	r1, r3
 8002bd6:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8002bda:	fbb3 f3f1 	udiv	r3, r3, r1
 8002bde:	fbb2 f3f3 	udiv	r3, r2, r3
 8002be2:	4618      	mov	r0, r3
 8002be4:	f000 fdab 	bl	800373e <HAL_SYSTICK_Config>
 8002be8:	4603      	mov	r3, r0
 8002bea:	2b00      	cmp	r3, #0
 8002bec:	bf14      	ite	ne
 8002bee:	2301      	movne	r3, #1
 8002bf0:	2300      	moveq	r3, #0
 8002bf2:	b2db      	uxtb	r3, r3
 8002bf4:	2b00      	cmp	r3, #0
 8002bf6:	d001      	beq.n	8002bfc <HAL_InitTick+0x38>
  {
    return HAL_ERROR;
 8002bf8:	2301      	movs	r3, #1
 8002bfa:	e00e      	b.n	8002c1a <HAL_InitTick+0x56>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	2b0f      	cmp	r3, #15
 8002c00:	d80a      	bhi.n	8002c18 <HAL_InitTick+0x54>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002c02:	2200      	movs	r2, #0
 8002c04:	6879      	ldr	r1, [r7, #4]
 8002c06:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8002c0a:	f000 fd6e 	bl	80036ea <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002c0e:	4a07      	ldr	r2, [pc, #28]	@ (8002c2c <HAL_InitTick+0x68>)
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002c14:	2300      	movs	r3, #0
 8002c16:	e000      	b.n	8002c1a <HAL_InitTick+0x56>
    return HAL_ERROR;
 8002c18:	2301      	movs	r3, #1
}
 8002c1a:	4618      	mov	r0, r3
 8002c1c:	3708      	adds	r7, #8
 8002c1e:	46bd      	mov	sp, r7
 8002c20:	bd80      	pop	{r7, pc}
 8002c22:	bf00      	nop
 8002c24:	20000000 	.word	0x20000000
 8002c28:	20000008 	.word	0x20000008
 8002c2c:	20000004 	.word	0x20000004

08002c30 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002c30:	b480      	push	{r7}
 8002c32:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002c34:	4b06      	ldr	r3, [pc, #24]	@ (8002c50 <HAL_IncTick+0x20>)
 8002c36:	781b      	ldrb	r3, [r3, #0]
 8002c38:	461a      	mov	r2, r3
 8002c3a:	4b06      	ldr	r3, [pc, #24]	@ (8002c54 <HAL_IncTick+0x24>)
 8002c3c:	681b      	ldr	r3, [r3, #0]
 8002c3e:	4413      	add	r3, r2
 8002c40:	4a04      	ldr	r2, [pc, #16]	@ (8002c54 <HAL_IncTick+0x24>)
 8002c42:	6013      	str	r3, [r2, #0]
}
 8002c44:	bf00      	nop
 8002c46:	46bd      	mov	sp, r7
 8002c48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c4c:	4770      	bx	lr
 8002c4e:	bf00      	nop
 8002c50:	20000008 	.word	0x20000008
 8002c54:	20000368 	.word	0x20000368

08002c58 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002c58:	b480      	push	{r7}
 8002c5a:	af00      	add	r7, sp, #0
  return uwTick;
 8002c5c:	4b03      	ldr	r3, [pc, #12]	@ (8002c6c <HAL_GetTick+0x14>)
 8002c5e:	681b      	ldr	r3, [r3, #0]
}
 8002c60:	4618      	mov	r0, r3
 8002c62:	46bd      	mov	sp, r7
 8002c64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c68:	4770      	bx	lr
 8002c6a:	bf00      	nop
 8002c6c:	20000368 	.word	0x20000368

08002c70 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002c70:	b580      	push	{r7, lr}
 8002c72:	b084      	sub	sp, #16
 8002c74:	af00      	add	r7, sp, #0
 8002c76:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002c78:	f7ff ffee 	bl	8002c58 <HAL_GetTick>
 8002c7c:	4603      	mov	r3, r0
 8002c7e:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002c84:	68fb      	ldr	r3, [r7, #12]
 8002c86:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8002c8a:	d005      	beq.n	8002c98 <HAL_Delay+0x28>
  {
    wait += (uint32_t)(uwTickFreq);
 8002c8c:	4b0c      	ldr	r3, [pc, #48]	@ (8002cc0 <HAL_Delay+0x50>)
 8002c8e:	781b      	ldrb	r3, [r3, #0]
 8002c90:	461a      	mov	r2, r3
 8002c92:	68fb      	ldr	r3, [r7, #12]
 8002c94:	4413      	add	r3, r2
 8002c96:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8002c98:	bf00      	nop
 8002c9a:	f7ff ffdd 	bl	8002c58 <HAL_GetTick>
 8002c9e:	4602      	mov	r2, r0
 8002ca0:	68bb      	ldr	r3, [r7, #8]
 8002ca2:	1ad3      	subs	r3, r2, r3
 8002ca4:	68fa      	ldr	r2, [r7, #12]
 8002ca6:	429a      	cmp	r2, r3
 8002ca8:	bf8c      	ite	hi
 8002caa:	2301      	movhi	r3, #1
 8002cac:	2300      	movls	r3, #0
 8002cae:	b2db      	uxtb	r3, r3
 8002cb0:	2b00      	cmp	r3, #0
 8002cb2:	d1f2      	bne.n	8002c9a <HAL_Delay+0x2a>
  {
  }
}
 8002cb4:	bf00      	nop
 8002cb6:	bf00      	nop
 8002cb8:	3710      	adds	r7, #16
 8002cba:	46bd      	mov	sp, r7
 8002cbc:	bd80      	pop	{r7, pc}
 8002cbe:	bf00      	nop
 8002cc0:	20000008 	.word	0x20000008

08002cc4 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8002cc4:	b580      	push	{r7, lr}
 8002cc6:	b084      	sub	sp, #16
 8002cc8:	af00      	add	r7, sp, #0
 8002cca:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002ccc:	2300      	movs	r3, #0
 8002cce:	73fb      	strb	r3, [r7, #15]

  /* Check ADC handle */
  if (hadc == NULL)
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	2b00      	cmp	r3, #0
 8002cd4:	d101      	bne.n	8002cda <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8002cd6:	2301      	movs	r3, #1
 8002cd8:	e03d      	b.n	8002d56 <HAL_ADC_Init+0x92>
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if (hadc->State == HAL_ADC_STATE_RESET)
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002cde:	2b00      	cmp	r3, #0
 8002ce0:	bf0c      	ite	eq
 8002ce2:	2301      	moveq	r3, #1
 8002ce4:	2300      	movne	r3, #0
 8002ce6:	b2db      	uxtb	r3, r3
 8002ce8:	2b00      	cmp	r3, #0
 8002cea:	d009      	beq.n	8002d00 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002cec:	6878      	ldr	r0, [r7, #4]
 8002cee:	f7ff fd89 	bl	8002804 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	2200      	movs	r2, #0
 8002cf6:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	2200      	movs	r2, #0
 8002cfc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  }

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002d04:	f003 0310 	and.w	r3, r3, #16
 8002d08:	2b00      	cmp	r3, #0
 8002d0a:	bf0c      	ite	eq
 8002d0c:	2301      	moveq	r3, #1
 8002d0e:	2300      	movne	r3, #0
 8002d10:	b2db      	uxtb	r3, r3
 8002d12:	2b00      	cmp	r3, #0
 8002d14:	d018      	beq.n	8002d48 <HAL_ADC_Init+0x84>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002d1a:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8002d1e:	f023 0302 	bic.w	r3, r3, #2
 8002d22:	f043 0202 	orr.w	r2, r3, #2
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Set ADC parameters */
    ADC_Init(hadc);
 8002d2a:	6878      	ldr	r0, [r7, #4]
 8002d2c:	f000 fb08 	bl	8003340 <_ZL8ADC_InitP17ADC_HandleTypeDef>

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	2200      	movs	r2, #0
 8002d34:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002d3a:	f023 0303 	bic.w	r3, r3, #3
 8002d3e:	f043 0201 	orr.w	r2, r3, #1
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	641a      	str	r2, [r3, #64]	@ 0x40
 8002d46:	e001      	b.n	8002d4c <HAL_ADC_Init+0x88>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8002d48:	2301      	movs	r3, #1
 8002d4a:	73fb      	strb	r3, [r7, #15]
  }

  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	2200      	movs	r2, #0
 8002d50:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return tmp_hal_status;
 8002d54:	7bfb      	ldrb	r3, [r7, #15]
}
 8002d56:	4618      	mov	r0, r3
 8002d58:	3710      	adds	r7, #16
 8002d5a:	46bd      	mov	sp, r7
 8002d5c:	bd80      	pop	{r7, pc}
	...

08002d60 <HAL_ADC_Start>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 8002d60:	b480      	push	{r7}
 8002d62:	b085      	sub	sp, #20
 8002d64:	af00      	add	r7, sp, #0
 8002d66:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0U;
 8002d68:	2300      	movs	r3, #0
 8002d6a:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));

  /* Process locked */
  __HAL_LOCK(hadc);
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002d72:	2b01      	cmp	r3, #1
 8002d74:	d101      	bne.n	8002d7a <HAL_ADC_Start+0x1a>
 8002d76:	2302      	movs	r3, #2
 8002d78:	e0e0      	b.n	8002f3c <HAL_ADC_Start+0x1dc>
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	2201      	movs	r2, #1
 8002d7e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during
  Tstab time the ADC's stabilization */
  if ((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	681b      	ldr	r3, [r3, #0]
 8002d86:	689b      	ldr	r3, [r3, #8]
 8002d88:	f003 0301 	and.w	r3, r3, #1
 8002d8c:	2b01      	cmp	r3, #1
 8002d8e:	bf14      	ite	ne
 8002d90:	2301      	movne	r3, #1
 8002d92:	2300      	moveq	r3, #0
 8002d94:	b2db      	uxtb	r3, r3
 8002d96:	2b00      	cmp	r3, #0
 8002d98:	d01d      	beq.n	8002dd6 <HAL_ADC_Start+0x76>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	681b      	ldr	r3, [r3, #0]
 8002d9e:	689a      	ldr	r2, [r3, #8]
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	681b      	ldr	r3, [r3, #0]
 8002da4:	f042 0201 	orr.w	r2, r2, #1
 8002da8:	609a      	str	r2, [r3, #8]

    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8002daa:	4b67      	ldr	r3, [pc, #412]	@ (8002f48 <HAL_ADC_Start+0x1e8>)
 8002dac:	681b      	ldr	r3, [r3, #0]
 8002dae:	4a67      	ldr	r2, [pc, #412]	@ (8002f4c <HAL_ADC_Start+0x1ec>)
 8002db0:	fba2 2303 	umull	r2, r3, r2, r3
 8002db4:	0c9a      	lsrs	r2, r3, #18
 8002db6:	4613      	mov	r3, r2
 8002db8:	005b      	lsls	r3, r3, #1
 8002dba:	4413      	add	r3, r2
 8002dbc:	60bb      	str	r3, [r7, #8]
    while (counter != 0U)
 8002dbe:	e002      	b.n	8002dc6 <HAL_ADC_Start+0x66>
    {
      counter--;
 8002dc0:	68bb      	ldr	r3, [r7, #8]
 8002dc2:	3b01      	subs	r3, #1
 8002dc4:	60bb      	str	r3, [r7, #8]
    while (counter != 0U)
 8002dc6:	68bb      	ldr	r3, [r7, #8]
 8002dc8:	2b00      	cmp	r3, #0
 8002dca:	bf14      	ite	ne
 8002dcc:	2301      	movne	r3, #1
 8002dce:	2300      	moveq	r3, #0
 8002dd0:	b2db      	uxtb	r3, r3
 8002dd2:	2b00      	cmp	r3, #0
 8002dd4:	d1f4      	bne.n	8002dc0 <HAL_ADC_Start+0x60>
    }
  }

  /* Start conversion if ADC is effectively enabled */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	681b      	ldr	r3, [r3, #0]
 8002dda:	689b      	ldr	r3, [r3, #8]
 8002ddc:	f003 0301 	and.w	r3, r3, #1
 8002de0:	2b01      	cmp	r3, #1
 8002de2:	bf0c      	ite	eq
 8002de4:	2301      	moveq	r3, #1
 8002de6:	2300      	movne	r3, #0
 8002de8:	b2db      	uxtb	r3, r3
 8002dea:	2b00      	cmp	r3, #0
 8002dec:	f000 8099 	beq.w	8002f22 <HAL_ADC_Start+0x1c2>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002df4:	f423 63e0 	bic.w	r3, r3, #1792	@ 0x700
 8002df8:	f023 0301 	bic.w	r3, r3, #1
 8002dfc:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);

    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	681b      	ldr	r3, [r3, #0]
 8002e08:	685b      	ldr	r3, [r3, #4]
 8002e0a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002e0e:	2b00      	cmp	r3, #0
 8002e10:	bf14      	ite	ne
 8002e12:	2301      	movne	r3, #1
 8002e14:	2300      	moveq	r3, #0
 8002e16:	b2db      	uxtb	r3, r3
 8002e18:	2b00      	cmp	r3, #0
 8002e1a:	d007      	beq.n	8002e2c <HAL_ADC_Start+0xcc>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002e20:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8002e24:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	641a      	str	r2, [r3, #64]	@ 0x40
    }

    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002e30:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002e34:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002e38:	bf0c      	ite	eq
 8002e3a:	2301      	moveq	r3, #1
 8002e3c:	2300      	movne	r3, #0
 8002e3e:	b2db      	uxtb	r3, r3
 8002e40:	2b00      	cmp	r3, #0
 8002e42:	d006      	beq.n	8002e52 <HAL_ADC_Start+0xf2>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002e48:	f023 0206 	bic.w	r2, r3, #6
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	645a      	str	r2, [r3, #68]	@ 0x44
 8002e50:	e002      	b.n	8002e58 <HAL_ADC_Start+0xf8>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	2200      	movs	r2, #0
 8002e56:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	2200      	movs	r2, #0
 8002e5c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002e60:	4b3b      	ldr	r3, [pc, #236]	@ (8002f50 <HAL_ADC_Start+0x1f0>)
 8002e62:	60fb      	str	r3, [r7, #12]

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	681b      	ldr	r3, [r3, #0]
 8002e68:	f06f 0222 	mvn.w	r2, #34	@ 0x22
 8002e6c:	601a      	str	r2, [r3, #0]

    /* Check if Multimode enabled */
    if (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8002e6e:	68fb      	ldr	r3, [r7, #12]
 8002e70:	685b      	ldr	r3, [r3, #4]
 8002e72:	f003 031f 	and.w	r3, r3, #31
 8002e76:	2b00      	cmp	r3, #0
 8002e78:	bf0c      	ite	eq
 8002e7a:	2301      	moveq	r3, #1
 8002e7c:	2300      	movne	r3, #0
 8002e7e:	b2db      	uxtb	r3, r3
 8002e80:	2b00      	cmp	r3, #0
 8002e82:	d034      	beq.n	8002eee <HAL_ADC_Start+0x18e>
    {
#if defined(ADC2) && defined(ADC3)
      if ((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	681b      	ldr	r3, [r3, #0]
          || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 8002e88:	4a32      	ldr	r2, [pc, #200]	@ (8002f54 <HAL_ADC_Start+0x1f4>)
 8002e8a:	4293      	cmp	r3, r2
 8002e8c:	d015      	beq.n	8002eba <HAL_ADC_Start+0x15a>
      if ((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	681b      	ldr	r3, [r3, #0]
 8002e92:	4a31      	ldr	r2, [pc, #196]	@ (8002f58 <HAL_ADC_Start+0x1f8>)
 8002e94:	4293      	cmp	r3, r2
 8002e96:	d105      	bne.n	8002ea4 <HAL_ADC_Start+0x144>
 8002e98:	4b2d      	ldr	r3, [pc, #180]	@ (8002f50 <HAL_ADC_Start+0x1f0>)
 8002e9a:	685b      	ldr	r3, [r3, #4]
 8002e9c:	f003 031f 	and.w	r3, r3, #31
 8002ea0:	2b00      	cmp	r3, #0
 8002ea2:	d00a      	beq.n	8002eba <HAL_ADC_Start+0x15a>
          || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	681b      	ldr	r3, [r3, #0]
 8002ea8:	4a2c      	ldr	r2, [pc, #176]	@ (8002f5c <HAL_ADC_Start+0x1fc>)
 8002eaa:	4293      	cmp	r3, r2
 8002eac:	d107      	bne.n	8002ebe <HAL_ADC_Start+0x15e>
 8002eae:	4b28      	ldr	r3, [pc, #160]	@ (8002f50 <HAL_ADC_Start+0x1f0>)
 8002eb0:	685b      	ldr	r3, [r3, #4]
 8002eb2:	f003 0310 	and.w	r3, r3, #16
 8002eb6:	2b00      	cmp	r3, #0
 8002eb8:	d101      	bne.n	8002ebe <HAL_ADC_Start+0x15e>
 8002eba:	2301      	movs	r3, #1
 8002ebc:	e000      	b.n	8002ec0 <HAL_ADC_Start+0x160>
 8002ebe:	2300      	movs	r3, #0
      if ((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 8002ec0:	2b00      	cmp	r3, #0
 8002ec2:	d03a      	beq.n	8002f3a <HAL_ADC_Start+0x1da>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET)
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	681b      	ldr	r3, [r3, #0]
 8002ec8:	689b      	ldr	r3, [r3, #8]
 8002eca:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8002ece:	2b00      	cmp	r3, #0
 8002ed0:	bf0c      	ite	eq
 8002ed2:	2301      	moveq	r3, #1
 8002ed4:	2300      	movne	r3, #0
 8002ed6:	b2db      	uxtb	r3, r3
 8002ed8:	2b00      	cmp	r3, #0
 8002eda:	d02e      	beq.n	8002f3a <HAL_ADC_Start+0x1da>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	681b      	ldr	r3, [r3, #0]
 8002ee0:	689a      	ldr	r2, [r3, #8]
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	681b      	ldr	r3, [r3, #0]
 8002ee6:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 8002eea:	609a      	str	r2, [r3, #8]
 8002eec:	e025      	b.n	8002f3a <HAL_ADC_Start+0x1da>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if ((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	681b      	ldr	r3, [r3, #0]
 8002ef2:	4a18      	ldr	r2, [pc, #96]	@ (8002f54 <HAL_ADC_Start+0x1f4>)
 8002ef4:	4293      	cmp	r3, r2
 8002ef6:	d108      	bne.n	8002f0a <HAL_ADC_Start+0x1aa>
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	681b      	ldr	r3, [r3, #0]
 8002efc:	689b      	ldr	r3, [r3, #8]
 8002efe:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8002f02:	2b00      	cmp	r3, #0
 8002f04:	d101      	bne.n	8002f0a <HAL_ADC_Start+0x1aa>
 8002f06:	2301      	movs	r3, #1
 8002f08:	e000      	b.n	8002f0c <HAL_ADC_Start+0x1ac>
 8002f0a:	2300      	movs	r3, #0
 8002f0c:	2b00      	cmp	r3, #0
 8002f0e:	d014      	beq.n	8002f3a <HAL_ADC_Start+0x1da>
      {
        /* Enable the selected ADC software conversion for regular group */
        hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	681b      	ldr	r3, [r3, #0]
 8002f14:	689a      	ldr	r2, [r3, #8]
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	681b      	ldr	r3, [r3, #0]
 8002f1a:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 8002f1e:	609a      	str	r2, [r3, #8]
 8002f20:	e00b      	b.n	8002f3a <HAL_ADC_Start+0x1da>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002f26:	f043 0210 	orr.w	r2, r3, #16
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002f32:	f043 0201 	orr.w	r2, r3, #1
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Return function status */
  return HAL_OK;
 8002f3a:	2300      	movs	r3, #0
}
 8002f3c:	4618      	mov	r0, r3
 8002f3e:	3714      	adds	r7, #20
 8002f40:	46bd      	mov	sp, r7
 8002f42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f46:	4770      	bx	lr
 8002f48:	20000000 	.word	0x20000000
 8002f4c:	431bde83 	.word	0x431bde83
 8002f50:	40012300 	.word	0x40012300
 8002f54:	40012000 	.word	0x40012000
 8002f58:	40012100 	.word	0x40012100
 8002f5c:	40012200 	.word	0x40012200

08002f60 <HAL_ADC_PollForConversion>:
  *         the configuration information for the specified ADC.
  * @param  Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef *hadc, uint32_t Timeout)
{
 8002f60:	b580      	push	{r7, lr}
 8002f62:	b084      	sub	sp, #16
 8002f64:	af00      	add	r7, sp, #0
 8002f66:	6078      	str	r0, [r7, #4]
 8002f68:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8002f6a:	2300      	movs	r3, #0
 8002f6c:	60fb      	str	r3, [r7, #12]
  /* each conversion:                                                       */
  /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
  /* several ranks and polling for end of each conversion.                  */
  /* For code simplicity sake, this particular case is generalized to       */
  /* ADC configured in DMA mode and polling for end of each conversion.     */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	681b      	ldr	r3, [r3, #0]
 8002f72:	689b      	ldr	r3, [r3, #8]
 8002f74:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002f78:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002f7c:	d109      	bne.n	8002f92 <HAL_ADC_PollForConversion+0x32>
      HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA))
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	681b      	ldr	r3, [r3, #0]
 8002f82:	689b      	ldr	r3, [r3, #8]
 8002f84:	f403 7380 	and.w	r3, r3, #256	@ 0x100
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8002f88:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002f8c:	d101      	bne.n	8002f92 <HAL_ADC_PollForConversion+0x32>
 8002f8e:	2301      	movs	r3, #1
 8002f90:	e000      	b.n	8002f94 <HAL_ADC_PollForConversion+0x34>
 8002f92:	2300      	movs	r3, #0
 8002f94:	2b00      	cmp	r3, #0
 8002f96:	d00b      	beq.n	8002fb0 <HAL_ADC_PollForConversion+0x50>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002f9c:	f043 0220 	orr.w	r2, r3, #32
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	2200      	movs	r2, #0
 8002fa8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 8002fac:	2301      	movs	r3, #1
 8002fae:	e07d      	b.n	80030ac <HAL_ADC_PollForConversion+0x14c>
  }

  /* Get tick */
  tickstart = HAL_GetTick();
 8002fb0:	f7ff fe52 	bl	8002c58 <HAL_GetTick>
 8002fb4:	4603      	mov	r3, r0
 8002fb6:	60fb      	str	r3, [r7, #12]

  /* Check End of conversion flag */
  while (!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8002fb8:	e02b      	b.n	8003012 <HAL_ADC_PollForConversion+0xb2>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if (Timeout != HAL_MAX_DELAY)
 8002fba:	683b      	ldr	r3, [r7, #0]
 8002fbc:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8002fc0:	d027      	beq.n	8003012 <HAL_ADC_PollForConversion+0xb2>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 8002fc2:	683b      	ldr	r3, [r7, #0]
 8002fc4:	2b00      	cmp	r3, #0
 8002fc6:	d007      	beq.n	8002fd8 <HAL_ADC_PollForConversion+0x78>
 8002fc8:	f7ff fe46 	bl	8002c58 <HAL_GetTick>
 8002fcc:	4602      	mov	r2, r0
 8002fce:	68fb      	ldr	r3, [r7, #12]
 8002fd0:	1ad3      	subs	r3, r2, r3
 8002fd2:	683a      	ldr	r2, [r7, #0]
 8002fd4:	429a      	cmp	r2, r3
 8002fd6:	d201      	bcs.n	8002fdc <HAL_ADC_PollForConversion+0x7c>
 8002fd8:	2301      	movs	r3, #1
 8002fda:	e000      	b.n	8002fde <HAL_ADC_PollForConversion+0x7e>
 8002fdc:	2300      	movs	r3, #0
 8002fde:	2b00      	cmp	r3, #0
 8002fe0:	d017      	beq.n	8003012 <HAL_ADC_PollForConversion+0xb2>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	681b      	ldr	r3, [r3, #0]
 8002fe6:	681b      	ldr	r3, [r3, #0]
 8002fe8:	f003 0302 	and.w	r3, r3, #2
 8002fec:	2b02      	cmp	r3, #2
 8002fee:	bf14      	ite	ne
 8002ff0:	2301      	movne	r3, #1
 8002ff2:	2300      	moveq	r3, #0
 8002ff4:	b2db      	uxtb	r3, r3
 8002ff6:	2b00      	cmp	r3, #0
 8002ff8:	d00b      	beq.n	8003012 <HAL_ADC_PollForConversion+0xb2>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002ffe:	f043 0204 	orr.w	r2, r3, #4
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	2200      	movs	r2, #0
 800300a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_TIMEOUT;
 800300e:	2303      	movs	r3, #3
 8003010:	e04c      	b.n	80030ac <HAL_ADC_PollForConversion+0x14c>
  while (!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	681b      	ldr	r3, [r3, #0]
 8003016:	681b      	ldr	r3, [r3, #0]
 8003018:	f003 0302 	and.w	r3, r3, #2
 800301c:	2b02      	cmp	r3, #2
 800301e:	bf14      	ite	ne
 8003020:	2301      	movne	r3, #1
 8003022:	2300      	moveq	r3, #0
 8003024:	b2db      	uxtb	r3, r3
 8003026:	2b00      	cmp	r3, #0
 8003028:	d1c7      	bne.n	8002fba <HAL_ADC_PollForConversion+0x5a>
      }
    }
  }

  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	681b      	ldr	r3, [r3, #0]
 800302e:	f06f 0212 	mvn.w	r2, #18
 8003032:	601a      	str	r2, [r3, #0]

  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003038:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	641a      	str	r2, [r3, #64]	@ 0x40
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F4, there is no independent flag of end of sequence.       */
  /*       The test of scan sequence on going is done either with scan        */
  /*       sequence disabled or with end of conversion flag set to            */
  /*       of end of sequence.                                                */
  if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	681b      	ldr	r3, [r3, #0]
 8003044:	689b      	ldr	r3, [r3, #8]
 8003046:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
      (hadc->Init.ContinuousConvMode == DISABLE)            &&
 800304a:	2b00      	cmp	r3, #0
 800304c:	d113      	bne.n	8003076 <HAL_ADC_PollForConversion+0x116>
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	7e1b      	ldrb	r3, [r3, #24]
  if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8003052:	2b00      	cmp	r3, #0
 8003054:	d10f      	bne.n	8003076 <HAL_ADC_PollForConversion+0x116>
      (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	681b      	ldr	r3, [r3, #0]
 800305a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800305c:	f403 0370 	and.w	r3, r3, #15728640	@ 0xf00000
      (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8003060:	2b00      	cmp	r3, #0
 8003062:	d006      	beq.n	8003072 <HAL_ADC_PollForConversion+0x112>
       HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)))
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	681b      	ldr	r3, [r3, #0]
 8003068:	689b      	ldr	r3, [r3, #8]
 800306a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
      (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 800306e:	2b00      	cmp	r3, #0
 8003070:	d101      	bne.n	8003076 <HAL_ADC_PollForConversion+0x116>
      (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8003072:	2301      	movs	r3, #1
 8003074:	e000      	b.n	8003078 <HAL_ADC_PollForConversion+0x118>
 8003076:	2300      	movs	r3, #0
  if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8003078:	2b00      	cmp	r3, #0
 800307a:	d016      	beq.n	80030aa <HAL_ADC_PollForConversion+0x14a>
  {
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003080:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	641a      	str	r2, [r3, #64]	@ 0x40

    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800308c:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8003090:	2b00      	cmp	r3, #0
 8003092:	bf0c      	ite	eq
 8003094:	2301      	moveq	r3, #1
 8003096:	2300      	movne	r3, #0
 8003098:	b2db      	uxtb	r3, r3
 800309a:	2b00      	cmp	r3, #0
 800309c:	d005      	beq.n	80030aa <HAL_ADC_PollForConversion+0x14a>
    {
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80030a2:	f043 0201 	orr.w	r2, r3, #1
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	641a      	str	r2, [r3, #64]	@ 0x40
    }
  }

  /* Return ADC state */
  return HAL_OK;
 80030aa:	2300      	movs	r3, #0
}
 80030ac:	4618      	mov	r0, r3
 80030ae:	3710      	adds	r7, #16
 80030b0:	46bd      	mov	sp, r7
 80030b2:	bd80      	pop	{r7, pc}

080030b4 <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef *hadc)
{
 80030b4:	b480      	push	{r7}
 80030b6:	b083      	sub	sp, #12
 80030b8:	af00      	add	r7, sp, #0
 80030ba:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */
  return hadc->Instance->DR;
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	681b      	ldr	r3, [r3, #0]
 80030c0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
}
 80030c2:	4618      	mov	r0, r3
 80030c4:	370c      	adds	r7, #12
 80030c6:	46bd      	mov	sp, r7
 80030c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030cc:	4770      	bx	lr
	...

080030d0 <HAL_ADC_ConfigChannel>:
*         the configuration information for the specified ADC.
* @param  sConfig ADC configuration structure.
* @retval HAL status
*/
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 80030d0:	b480      	push	{r7}
 80030d2:	b085      	sub	sp, #20
 80030d4:	af00      	add	r7, sp, #0
 80030d6:	6078      	str	r0, [r7, #4]
 80030d8:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 80030da:	2300      	movs	r3, #0
 80030dc:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));

  /* Process locked */
  __HAL_LOCK(hadc);
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80030e4:	2b01      	cmp	r3, #1
 80030e6:	d101      	bne.n	80030ec <HAL_ADC_ConfigChannel+0x1c>
 80030e8:	2302      	movs	r3, #2
 80030ea:	e118      	b.n	800331e <HAL_ADC_ConfigChannel+0x24e>
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	2201      	movs	r2, #1
 80030f0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 80030f4:	683b      	ldr	r3, [r7, #0]
 80030f6:	681b      	ldr	r3, [r3, #0]
 80030f8:	2b09      	cmp	r3, #9
 80030fa:	d925      	bls.n	8003148 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	681b      	ldr	r3, [r3, #0]
 8003100:	68d9      	ldr	r1, [r3, #12]
 8003102:	683b      	ldr	r3, [r7, #0]
 8003104:	681b      	ldr	r3, [r3, #0]
 8003106:	b29b      	uxth	r3, r3
 8003108:	461a      	mov	r2, r3
 800310a:	4613      	mov	r3, r2
 800310c:	005b      	lsls	r3, r3, #1
 800310e:	4413      	add	r3, r2
 8003110:	3b1e      	subs	r3, #30
 8003112:	2207      	movs	r2, #7
 8003114:	fa02 f303 	lsl.w	r3, r2, r3
 8003118:	43da      	mvns	r2, r3
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	681b      	ldr	r3, [r3, #0]
 800311e:	400a      	ands	r2, r1
 8003120:	60da      	str	r2, [r3, #12]

    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	681b      	ldr	r3, [r3, #0]
 8003126:	68d9      	ldr	r1, [r3, #12]
 8003128:	683b      	ldr	r3, [r7, #0]
 800312a:	689a      	ldr	r2, [r3, #8]
 800312c:	683b      	ldr	r3, [r7, #0]
 800312e:	681b      	ldr	r3, [r3, #0]
 8003130:	b29b      	uxth	r3, r3
 8003132:	4618      	mov	r0, r3
 8003134:	4603      	mov	r3, r0
 8003136:	005b      	lsls	r3, r3, #1
 8003138:	4403      	add	r3, r0
 800313a:	3b1e      	subs	r3, #30
 800313c:	409a      	lsls	r2, r3
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	681b      	ldr	r3, [r3, #0]
 8003142:	430a      	orrs	r2, r1
 8003144:	60da      	str	r2, [r3, #12]
 8003146:	e022      	b.n	800318e <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	681b      	ldr	r3, [r3, #0]
 800314c:	6919      	ldr	r1, [r3, #16]
 800314e:	683b      	ldr	r3, [r7, #0]
 8003150:	681b      	ldr	r3, [r3, #0]
 8003152:	b29b      	uxth	r3, r3
 8003154:	461a      	mov	r2, r3
 8003156:	4613      	mov	r3, r2
 8003158:	005b      	lsls	r3, r3, #1
 800315a:	4413      	add	r3, r2
 800315c:	2207      	movs	r2, #7
 800315e:	fa02 f303 	lsl.w	r3, r2, r3
 8003162:	43da      	mvns	r2, r3
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	681b      	ldr	r3, [r3, #0]
 8003168:	400a      	ands	r2, r1
 800316a:	611a      	str	r2, [r3, #16]

    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	681b      	ldr	r3, [r3, #0]
 8003170:	6919      	ldr	r1, [r3, #16]
 8003172:	683b      	ldr	r3, [r7, #0]
 8003174:	689a      	ldr	r2, [r3, #8]
 8003176:	683b      	ldr	r3, [r7, #0]
 8003178:	681b      	ldr	r3, [r3, #0]
 800317a:	b29b      	uxth	r3, r3
 800317c:	4618      	mov	r0, r3
 800317e:	4603      	mov	r3, r0
 8003180:	005b      	lsls	r3, r3, #1
 8003182:	4403      	add	r3, r0
 8003184:	409a      	lsls	r2, r3
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	681b      	ldr	r3, [r3, #0]
 800318a:	430a      	orrs	r2, r1
 800318c:	611a      	str	r2, [r3, #16]
  }

  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 800318e:	683b      	ldr	r3, [r7, #0]
 8003190:	685b      	ldr	r3, [r3, #4]
 8003192:	2b06      	cmp	r3, #6
 8003194:	d824      	bhi.n	80031e0 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	681b      	ldr	r3, [r3, #0]
 800319a:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 800319c:	683b      	ldr	r3, [r7, #0]
 800319e:	685a      	ldr	r2, [r3, #4]
 80031a0:	4613      	mov	r3, r2
 80031a2:	009b      	lsls	r3, r3, #2
 80031a4:	4413      	add	r3, r2
 80031a6:	3b05      	subs	r3, #5
 80031a8:	221f      	movs	r2, #31
 80031aa:	fa02 f303 	lsl.w	r3, r2, r3
 80031ae:	43da      	mvns	r2, r3
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	681b      	ldr	r3, [r3, #0]
 80031b4:	400a      	ands	r2, r1
 80031b6:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	681b      	ldr	r3, [r3, #0]
 80031bc:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 80031be:	683b      	ldr	r3, [r7, #0]
 80031c0:	681b      	ldr	r3, [r3, #0]
 80031c2:	b29b      	uxth	r3, r3
 80031c4:	4618      	mov	r0, r3
 80031c6:	683b      	ldr	r3, [r7, #0]
 80031c8:	685a      	ldr	r2, [r3, #4]
 80031ca:	4613      	mov	r3, r2
 80031cc:	009b      	lsls	r3, r3, #2
 80031ce:	4413      	add	r3, r2
 80031d0:	3b05      	subs	r3, #5
 80031d2:	fa00 f203 	lsl.w	r2, r0, r3
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	681b      	ldr	r3, [r3, #0]
 80031da:	430a      	orrs	r2, r1
 80031dc:	635a      	str	r2, [r3, #52]	@ 0x34
 80031de:	e04c      	b.n	800327a <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 80031e0:	683b      	ldr	r3, [r7, #0]
 80031e2:	685b      	ldr	r3, [r3, #4]
 80031e4:	2b0c      	cmp	r3, #12
 80031e6:	d824      	bhi.n	8003232 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	681b      	ldr	r3, [r3, #0]
 80031ec:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 80031ee:	683b      	ldr	r3, [r7, #0]
 80031f0:	685a      	ldr	r2, [r3, #4]
 80031f2:	4613      	mov	r3, r2
 80031f4:	009b      	lsls	r3, r3, #2
 80031f6:	4413      	add	r3, r2
 80031f8:	3b23      	subs	r3, #35	@ 0x23
 80031fa:	221f      	movs	r2, #31
 80031fc:	fa02 f303 	lsl.w	r3, r2, r3
 8003200:	43da      	mvns	r2, r3
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	681b      	ldr	r3, [r3, #0]
 8003206:	400a      	ands	r2, r1
 8003208:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	681b      	ldr	r3, [r3, #0]
 800320e:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8003210:	683b      	ldr	r3, [r7, #0]
 8003212:	681b      	ldr	r3, [r3, #0]
 8003214:	b29b      	uxth	r3, r3
 8003216:	4618      	mov	r0, r3
 8003218:	683b      	ldr	r3, [r7, #0]
 800321a:	685a      	ldr	r2, [r3, #4]
 800321c:	4613      	mov	r3, r2
 800321e:	009b      	lsls	r3, r3, #2
 8003220:	4413      	add	r3, r2
 8003222:	3b23      	subs	r3, #35	@ 0x23
 8003224:	fa00 f203 	lsl.w	r2, r0, r3
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	681b      	ldr	r3, [r3, #0]
 800322c:	430a      	orrs	r2, r1
 800322e:	631a      	str	r2, [r3, #48]	@ 0x30
 8003230:	e023      	b.n	800327a <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	681b      	ldr	r3, [r3, #0]
 8003236:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8003238:	683b      	ldr	r3, [r7, #0]
 800323a:	685a      	ldr	r2, [r3, #4]
 800323c:	4613      	mov	r3, r2
 800323e:	009b      	lsls	r3, r3, #2
 8003240:	4413      	add	r3, r2
 8003242:	3b41      	subs	r3, #65	@ 0x41
 8003244:	221f      	movs	r2, #31
 8003246:	fa02 f303 	lsl.w	r3, r2, r3
 800324a:	43da      	mvns	r2, r3
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	681b      	ldr	r3, [r3, #0]
 8003250:	400a      	ands	r2, r1
 8003252:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	681b      	ldr	r3, [r3, #0]
 8003258:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 800325a:	683b      	ldr	r3, [r7, #0]
 800325c:	681b      	ldr	r3, [r3, #0]
 800325e:	b29b      	uxth	r3, r3
 8003260:	4618      	mov	r0, r3
 8003262:	683b      	ldr	r3, [r7, #0]
 8003264:	685a      	ldr	r2, [r3, #4]
 8003266:	4613      	mov	r3, r2
 8003268:	009b      	lsls	r3, r3, #2
 800326a:	4413      	add	r3, r2
 800326c:	3b41      	subs	r3, #65	@ 0x41
 800326e:	fa00 f203 	lsl.w	r2, r0, r3
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	681b      	ldr	r3, [r3, #0]
 8003276:	430a      	orrs	r2, r1
 8003278:	62da      	str	r2, [r3, #44]	@ 0x2c
  }

  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800327a:	4b2c      	ldr	r3, [pc, #176]	@ (800332c <HAL_ADC_ConfigChannel+0x25c>)
 800327c:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	681b      	ldr	r3, [r3, #0]
 8003282:	4a2b      	ldr	r2, [pc, #172]	@ (8003330 <HAL_ADC_ConfigChannel+0x260>)
 8003284:	4293      	cmp	r3, r2
 8003286:	d10f      	bne.n	80032a8 <HAL_ADC_ConfigChannel+0x1d8>
 8003288:	683b      	ldr	r3, [r7, #0]
 800328a:	681b      	ldr	r3, [r3, #0]
 800328c:	2b12      	cmp	r3, #18
 800328e:	d10b      	bne.n	80032a8 <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 8003290:	68fb      	ldr	r3, [r7, #12]
 8003292:	685b      	ldr	r3, [r3, #4]
 8003294:	f423 0200 	bic.w	r2, r3, #8388608	@ 0x800000
 8003298:	68fb      	ldr	r3, [r7, #12]
 800329a:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 800329c:	68fb      	ldr	r3, [r7, #12]
 800329e:	685b      	ldr	r3, [r3, #4]
 80032a0:	f443 0280 	orr.w	r2, r3, #4194304	@ 0x400000
 80032a4:	68fb      	ldr	r3, [r7, #12]
 80032a6:	605a      	str	r2, [r3, #4]
  }

  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	681b      	ldr	r3, [r3, #0]
 80032ac:	4a20      	ldr	r2, [pc, #128]	@ (8003330 <HAL_ADC_ConfigChannel+0x260>)
 80032ae:	4293      	cmp	r3, r2
 80032b0:	d130      	bne.n	8003314 <HAL_ADC_ConfigChannel+0x244>
 80032b2:	683b      	ldr	r3, [r7, #0]
 80032b4:	681b      	ldr	r3, [r3, #0]
 80032b6:	4a1f      	ldr	r2, [pc, #124]	@ (8003334 <HAL_ADC_ConfigChannel+0x264>)
 80032b8:	4293      	cmp	r3, r2
 80032ba:	d003      	beq.n	80032c4 <HAL_ADC_ConfigChannel+0x1f4>
 80032bc:	683b      	ldr	r3, [r7, #0]
 80032be:	681b      	ldr	r3, [r3, #0]
 80032c0:	2b11      	cmp	r3, #17
 80032c2:	d127      	bne.n	8003314 <HAL_ADC_ConfigChannel+0x244>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 80032c4:	68fb      	ldr	r3, [r7, #12]
 80032c6:	685b      	ldr	r3, [r3, #4]
 80032c8:	f423 0280 	bic.w	r2, r3, #4194304	@ 0x400000
 80032cc:	68fb      	ldr	r3, [r7, #12]
 80032ce:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 80032d0:	68fb      	ldr	r3, [r7, #12]
 80032d2:	685b      	ldr	r3, [r3, #4]
 80032d4:	f443 0200 	orr.w	r2, r3, #8388608	@ 0x800000
 80032d8:	68fb      	ldr	r3, [r7, #12]
 80032da:	605a      	str	r2, [r3, #4]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80032dc:	683b      	ldr	r3, [r7, #0]
 80032de:	681b      	ldr	r3, [r3, #0]
 80032e0:	4a14      	ldr	r2, [pc, #80]	@ (8003334 <HAL_ADC_ConfigChannel+0x264>)
 80032e2:	4293      	cmp	r3, r2
 80032e4:	d116      	bne.n	8003314 <HAL_ADC_ConfigChannel+0x244>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80032e6:	4b14      	ldr	r3, [pc, #80]	@ (8003338 <HAL_ADC_ConfigChannel+0x268>)
 80032e8:	681b      	ldr	r3, [r3, #0]
 80032ea:	4a14      	ldr	r2, [pc, #80]	@ (800333c <HAL_ADC_ConfigChannel+0x26c>)
 80032ec:	fba2 2303 	umull	r2, r3, r2, r3
 80032f0:	0c9a      	lsrs	r2, r3, #18
 80032f2:	4613      	mov	r3, r2
 80032f4:	009b      	lsls	r3, r3, #2
 80032f6:	4413      	add	r3, r2
 80032f8:	005b      	lsls	r3, r3, #1
 80032fa:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 80032fc:	e002      	b.n	8003304 <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 80032fe:	68bb      	ldr	r3, [r7, #8]
 8003300:	3b01      	subs	r3, #1
 8003302:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 8003304:	68bb      	ldr	r3, [r7, #8]
 8003306:	2b00      	cmp	r3, #0
 8003308:	bf14      	ite	ne
 800330a:	2301      	movne	r3, #1
 800330c:	2300      	moveq	r3, #0
 800330e:	b2db      	uxtb	r3, r3
 8003310:	2b00      	cmp	r3, #0
 8003312:	d1f4      	bne.n	80032fe <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	2200      	movs	r2, #0
 8003318:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return HAL_OK;
 800331c:	2300      	movs	r3, #0
}
 800331e:	4618      	mov	r0, r3
 8003320:	3714      	adds	r7, #20
 8003322:	46bd      	mov	sp, r7
 8003324:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003328:	4770      	bx	lr
 800332a:	bf00      	nop
 800332c:	40012300 	.word	0x40012300
 8003330:	40012000 	.word	0x40012000
 8003334:	10000012 	.word	0x10000012
 8003338:	20000000 	.word	0x20000000
 800333c:	431bde83 	.word	0x431bde83

08003340 <_ZL8ADC_InitP17ADC_HandleTypeDef>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef *hadc)
{
 8003340:	b480      	push	{r7}
 8003342:	b085      	sub	sp, #20
 8003344:	af00      	add	r7, sp, #0
 8003346:	6078      	str	r0, [r7, #4]

  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8003348:	4b79      	ldr	r3, [pc, #484]	@ (8003530 <_ZL8ADC_InitP17ADC_HandleTypeDef+0x1f0>)
 800334a:	60fb      	str	r3, [r7, #12]

  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 800334c:	68fb      	ldr	r3, [r7, #12]
 800334e:	685b      	ldr	r3, [r3, #4]
 8003350:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8003354:	68fb      	ldr	r3, [r7, #12]
 8003356:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8003358:	68fb      	ldr	r3, [r7, #12]
 800335a:	685a      	ldr	r2, [r3, #4]
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	685b      	ldr	r3, [r3, #4]
 8003360:	431a      	orrs	r2, r3
 8003362:	68fb      	ldr	r3, [r7, #12]
 8003364:	605a      	str	r2, [r3, #4]

  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	681b      	ldr	r3, [r3, #0]
 800336a:	685a      	ldr	r2, [r3, #4]
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	681b      	ldr	r3, [r3, #0]
 8003370:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8003374:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	681b      	ldr	r3, [r3, #0]
 800337a:	6859      	ldr	r1, [r3, #4]
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	691b      	ldr	r3, [r3, #16]
 8003380:	021a      	lsls	r2, r3, #8
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	681b      	ldr	r3, [r3, #0]
 8003386:	430a      	orrs	r2, r1
 8003388:	605a      	str	r2, [r3, #4]

  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	681b      	ldr	r3, [r3, #0]
 800338e:	685a      	ldr	r2, [r3, #4]
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	681b      	ldr	r3, [r3, #0]
 8003394:	f022 7240 	bic.w	r2, r2, #50331648	@ 0x3000000
 8003398:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	681b      	ldr	r3, [r3, #0]
 800339e:	6859      	ldr	r1, [r3, #4]
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	689a      	ldr	r2, [r3, #8]
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	681b      	ldr	r3, [r3, #0]
 80033a8:	430a      	orrs	r2, r1
 80033aa:	605a      	str	r2, [r3, #4]

  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	681b      	ldr	r3, [r3, #0]
 80033b0:	689a      	ldr	r2, [r3, #8]
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	681b      	ldr	r3, [r3, #0]
 80033b6:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80033ba:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	681b      	ldr	r3, [r3, #0]
 80033c0:	6899      	ldr	r1, [r3, #8]
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	68da      	ldr	r2, [r3, #12]
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	681b      	ldr	r3, [r3, #0]
 80033ca:	430a      	orrs	r2, r1
 80033cc:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80033d2:	4a58      	ldr	r2, [pc, #352]	@ (8003534 <_ZL8ADC_InitP17ADC_HandleTypeDef+0x1f4>)
 80033d4:	4293      	cmp	r3, r2
 80033d6:	d022      	beq.n	800341e <_ZL8ADC_InitP17ADC_HandleTypeDef+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	681b      	ldr	r3, [r3, #0]
 80033dc:	689a      	ldr	r2, [r3, #8]
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	681b      	ldr	r3, [r3, #0]
 80033e2:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 80033e6:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	681b      	ldr	r3, [r3, #0]
 80033ec:	6899      	ldr	r1, [r3, #8]
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	681b      	ldr	r3, [r3, #0]
 80033f6:	430a      	orrs	r2, r1
 80033f8:	609a      	str	r2, [r3, #8]

    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	681b      	ldr	r3, [r3, #0]
 80033fe:	689a      	ldr	r2, [r3, #8]
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	681b      	ldr	r3, [r3, #0]
 8003404:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8003408:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	681b      	ldr	r3, [r3, #0]
 800340e:	6899      	ldr	r1, [r3, #8]
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	681b      	ldr	r3, [r3, #0]
 8003418:	430a      	orrs	r2, r1
 800341a:	609a      	str	r2, [r3, #8]
 800341c:	e00f      	b.n	800343e <_ZL8ADC_InitP17ADC_HandleTypeDef+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	681b      	ldr	r3, [r3, #0]
 8003422:	689a      	ldr	r2, [r3, #8]
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	681b      	ldr	r3, [r3, #0]
 8003428:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 800342c:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	681b      	ldr	r3, [r3, #0]
 8003432:	689a      	ldr	r2, [r3, #8]
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	681b      	ldr	r3, [r3, #0]
 8003438:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 800343c:	609a      	str	r2, [r3, #8]
  }

  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	681b      	ldr	r3, [r3, #0]
 8003442:	689a      	ldr	r2, [r3, #8]
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	681b      	ldr	r3, [r3, #0]
 8003448:	f022 0202 	bic.w	r2, r2, #2
 800344c:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	681b      	ldr	r3, [r3, #0]
 8003452:	6899      	ldr	r1, [r3, #8]
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	7e1b      	ldrb	r3, [r3, #24]
 8003458:	005a      	lsls	r2, r3, #1
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	681b      	ldr	r3, [r3, #0]
 800345e:	430a      	orrs	r2, r1
 8003460:	609a      	str	r2, [r3, #8]

  if (hadc->Init.DiscontinuousConvMode != DISABLE)
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003468:	2b00      	cmp	r3, #0
 800346a:	d01b      	beq.n	80034a4 <_ZL8ADC_InitP17ADC_HandleTypeDef+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));

    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	681b      	ldr	r3, [r3, #0]
 8003470:	685a      	ldr	r2, [r3, #4]
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	681b      	ldr	r3, [r3, #0]
 8003476:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800347a:	605a      	str	r2, [r3, #4]

    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	681b      	ldr	r3, [r3, #0]
 8003480:	685a      	ldr	r2, [r3, #4]
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	681b      	ldr	r3, [r3, #0]
 8003486:	f422 4260 	bic.w	r2, r2, #57344	@ 0xe000
 800348a:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	681b      	ldr	r3, [r3, #0]
 8003490:	6859      	ldr	r1, [r3, #4]
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003496:	3b01      	subs	r3, #1
 8003498:	035a      	lsls	r2, r3, #13
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	681b      	ldr	r3, [r3, #0]
 800349e:	430a      	orrs	r2, r1
 80034a0:	605a      	str	r2, [r3, #4]
 80034a2:	e007      	b.n	80034b4 <_ZL8ADC_InitP17ADC_HandleTypeDef+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	681b      	ldr	r3, [r3, #0]
 80034a8:	685a      	ldr	r2, [r3, #4]
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	681b      	ldr	r3, [r3, #0]
 80034ae:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80034b2:	605a      	str	r2, [r3, #4]
  }

  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	681b      	ldr	r3, [r3, #0]
 80034b8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	681b      	ldr	r3, [r3, #0]
 80034be:	f422 0270 	bic.w	r2, r2, #15728640	@ 0xf00000
 80034c2:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	681b      	ldr	r3, [r3, #0]
 80034c8:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	69db      	ldr	r3, [r3, #28]
 80034ce:	3b01      	subs	r3, #1
 80034d0:	051a      	lsls	r2, r3, #20
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	681b      	ldr	r3, [r3, #0]
 80034d6:	430a      	orrs	r2, r1
 80034d8:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	681b      	ldr	r3, [r3, #0]
 80034de:	689a      	ldr	r2, [r3, #8]
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	681b      	ldr	r3, [r3, #0]
 80034e4:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 80034e8:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	681b      	ldr	r3, [r3, #0]
 80034ee:	6899      	ldr	r1, [r3, #8]
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 80034f6:	025a      	lsls	r2, r3, #9
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	681b      	ldr	r3, [r3, #0]
 80034fc:	430a      	orrs	r2, r1
 80034fe:	609a      	str	r2, [r3, #8]

  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	681b      	ldr	r3, [r3, #0]
 8003504:	689a      	ldr	r2, [r3, #8]
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	681b      	ldr	r3, [r3, #0]
 800350a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800350e:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	681b      	ldr	r3, [r3, #0]
 8003514:	6899      	ldr	r1, [r3, #8]
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	695b      	ldr	r3, [r3, #20]
 800351a:	029a      	lsls	r2, r3, #10
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	681b      	ldr	r3, [r3, #0]
 8003520:	430a      	orrs	r2, r1
 8003522:	609a      	str	r2, [r3, #8]
}
 8003524:	bf00      	nop
 8003526:	3714      	adds	r7, #20
 8003528:	46bd      	mov	sp, r7
 800352a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800352e:	4770      	bx	lr
 8003530:	40012300 	.word	0x40012300
 8003534:	0f000001 	.word	0x0f000001

08003538 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003538:	b480      	push	{r7}
 800353a:	b085      	sub	sp, #20
 800353c:	af00      	add	r7, sp, #0
 800353e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	f003 0307 	and.w	r3, r3, #7
 8003546:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003548:	4b0c      	ldr	r3, [pc, #48]	@ (800357c <__NVIC_SetPriorityGrouping+0x44>)
 800354a:	68db      	ldr	r3, [r3, #12]
 800354c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800354e:	68ba      	ldr	r2, [r7, #8]
 8003550:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8003554:	4013      	ands	r3, r2
 8003556:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003558:	68fb      	ldr	r3, [r7, #12]
 800355a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800355c:	68bb      	ldr	r3, [r7, #8]
 800355e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003560:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8003564:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003568:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800356a:	4a04      	ldr	r2, [pc, #16]	@ (800357c <__NVIC_SetPriorityGrouping+0x44>)
 800356c:	68bb      	ldr	r3, [r7, #8]
 800356e:	60d3      	str	r3, [r2, #12]
}
 8003570:	bf00      	nop
 8003572:	3714      	adds	r7, #20
 8003574:	46bd      	mov	sp, r7
 8003576:	f85d 7b04 	ldr.w	r7, [sp], #4
 800357a:	4770      	bx	lr
 800357c:	e000ed00 	.word	0xe000ed00

08003580 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003580:	b480      	push	{r7}
 8003582:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003584:	4b04      	ldr	r3, [pc, #16]	@ (8003598 <__NVIC_GetPriorityGrouping+0x18>)
 8003586:	68db      	ldr	r3, [r3, #12]
 8003588:	0a1b      	lsrs	r3, r3, #8
 800358a:	f003 0307 	and.w	r3, r3, #7
}
 800358e:	4618      	mov	r0, r3
 8003590:	46bd      	mov	sp, r7
 8003592:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003596:	4770      	bx	lr
 8003598:	e000ed00 	.word	0xe000ed00

0800359c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800359c:	b480      	push	{r7}
 800359e:	b083      	sub	sp, #12
 80035a0:	af00      	add	r7, sp, #0
 80035a2:	4603      	mov	r3, r0
 80035a4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80035a6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80035aa:	2b00      	cmp	r3, #0
 80035ac:	db0b      	blt.n	80035c6 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80035ae:	79fb      	ldrb	r3, [r7, #7]
 80035b0:	f003 021f 	and.w	r2, r3, #31
 80035b4:	4907      	ldr	r1, [pc, #28]	@ (80035d4 <__NVIC_EnableIRQ+0x38>)
 80035b6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80035ba:	095b      	lsrs	r3, r3, #5
 80035bc:	2001      	movs	r0, #1
 80035be:	fa00 f202 	lsl.w	r2, r0, r2
 80035c2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80035c6:	bf00      	nop
 80035c8:	370c      	adds	r7, #12
 80035ca:	46bd      	mov	sp, r7
 80035cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035d0:	4770      	bx	lr
 80035d2:	bf00      	nop
 80035d4:	e000e100 	.word	0xe000e100

080035d8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80035d8:	b480      	push	{r7}
 80035da:	b083      	sub	sp, #12
 80035dc:	af00      	add	r7, sp, #0
 80035de:	4603      	mov	r3, r0
 80035e0:	6039      	str	r1, [r7, #0]
 80035e2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80035e4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80035e8:	2b00      	cmp	r3, #0
 80035ea:	db0a      	blt.n	8003602 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80035ec:	683b      	ldr	r3, [r7, #0]
 80035ee:	b2da      	uxtb	r2, r3
 80035f0:	490c      	ldr	r1, [pc, #48]	@ (8003624 <__NVIC_SetPriority+0x4c>)
 80035f2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80035f6:	0112      	lsls	r2, r2, #4
 80035f8:	b2d2      	uxtb	r2, r2
 80035fa:	440b      	add	r3, r1
 80035fc:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003600:	e00a      	b.n	8003618 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003602:	683b      	ldr	r3, [r7, #0]
 8003604:	b2da      	uxtb	r2, r3
 8003606:	4908      	ldr	r1, [pc, #32]	@ (8003628 <__NVIC_SetPriority+0x50>)
 8003608:	79fb      	ldrb	r3, [r7, #7]
 800360a:	f003 030f 	and.w	r3, r3, #15
 800360e:	3b04      	subs	r3, #4
 8003610:	0112      	lsls	r2, r2, #4
 8003612:	b2d2      	uxtb	r2, r2
 8003614:	440b      	add	r3, r1
 8003616:	761a      	strb	r2, [r3, #24]
}
 8003618:	bf00      	nop
 800361a:	370c      	adds	r7, #12
 800361c:	46bd      	mov	sp, r7
 800361e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003622:	4770      	bx	lr
 8003624:	e000e100 	.word	0xe000e100
 8003628:	e000ed00 	.word	0xe000ed00

0800362c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800362c:	b480      	push	{r7}
 800362e:	b089      	sub	sp, #36	@ 0x24
 8003630:	af00      	add	r7, sp, #0
 8003632:	60f8      	str	r0, [r7, #12]
 8003634:	60b9      	str	r1, [r7, #8]
 8003636:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003638:	68fb      	ldr	r3, [r7, #12]
 800363a:	f003 0307 	and.w	r3, r3, #7
 800363e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003640:	69fb      	ldr	r3, [r7, #28]
 8003642:	f1c3 0307 	rsb	r3, r3, #7
 8003646:	2b04      	cmp	r3, #4
 8003648:	bf28      	it	cs
 800364a:	2304      	movcs	r3, #4
 800364c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800364e:	69fb      	ldr	r3, [r7, #28]
 8003650:	3304      	adds	r3, #4
 8003652:	2b06      	cmp	r3, #6
 8003654:	d902      	bls.n	800365c <NVIC_EncodePriority+0x30>
 8003656:	69fb      	ldr	r3, [r7, #28]
 8003658:	3b03      	subs	r3, #3
 800365a:	e000      	b.n	800365e <NVIC_EncodePriority+0x32>
 800365c:	2300      	movs	r3, #0
 800365e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003660:	2201      	movs	r2, #1
 8003662:	69bb      	ldr	r3, [r7, #24]
 8003664:	fa02 f303 	lsl.w	r3, r2, r3
 8003668:	1e5a      	subs	r2, r3, #1
 800366a:	68bb      	ldr	r3, [r7, #8]
 800366c:	401a      	ands	r2, r3
 800366e:	697b      	ldr	r3, [r7, #20]
 8003670:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003672:	2101      	movs	r1, #1
 8003674:	697b      	ldr	r3, [r7, #20]
 8003676:	fa01 f303 	lsl.w	r3, r1, r3
 800367a:	1e59      	subs	r1, r3, #1
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	400b      	ands	r3, r1
         );
 8003680:	4313      	orrs	r3, r2
}
 8003682:	4618      	mov	r0, r3
 8003684:	3724      	adds	r7, #36	@ 0x24
 8003686:	46bd      	mov	sp, r7
 8003688:	f85d 7b04 	ldr.w	r7, [sp], #4
 800368c:	4770      	bx	lr
	...

08003690 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003690:	b580      	push	{r7, lr}
 8003692:	b082      	sub	sp, #8
 8003694:	af00      	add	r7, sp, #0
 8003696:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	3b01      	subs	r3, #1
 800369c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80036a0:	d301      	bcc.n	80036a6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80036a2:	2301      	movs	r3, #1
 80036a4:	e00f      	b.n	80036c6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80036a6:	4a0a      	ldr	r2, [pc, #40]	@ (80036d0 <SysTick_Config+0x40>)
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	3b01      	subs	r3, #1
 80036ac:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80036ae:	210f      	movs	r1, #15
 80036b0:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80036b4:	f7ff ff90 	bl	80035d8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80036b8:	4b05      	ldr	r3, [pc, #20]	@ (80036d0 <SysTick_Config+0x40>)
 80036ba:	2200      	movs	r2, #0
 80036bc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80036be:	4b04      	ldr	r3, [pc, #16]	@ (80036d0 <SysTick_Config+0x40>)
 80036c0:	2207      	movs	r2, #7
 80036c2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80036c4:	2300      	movs	r3, #0
}
 80036c6:	4618      	mov	r0, r3
 80036c8:	3708      	adds	r7, #8
 80036ca:	46bd      	mov	sp, r7
 80036cc:	bd80      	pop	{r7, pc}
 80036ce:	bf00      	nop
 80036d0:	e000e010 	.word	0xe000e010

080036d4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80036d4:	b580      	push	{r7, lr}
 80036d6:	b082      	sub	sp, #8
 80036d8:	af00      	add	r7, sp, #0
 80036da:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80036dc:	6878      	ldr	r0, [r7, #4]
 80036de:	f7ff ff2b 	bl	8003538 <__NVIC_SetPriorityGrouping>
}
 80036e2:	bf00      	nop
 80036e4:	3708      	adds	r7, #8
 80036e6:	46bd      	mov	sp, r7
 80036e8:	bd80      	pop	{r7, pc}

080036ea <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80036ea:	b580      	push	{r7, lr}
 80036ec:	b086      	sub	sp, #24
 80036ee:	af00      	add	r7, sp, #0
 80036f0:	4603      	mov	r3, r0
 80036f2:	60b9      	str	r1, [r7, #8]
 80036f4:	607a      	str	r2, [r7, #4]
 80036f6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80036f8:	2300      	movs	r3, #0
 80036fa:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80036fc:	f7ff ff40 	bl	8003580 <__NVIC_GetPriorityGrouping>
 8003700:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003702:	687a      	ldr	r2, [r7, #4]
 8003704:	68b9      	ldr	r1, [r7, #8]
 8003706:	6978      	ldr	r0, [r7, #20]
 8003708:	f7ff ff90 	bl	800362c <NVIC_EncodePriority>
 800370c:	4602      	mov	r2, r0
 800370e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003712:	4611      	mov	r1, r2
 8003714:	4618      	mov	r0, r3
 8003716:	f7ff ff5f 	bl	80035d8 <__NVIC_SetPriority>
}
 800371a:	bf00      	nop
 800371c:	3718      	adds	r7, #24
 800371e:	46bd      	mov	sp, r7
 8003720:	bd80      	pop	{r7, pc}

08003722 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003722:	b580      	push	{r7, lr}
 8003724:	b082      	sub	sp, #8
 8003726:	af00      	add	r7, sp, #0
 8003728:	4603      	mov	r3, r0
 800372a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800372c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003730:	4618      	mov	r0, r3
 8003732:	f7ff ff33 	bl	800359c <__NVIC_EnableIRQ>
}
 8003736:	bf00      	nop
 8003738:	3708      	adds	r7, #8
 800373a:	46bd      	mov	sp, r7
 800373c:	bd80      	pop	{r7, pc}

0800373e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800373e:	b580      	push	{r7, lr}
 8003740:	b082      	sub	sp, #8
 8003742:	af00      	add	r7, sp, #0
 8003744:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003746:	6878      	ldr	r0, [r7, #4]
 8003748:	f7ff ffa2 	bl	8003690 <SysTick_Config>
 800374c:	4603      	mov	r3, r0
}
 800374e:	4618      	mov	r0, r3
 8003750:	3708      	adds	r7, #8
 8003752:	46bd      	mov	sp, r7
 8003754:	bd80      	pop	{r7, pc}
	...

08003758 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003758:	b480      	push	{r7}
 800375a:	b089      	sub	sp, #36	@ 0x24
 800375c:	af00      	add	r7, sp, #0
 800375e:	6078      	str	r0, [r7, #4]
 8003760:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8003762:	2300      	movs	r3, #0
 8003764:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8003766:	2300      	movs	r3, #0
 8003768:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800376a:	2300      	movs	r3, #0
 800376c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800376e:	2300      	movs	r3, #0
 8003770:	61fb      	str	r3, [r7, #28]
 8003772:	e165      	b.n	8003a40 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8003774:	2201      	movs	r2, #1
 8003776:	69fb      	ldr	r3, [r7, #28]
 8003778:	fa02 f303 	lsl.w	r3, r2, r3
 800377c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800377e:	683b      	ldr	r3, [r7, #0]
 8003780:	681b      	ldr	r3, [r3, #0]
 8003782:	697a      	ldr	r2, [r7, #20]
 8003784:	4013      	ands	r3, r2
 8003786:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8003788:	693a      	ldr	r2, [r7, #16]
 800378a:	697b      	ldr	r3, [r7, #20]
 800378c:	429a      	cmp	r2, r3
 800378e:	f040 8154 	bne.w	8003a3a <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003792:	683b      	ldr	r3, [r7, #0]
 8003794:	685b      	ldr	r3, [r3, #4]
 8003796:	f003 0303 	and.w	r3, r3, #3
 800379a:	2b01      	cmp	r3, #1
 800379c:	d005      	beq.n	80037aa <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800379e:	683b      	ldr	r3, [r7, #0]
 80037a0:	685b      	ldr	r3, [r3, #4]
 80037a2:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80037a6:	2b02      	cmp	r3, #2
 80037a8:	d130      	bne.n	800380c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	689b      	ldr	r3, [r3, #8]
 80037ae:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80037b0:	69fb      	ldr	r3, [r7, #28]
 80037b2:	005b      	lsls	r3, r3, #1
 80037b4:	2203      	movs	r2, #3
 80037b6:	fa02 f303 	lsl.w	r3, r2, r3
 80037ba:	43db      	mvns	r3, r3
 80037bc:	69ba      	ldr	r2, [r7, #24]
 80037be:	4013      	ands	r3, r2
 80037c0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80037c2:	683b      	ldr	r3, [r7, #0]
 80037c4:	68da      	ldr	r2, [r3, #12]
 80037c6:	69fb      	ldr	r3, [r7, #28]
 80037c8:	005b      	lsls	r3, r3, #1
 80037ca:	fa02 f303 	lsl.w	r3, r2, r3
 80037ce:	69ba      	ldr	r2, [r7, #24]
 80037d0:	4313      	orrs	r3, r2
 80037d2:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	69ba      	ldr	r2, [r7, #24]
 80037d8:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	685b      	ldr	r3, [r3, #4]
 80037de:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80037e0:	2201      	movs	r2, #1
 80037e2:	69fb      	ldr	r3, [r7, #28]
 80037e4:	fa02 f303 	lsl.w	r3, r2, r3
 80037e8:	43db      	mvns	r3, r3
 80037ea:	69ba      	ldr	r2, [r7, #24]
 80037ec:	4013      	ands	r3, r2
 80037ee:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80037f0:	683b      	ldr	r3, [r7, #0]
 80037f2:	685b      	ldr	r3, [r3, #4]
 80037f4:	091b      	lsrs	r3, r3, #4
 80037f6:	f003 0201 	and.w	r2, r3, #1
 80037fa:	69fb      	ldr	r3, [r7, #28]
 80037fc:	fa02 f303 	lsl.w	r3, r2, r3
 8003800:	69ba      	ldr	r2, [r7, #24]
 8003802:	4313      	orrs	r3, r2
 8003804:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	69ba      	ldr	r2, [r7, #24]
 800380a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800380c:	683b      	ldr	r3, [r7, #0]
 800380e:	685b      	ldr	r3, [r3, #4]
 8003810:	f003 0303 	and.w	r3, r3, #3
 8003814:	2b03      	cmp	r3, #3
 8003816:	d017      	beq.n	8003848 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	68db      	ldr	r3, [r3, #12]
 800381c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800381e:	69fb      	ldr	r3, [r7, #28]
 8003820:	005b      	lsls	r3, r3, #1
 8003822:	2203      	movs	r2, #3
 8003824:	fa02 f303 	lsl.w	r3, r2, r3
 8003828:	43db      	mvns	r3, r3
 800382a:	69ba      	ldr	r2, [r7, #24]
 800382c:	4013      	ands	r3, r2
 800382e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003830:	683b      	ldr	r3, [r7, #0]
 8003832:	689a      	ldr	r2, [r3, #8]
 8003834:	69fb      	ldr	r3, [r7, #28]
 8003836:	005b      	lsls	r3, r3, #1
 8003838:	fa02 f303 	lsl.w	r3, r2, r3
 800383c:	69ba      	ldr	r2, [r7, #24]
 800383e:	4313      	orrs	r3, r2
 8003840:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	69ba      	ldr	r2, [r7, #24]
 8003846:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003848:	683b      	ldr	r3, [r7, #0]
 800384a:	685b      	ldr	r3, [r3, #4]
 800384c:	f003 0303 	and.w	r3, r3, #3
 8003850:	2b02      	cmp	r3, #2
 8003852:	d123      	bne.n	800389c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003854:	69fb      	ldr	r3, [r7, #28]
 8003856:	08da      	lsrs	r2, r3, #3
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	3208      	adds	r2, #8
 800385c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003860:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8003862:	69fb      	ldr	r3, [r7, #28]
 8003864:	f003 0307 	and.w	r3, r3, #7
 8003868:	009b      	lsls	r3, r3, #2
 800386a:	220f      	movs	r2, #15
 800386c:	fa02 f303 	lsl.w	r3, r2, r3
 8003870:	43db      	mvns	r3, r3
 8003872:	69ba      	ldr	r2, [r7, #24]
 8003874:	4013      	ands	r3, r2
 8003876:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8003878:	683b      	ldr	r3, [r7, #0]
 800387a:	691a      	ldr	r2, [r3, #16]
 800387c:	69fb      	ldr	r3, [r7, #28]
 800387e:	f003 0307 	and.w	r3, r3, #7
 8003882:	009b      	lsls	r3, r3, #2
 8003884:	fa02 f303 	lsl.w	r3, r2, r3
 8003888:	69ba      	ldr	r2, [r7, #24]
 800388a:	4313      	orrs	r3, r2
 800388c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800388e:	69fb      	ldr	r3, [r7, #28]
 8003890:	08da      	lsrs	r2, r3, #3
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	3208      	adds	r2, #8
 8003896:	69b9      	ldr	r1, [r7, #24]
 8003898:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	681b      	ldr	r3, [r3, #0]
 80038a0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80038a2:	69fb      	ldr	r3, [r7, #28]
 80038a4:	005b      	lsls	r3, r3, #1
 80038a6:	2203      	movs	r2, #3
 80038a8:	fa02 f303 	lsl.w	r3, r2, r3
 80038ac:	43db      	mvns	r3, r3
 80038ae:	69ba      	ldr	r2, [r7, #24]
 80038b0:	4013      	ands	r3, r2
 80038b2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80038b4:	683b      	ldr	r3, [r7, #0]
 80038b6:	685b      	ldr	r3, [r3, #4]
 80038b8:	f003 0203 	and.w	r2, r3, #3
 80038bc:	69fb      	ldr	r3, [r7, #28]
 80038be:	005b      	lsls	r3, r3, #1
 80038c0:	fa02 f303 	lsl.w	r3, r2, r3
 80038c4:	69ba      	ldr	r2, [r7, #24]
 80038c6:	4313      	orrs	r3, r2
 80038c8:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	69ba      	ldr	r2, [r7, #24]
 80038ce:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80038d0:	683b      	ldr	r3, [r7, #0]
 80038d2:	685b      	ldr	r3, [r3, #4]
 80038d4:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80038d8:	2b00      	cmp	r3, #0
 80038da:	f000 80ae 	beq.w	8003a3a <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80038de:	2300      	movs	r3, #0
 80038e0:	60fb      	str	r3, [r7, #12]
 80038e2:	4b5d      	ldr	r3, [pc, #372]	@ (8003a58 <HAL_GPIO_Init+0x300>)
 80038e4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80038e6:	4a5c      	ldr	r2, [pc, #368]	@ (8003a58 <HAL_GPIO_Init+0x300>)
 80038e8:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80038ec:	6453      	str	r3, [r2, #68]	@ 0x44
 80038ee:	4b5a      	ldr	r3, [pc, #360]	@ (8003a58 <HAL_GPIO_Init+0x300>)
 80038f0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80038f2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80038f6:	60fb      	str	r3, [r7, #12]
 80038f8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80038fa:	4a58      	ldr	r2, [pc, #352]	@ (8003a5c <HAL_GPIO_Init+0x304>)
 80038fc:	69fb      	ldr	r3, [r7, #28]
 80038fe:	089b      	lsrs	r3, r3, #2
 8003900:	3302      	adds	r3, #2
 8003902:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003906:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8003908:	69fb      	ldr	r3, [r7, #28]
 800390a:	f003 0303 	and.w	r3, r3, #3
 800390e:	009b      	lsls	r3, r3, #2
 8003910:	220f      	movs	r2, #15
 8003912:	fa02 f303 	lsl.w	r3, r2, r3
 8003916:	43db      	mvns	r3, r3
 8003918:	69ba      	ldr	r2, [r7, #24]
 800391a:	4013      	ands	r3, r2
 800391c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	4a4f      	ldr	r2, [pc, #316]	@ (8003a60 <HAL_GPIO_Init+0x308>)
 8003922:	4293      	cmp	r3, r2
 8003924:	d025      	beq.n	8003972 <HAL_GPIO_Init+0x21a>
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	4a4e      	ldr	r2, [pc, #312]	@ (8003a64 <HAL_GPIO_Init+0x30c>)
 800392a:	4293      	cmp	r3, r2
 800392c:	d01f      	beq.n	800396e <HAL_GPIO_Init+0x216>
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	4a4d      	ldr	r2, [pc, #308]	@ (8003a68 <HAL_GPIO_Init+0x310>)
 8003932:	4293      	cmp	r3, r2
 8003934:	d019      	beq.n	800396a <HAL_GPIO_Init+0x212>
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	4a4c      	ldr	r2, [pc, #304]	@ (8003a6c <HAL_GPIO_Init+0x314>)
 800393a:	4293      	cmp	r3, r2
 800393c:	d013      	beq.n	8003966 <HAL_GPIO_Init+0x20e>
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	4a4b      	ldr	r2, [pc, #300]	@ (8003a70 <HAL_GPIO_Init+0x318>)
 8003942:	4293      	cmp	r3, r2
 8003944:	d00d      	beq.n	8003962 <HAL_GPIO_Init+0x20a>
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	4a4a      	ldr	r2, [pc, #296]	@ (8003a74 <HAL_GPIO_Init+0x31c>)
 800394a:	4293      	cmp	r3, r2
 800394c:	d007      	beq.n	800395e <HAL_GPIO_Init+0x206>
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	4a49      	ldr	r2, [pc, #292]	@ (8003a78 <HAL_GPIO_Init+0x320>)
 8003952:	4293      	cmp	r3, r2
 8003954:	d101      	bne.n	800395a <HAL_GPIO_Init+0x202>
 8003956:	2306      	movs	r3, #6
 8003958:	e00c      	b.n	8003974 <HAL_GPIO_Init+0x21c>
 800395a:	2307      	movs	r3, #7
 800395c:	e00a      	b.n	8003974 <HAL_GPIO_Init+0x21c>
 800395e:	2305      	movs	r3, #5
 8003960:	e008      	b.n	8003974 <HAL_GPIO_Init+0x21c>
 8003962:	2304      	movs	r3, #4
 8003964:	e006      	b.n	8003974 <HAL_GPIO_Init+0x21c>
 8003966:	2303      	movs	r3, #3
 8003968:	e004      	b.n	8003974 <HAL_GPIO_Init+0x21c>
 800396a:	2302      	movs	r3, #2
 800396c:	e002      	b.n	8003974 <HAL_GPIO_Init+0x21c>
 800396e:	2301      	movs	r3, #1
 8003970:	e000      	b.n	8003974 <HAL_GPIO_Init+0x21c>
 8003972:	2300      	movs	r3, #0
 8003974:	69fa      	ldr	r2, [r7, #28]
 8003976:	f002 0203 	and.w	r2, r2, #3
 800397a:	0092      	lsls	r2, r2, #2
 800397c:	4093      	lsls	r3, r2
 800397e:	69ba      	ldr	r2, [r7, #24]
 8003980:	4313      	orrs	r3, r2
 8003982:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003984:	4935      	ldr	r1, [pc, #212]	@ (8003a5c <HAL_GPIO_Init+0x304>)
 8003986:	69fb      	ldr	r3, [r7, #28]
 8003988:	089b      	lsrs	r3, r3, #2
 800398a:	3302      	adds	r3, #2
 800398c:	69ba      	ldr	r2, [r7, #24]
 800398e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003992:	4b3a      	ldr	r3, [pc, #232]	@ (8003a7c <HAL_GPIO_Init+0x324>)
 8003994:	689b      	ldr	r3, [r3, #8]
 8003996:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003998:	693b      	ldr	r3, [r7, #16]
 800399a:	43db      	mvns	r3, r3
 800399c:	69ba      	ldr	r2, [r7, #24]
 800399e:	4013      	ands	r3, r2
 80039a0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80039a2:	683b      	ldr	r3, [r7, #0]
 80039a4:	685b      	ldr	r3, [r3, #4]
 80039a6:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80039aa:	2b00      	cmp	r3, #0
 80039ac:	d003      	beq.n	80039b6 <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 80039ae:	69ba      	ldr	r2, [r7, #24]
 80039b0:	693b      	ldr	r3, [r7, #16]
 80039b2:	4313      	orrs	r3, r2
 80039b4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80039b6:	4a31      	ldr	r2, [pc, #196]	@ (8003a7c <HAL_GPIO_Init+0x324>)
 80039b8:	69bb      	ldr	r3, [r7, #24]
 80039ba:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80039bc:	4b2f      	ldr	r3, [pc, #188]	@ (8003a7c <HAL_GPIO_Init+0x324>)
 80039be:	68db      	ldr	r3, [r3, #12]
 80039c0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80039c2:	693b      	ldr	r3, [r7, #16]
 80039c4:	43db      	mvns	r3, r3
 80039c6:	69ba      	ldr	r2, [r7, #24]
 80039c8:	4013      	ands	r3, r2
 80039ca:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80039cc:	683b      	ldr	r3, [r7, #0]
 80039ce:	685b      	ldr	r3, [r3, #4]
 80039d0:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80039d4:	2b00      	cmp	r3, #0
 80039d6:	d003      	beq.n	80039e0 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 80039d8:	69ba      	ldr	r2, [r7, #24]
 80039da:	693b      	ldr	r3, [r7, #16]
 80039dc:	4313      	orrs	r3, r2
 80039de:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80039e0:	4a26      	ldr	r2, [pc, #152]	@ (8003a7c <HAL_GPIO_Init+0x324>)
 80039e2:	69bb      	ldr	r3, [r7, #24]
 80039e4:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80039e6:	4b25      	ldr	r3, [pc, #148]	@ (8003a7c <HAL_GPIO_Init+0x324>)
 80039e8:	685b      	ldr	r3, [r3, #4]
 80039ea:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80039ec:	693b      	ldr	r3, [r7, #16]
 80039ee:	43db      	mvns	r3, r3
 80039f0:	69ba      	ldr	r2, [r7, #24]
 80039f2:	4013      	ands	r3, r2
 80039f4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80039f6:	683b      	ldr	r3, [r7, #0]
 80039f8:	685b      	ldr	r3, [r3, #4]
 80039fa:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80039fe:	2b00      	cmp	r3, #0
 8003a00:	d003      	beq.n	8003a0a <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 8003a02:	69ba      	ldr	r2, [r7, #24]
 8003a04:	693b      	ldr	r3, [r7, #16]
 8003a06:	4313      	orrs	r3, r2
 8003a08:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8003a0a:	4a1c      	ldr	r2, [pc, #112]	@ (8003a7c <HAL_GPIO_Init+0x324>)
 8003a0c:	69bb      	ldr	r3, [r7, #24]
 8003a0e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003a10:	4b1a      	ldr	r3, [pc, #104]	@ (8003a7c <HAL_GPIO_Init+0x324>)
 8003a12:	681b      	ldr	r3, [r3, #0]
 8003a14:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003a16:	693b      	ldr	r3, [r7, #16]
 8003a18:	43db      	mvns	r3, r3
 8003a1a:	69ba      	ldr	r2, [r7, #24]
 8003a1c:	4013      	ands	r3, r2
 8003a1e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8003a20:	683b      	ldr	r3, [r7, #0]
 8003a22:	685b      	ldr	r3, [r3, #4]
 8003a24:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003a28:	2b00      	cmp	r3, #0
 8003a2a:	d003      	beq.n	8003a34 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8003a2c:	69ba      	ldr	r2, [r7, #24]
 8003a2e:	693b      	ldr	r3, [r7, #16]
 8003a30:	4313      	orrs	r3, r2
 8003a32:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8003a34:	4a11      	ldr	r2, [pc, #68]	@ (8003a7c <HAL_GPIO_Init+0x324>)
 8003a36:	69bb      	ldr	r3, [r7, #24]
 8003a38:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003a3a:	69fb      	ldr	r3, [r7, #28]
 8003a3c:	3301      	adds	r3, #1
 8003a3e:	61fb      	str	r3, [r7, #28]
 8003a40:	69fb      	ldr	r3, [r7, #28]
 8003a42:	2b0f      	cmp	r3, #15
 8003a44:	f67f ae96 	bls.w	8003774 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8003a48:	bf00      	nop
 8003a4a:	bf00      	nop
 8003a4c:	3724      	adds	r7, #36	@ 0x24
 8003a4e:	46bd      	mov	sp, r7
 8003a50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a54:	4770      	bx	lr
 8003a56:	bf00      	nop
 8003a58:	40023800 	.word	0x40023800
 8003a5c:	40013800 	.word	0x40013800
 8003a60:	40020000 	.word	0x40020000
 8003a64:	40020400 	.word	0x40020400
 8003a68:	40020800 	.word	0x40020800
 8003a6c:	40020c00 	.word	0x40020c00
 8003a70:	40021000 	.word	0x40021000
 8003a74:	40021400 	.word	0x40021400
 8003a78:	40021800 	.word	0x40021800
 8003a7c:	40013c00 	.word	0x40013c00

08003a80 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003a80:	b480      	push	{r7}
 8003a82:	b083      	sub	sp, #12
 8003a84:	af00      	add	r7, sp, #0
 8003a86:	6078      	str	r0, [r7, #4]
 8003a88:	460b      	mov	r3, r1
 8003a8a:	807b      	strh	r3, [r7, #2]
 8003a8c:	4613      	mov	r3, r2
 8003a8e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003a90:	787b      	ldrb	r3, [r7, #1]
 8003a92:	2b00      	cmp	r3, #0
 8003a94:	d003      	beq.n	8003a9e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003a96:	887a      	ldrh	r2, [r7, #2]
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8003a9c:	e003      	b.n	8003aa6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8003a9e:	887b      	ldrh	r3, [r7, #2]
 8003aa0:	041a      	lsls	r2, r3, #16
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	619a      	str	r2, [r3, #24]
}
 8003aa6:	bf00      	nop
 8003aa8:	370c      	adds	r7, #12
 8003aaa:	46bd      	mov	sp, r7
 8003aac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ab0:	4770      	bx	lr
	...

08003ab4 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8003ab4:	b580      	push	{r7, lr}
 8003ab6:	b082      	sub	sp, #8
 8003ab8:	af00      	add	r7, sp, #0
 8003aba:	4603      	mov	r3, r0
 8003abc:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8003abe:	4b0b      	ldr	r3, [pc, #44]	@ (8003aec <HAL_GPIO_EXTI_IRQHandler+0x38>)
 8003ac0:	695a      	ldr	r2, [r3, #20]
 8003ac2:	88fb      	ldrh	r3, [r7, #6]
 8003ac4:	4013      	ands	r3, r2
 8003ac6:	2b00      	cmp	r3, #0
 8003ac8:	bf14      	ite	ne
 8003aca:	2301      	movne	r3, #1
 8003acc:	2300      	moveq	r3, #0
 8003ace:	b2db      	uxtb	r3, r3
 8003ad0:	2b00      	cmp	r3, #0
 8003ad2:	d006      	beq.n	8003ae2 <HAL_GPIO_EXTI_IRQHandler+0x2e>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8003ad4:	4a05      	ldr	r2, [pc, #20]	@ (8003aec <HAL_GPIO_EXTI_IRQHandler+0x38>)
 8003ad6:	88fb      	ldrh	r3, [r7, #6]
 8003ad8:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8003ada:	88fb      	ldrh	r3, [r7, #6]
 8003adc:	4618      	mov	r0, r3
 8003ade:	f000 f807 	bl	8003af0 <HAL_GPIO_EXTI_Callback>
  }
}
 8003ae2:	bf00      	nop
 8003ae4:	3708      	adds	r7, #8
 8003ae6:	46bd      	mov	sp, r7
 8003ae8:	bd80      	pop	{r7, pc}
 8003aea:	bf00      	nop
 8003aec:	40013c00 	.word	0x40013c00

08003af0 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8003af0:	b480      	push	{r7}
 8003af2:	b083      	sub	sp, #12
 8003af4:	af00      	add	r7, sp, #0
 8003af6:	4603      	mov	r3, r0
 8003af8:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8003afa:	bf00      	nop
 8003afc:	370c      	adds	r7, #12
 8003afe:	46bd      	mov	sp, r7
 8003b00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b04:	4770      	bx	lr
	...

08003b08 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003b08:	b580      	push	{r7, lr}
 8003b0a:	b084      	sub	sp, #16
 8003b0c:	af00      	add	r7, sp, #0
 8003b0e:	6078      	str	r0, [r7, #4]
 8003b10:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	2b00      	cmp	r3, #0
 8003b16:	d101      	bne.n	8003b1c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003b18:	2301      	movs	r3, #1
 8003b1a:	e0fa      	b.n	8003d12 <HAL_RCC_ClockConfig+0x20a>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003b1c:	4b7f      	ldr	r3, [pc, #508]	@ (8003d1c <HAL_RCC_ClockConfig+0x214>)
 8003b1e:	681b      	ldr	r3, [r3, #0]
 8003b20:	f003 030f 	and.w	r3, r3, #15
 8003b24:	683a      	ldr	r2, [r7, #0]
 8003b26:	429a      	cmp	r2, r3
 8003b28:	bf8c      	ite	hi
 8003b2a:	2301      	movhi	r3, #1
 8003b2c:	2300      	movls	r3, #0
 8003b2e:	b2db      	uxtb	r3, r3
 8003b30:	2b00      	cmp	r3, #0
 8003b32:	d011      	beq.n	8003b58 <HAL_RCC_ClockConfig+0x50>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003b34:	4b79      	ldr	r3, [pc, #484]	@ (8003d1c <HAL_RCC_ClockConfig+0x214>)
 8003b36:	683a      	ldr	r2, [r7, #0]
 8003b38:	b2d2      	uxtb	r2, r2
 8003b3a:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003b3c:	4b77      	ldr	r3, [pc, #476]	@ (8003d1c <HAL_RCC_ClockConfig+0x214>)
 8003b3e:	681b      	ldr	r3, [r3, #0]
 8003b40:	f003 030f 	and.w	r3, r3, #15
 8003b44:	683a      	ldr	r2, [r7, #0]
 8003b46:	429a      	cmp	r2, r3
 8003b48:	bf14      	ite	ne
 8003b4a:	2301      	movne	r3, #1
 8003b4c:	2300      	moveq	r3, #0
 8003b4e:	b2db      	uxtb	r3, r3
 8003b50:	2b00      	cmp	r3, #0
 8003b52:	d001      	beq.n	8003b58 <HAL_RCC_ClockConfig+0x50>
    {
      return HAL_ERROR;
 8003b54:	2301      	movs	r3, #1
 8003b56:	e0dc      	b.n	8003d12 <HAL_RCC_ClockConfig+0x20a>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	681b      	ldr	r3, [r3, #0]
 8003b5c:	f003 0302 	and.w	r3, r3, #2
 8003b60:	2b00      	cmp	r3, #0
 8003b62:	d020      	beq.n	8003ba6 <HAL_RCC_ClockConfig+0x9e>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	681b      	ldr	r3, [r3, #0]
 8003b68:	f003 0304 	and.w	r3, r3, #4
 8003b6c:	2b00      	cmp	r3, #0
 8003b6e:	d005      	beq.n	8003b7c <HAL_RCC_ClockConfig+0x74>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003b70:	4b6b      	ldr	r3, [pc, #428]	@ (8003d20 <HAL_RCC_ClockConfig+0x218>)
 8003b72:	689b      	ldr	r3, [r3, #8]
 8003b74:	4a6a      	ldr	r2, [pc, #424]	@ (8003d20 <HAL_RCC_ClockConfig+0x218>)
 8003b76:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8003b7a:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	681b      	ldr	r3, [r3, #0]
 8003b80:	f003 0308 	and.w	r3, r3, #8
 8003b84:	2b00      	cmp	r3, #0
 8003b86:	d005      	beq.n	8003b94 <HAL_RCC_ClockConfig+0x8c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003b88:	4b65      	ldr	r3, [pc, #404]	@ (8003d20 <HAL_RCC_ClockConfig+0x218>)
 8003b8a:	689b      	ldr	r3, [r3, #8]
 8003b8c:	4a64      	ldr	r2, [pc, #400]	@ (8003d20 <HAL_RCC_ClockConfig+0x218>)
 8003b8e:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8003b92:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003b94:	4b62      	ldr	r3, [pc, #392]	@ (8003d20 <HAL_RCC_ClockConfig+0x218>)
 8003b96:	689b      	ldr	r3, [r3, #8]
 8003b98:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	689b      	ldr	r3, [r3, #8]
 8003ba0:	495f      	ldr	r1, [pc, #380]	@ (8003d20 <HAL_RCC_ClockConfig+0x218>)
 8003ba2:	4313      	orrs	r3, r2
 8003ba4:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	681b      	ldr	r3, [r3, #0]
 8003baa:	f003 0301 	and.w	r3, r3, #1
 8003bae:	2b00      	cmp	r3, #0
 8003bb0:	d05e      	beq.n	8003c70 <HAL_RCC_ClockConfig+0x168>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	685b      	ldr	r3, [r3, #4]
 8003bb6:	2b01      	cmp	r3, #1
 8003bb8:	d10c      	bne.n	8003bd4 <HAL_RCC_ClockConfig+0xcc>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003bba:	4b59      	ldr	r3, [pc, #356]	@ (8003d20 <HAL_RCC_ClockConfig+0x218>)
 8003bbc:	681b      	ldr	r3, [r3, #0]
 8003bbe:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003bc2:	2b00      	cmp	r3, #0
 8003bc4:	bf0c      	ite	eq
 8003bc6:	2301      	moveq	r3, #1
 8003bc8:	2300      	movne	r3, #0
 8003bca:	b2db      	uxtb	r3, r3
 8003bcc:	2b00      	cmp	r3, #0
 8003bce:	d023      	beq.n	8003c18 <HAL_RCC_ClockConfig+0x110>
      {
        return HAL_ERROR;
 8003bd0:	2301      	movs	r3, #1
 8003bd2:	e09e      	b.n	8003d12 <HAL_RCC_ClockConfig+0x20a>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	685b      	ldr	r3, [r3, #4]
 8003bd8:	2b02      	cmp	r3, #2
 8003bda:	d003      	beq.n	8003be4 <HAL_RCC_ClockConfig+0xdc>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003be0:	2b03      	cmp	r3, #3
 8003be2:	d10c      	bne.n	8003bfe <HAL_RCC_ClockConfig+0xf6>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003be4:	4b4e      	ldr	r3, [pc, #312]	@ (8003d20 <HAL_RCC_ClockConfig+0x218>)
 8003be6:	681b      	ldr	r3, [r3, #0]
 8003be8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003bec:	2b00      	cmp	r3, #0
 8003bee:	bf0c      	ite	eq
 8003bf0:	2301      	moveq	r3, #1
 8003bf2:	2300      	movne	r3, #0
 8003bf4:	b2db      	uxtb	r3, r3
 8003bf6:	2b00      	cmp	r3, #0
 8003bf8:	d00e      	beq.n	8003c18 <HAL_RCC_ClockConfig+0x110>
      {
        return HAL_ERROR;
 8003bfa:	2301      	movs	r3, #1
 8003bfc:	e089      	b.n	8003d12 <HAL_RCC_ClockConfig+0x20a>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003bfe:	4b48      	ldr	r3, [pc, #288]	@ (8003d20 <HAL_RCC_ClockConfig+0x218>)
 8003c00:	681b      	ldr	r3, [r3, #0]
 8003c02:	f003 0302 	and.w	r3, r3, #2
 8003c06:	2b00      	cmp	r3, #0
 8003c08:	bf0c      	ite	eq
 8003c0a:	2301      	moveq	r3, #1
 8003c0c:	2300      	movne	r3, #0
 8003c0e:	b2db      	uxtb	r3, r3
 8003c10:	2b00      	cmp	r3, #0
 8003c12:	d001      	beq.n	8003c18 <HAL_RCC_ClockConfig+0x110>
      {
        return HAL_ERROR;
 8003c14:	2301      	movs	r3, #1
 8003c16:	e07c      	b.n	8003d12 <HAL_RCC_ClockConfig+0x20a>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003c18:	4b41      	ldr	r3, [pc, #260]	@ (8003d20 <HAL_RCC_ClockConfig+0x218>)
 8003c1a:	689b      	ldr	r3, [r3, #8]
 8003c1c:	f023 0203 	bic.w	r2, r3, #3
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	685b      	ldr	r3, [r3, #4]
 8003c24:	493e      	ldr	r1, [pc, #248]	@ (8003d20 <HAL_RCC_ClockConfig+0x218>)
 8003c26:	4313      	orrs	r3, r2
 8003c28:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003c2a:	f7ff f815 	bl	8002c58 <HAL_GetTick>
 8003c2e:	4603      	mov	r3, r0
 8003c30:	60fb      	str	r3, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003c32:	e00f      	b.n	8003c54 <HAL_RCC_ClockConfig+0x14c>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003c34:	f7ff f810 	bl	8002c58 <HAL_GetTick>
 8003c38:	4602      	mov	r2, r0
 8003c3a:	68fb      	ldr	r3, [r7, #12]
 8003c3c:	1ad3      	subs	r3, r2, r3
 8003c3e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003c42:	4293      	cmp	r3, r2
 8003c44:	bf8c      	ite	hi
 8003c46:	2301      	movhi	r3, #1
 8003c48:	2300      	movls	r3, #0
 8003c4a:	b2db      	uxtb	r3, r3
 8003c4c:	2b00      	cmp	r3, #0
 8003c4e:	d001      	beq.n	8003c54 <HAL_RCC_ClockConfig+0x14c>
      {
        return HAL_TIMEOUT;
 8003c50:	2303      	movs	r3, #3
 8003c52:	e05e      	b.n	8003d12 <HAL_RCC_ClockConfig+0x20a>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003c54:	4b32      	ldr	r3, [pc, #200]	@ (8003d20 <HAL_RCC_ClockConfig+0x218>)
 8003c56:	689b      	ldr	r3, [r3, #8]
 8003c58:	f003 020c 	and.w	r2, r3, #12
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	685b      	ldr	r3, [r3, #4]
 8003c60:	009b      	lsls	r3, r3, #2
 8003c62:	429a      	cmp	r2, r3
 8003c64:	bf14      	ite	ne
 8003c66:	2301      	movne	r3, #1
 8003c68:	2300      	moveq	r3, #0
 8003c6a:	b2db      	uxtb	r3, r3
 8003c6c:	2b00      	cmp	r3, #0
 8003c6e:	d1e1      	bne.n	8003c34 <HAL_RCC_ClockConfig+0x12c>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003c70:	4b2a      	ldr	r3, [pc, #168]	@ (8003d1c <HAL_RCC_ClockConfig+0x214>)
 8003c72:	681b      	ldr	r3, [r3, #0]
 8003c74:	f003 030f 	and.w	r3, r3, #15
 8003c78:	683a      	ldr	r2, [r7, #0]
 8003c7a:	429a      	cmp	r2, r3
 8003c7c:	bf34      	ite	cc
 8003c7e:	2301      	movcc	r3, #1
 8003c80:	2300      	movcs	r3, #0
 8003c82:	b2db      	uxtb	r3, r3
 8003c84:	2b00      	cmp	r3, #0
 8003c86:	d011      	beq.n	8003cac <HAL_RCC_ClockConfig+0x1a4>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003c88:	4b24      	ldr	r3, [pc, #144]	@ (8003d1c <HAL_RCC_ClockConfig+0x214>)
 8003c8a:	683a      	ldr	r2, [r7, #0]
 8003c8c:	b2d2      	uxtb	r2, r2
 8003c8e:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003c90:	4b22      	ldr	r3, [pc, #136]	@ (8003d1c <HAL_RCC_ClockConfig+0x214>)
 8003c92:	681b      	ldr	r3, [r3, #0]
 8003c94:	f003 030f 	and.w	r3, r3, #15
 8003c98:	683a      	ldr	r2, [r7, #0]
 8003c9a:	429a      	cmp	r2, r3
 8003c9c:	bf14      	ite	ne
 8003c9e:	2301      	movne	r3, #1
 8003ca0:	2300      	moveq	r3, #0
 8003ca2:	b2db      	uxtb	r3, r3
 8003ca4:	2b00      	cmp	r3, #0
 8003ca6:	d001      	beq.n	8003cac <HAL_RCC_ClockConfig+0x1a4>
    {
      return HAL_ERROR;
 8003ca8:	2301      	movs	r3, #1
 8003caa:	e032      	b.n	8003d12 <HAL_RCC_ClockConfig+0x20a>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	681b      	ldr	r3, [r3, #0]
 8003cb0:	f003 0304 	and.w	r3, r3, #4
 8003cb4:	2b00      	cmp	r3, #0
 8003cb6:	d008      	beq.n	8003cca <HAL_RCC_ClockConfig+0x1c2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003cb8:	4b19      	ldr	r3, [pc, #100]	@ (8003d20 <HAL_RCC_ClockConfig+0x218>)
 8003cba:	689b      	ldr	r3, [r3, #8]
 8003cbc:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	68db      	ldr	r3, [r3, #12]
 8003cc4:	4916      	ldr	r1, [pc, #88]	@ (8003d20 <HAL_RCC_ClockConfig+0x218>)
 8003cc6:	4313      	orrs	r3, r2
 8003cc8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	681b      	ldr	r3, [r3, #0]
 8003cce:	f003 0308 	and.w	r3, r3, #8
 8003cd2:	2b00      	cmp	r3, #0
 8003cd4:	d009      	beq.n	8003cea <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003cd6:	4b12      	ldr	r3, [pc, #72]	@ (8003d20 <HAL_RCC_ClockConfig+0x218>)
 8003cd8:	689b      	ldr	r3, [r3, #8]
 8003cda:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	691b      	ldr	r3, [r3, #16]
 8003ce2:	00db      	lsls	r3, r3, #3
 8003ce4:	490e      	ldr	r1, [pc, #56]	@ (8003d20 <HAL_RCC_ClockConfig+0x218>)
 8003ce6:	4313      	orrs	r3, r2
 8003ce8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8003cea:	f000 f855 	bl	8003d98 <HAL_RCC_GetSysClockFreq>
 8003cee:	4602      	mov	r2, r0
 8003cf0:	4b0b      	ldr	r3, [pc, #44]	@ (8003d20 <HAL_RCC_ClockConfig+0x218>)
 8003cf2:	689b      	ldr	r3, [r3, #8]
 8003cf4:	091b      	lsrs	r3, r3, #4
 8003cf6:	f003 030f 	and.w	r3, r3, #15
 8003cfa:	490a      	ldr	r1, [pc, #40]	@ (8003d24 <HAL_RCC_ClockConfig+0x21c>)
 8003cfc:	5ccb      	ldrb	r3, [r1, r3]
 8003cfe:	fa22 f303 	lsr.w	r3, r2, r3
 8003d02:	4a09      	ldr	r2, [pc, #36]	@ (8003d28 <HAL_RCC_ClockConfig+0x220>)
 8003d04:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8003d06:	4b09      	ldr	r3, [pc, #36]	@ (8003d2c <HAL_RCC_ClockConfig+0x224>)
 8003d08:	681b      	ldr	r3, [r3, #0]
 8003d0a:	4618      	mov	r0, r3
 8003d0c:	f7fe ff5a 	bl	8002bc4 <HAL_InitTick>

  return HAL_OK;
 8003d10:	2300      	movs	r3, #0
}
 8003d12:	4618      	mov	r0, r3
 8003d14:	3710      	adds	r7, #16
 8003d16:	46bd      	mov	sp, r7
 8003d18:	bd80      	pop	{r7, pc}
 8003d1a:	bf00      	nop
 8003d1c:	40023c00 	.word	0x40023c00
 8003d20:	40023800 	.word	0x40023800
 8003d24:	08008dcc 	.word	0x08008dcc
 8003d28:	20000000 	.word	0x20000000
 8003d2c:	20000004 	.word	0x20000004

08003d30 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003d30:	b480      	push	{r7}
 8003d32:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003d34:	4b03      	ldr	r3, [pc, #12]	@ (8003d44 <HAL_RCC_GetHCLKFreq+0x14>)
 8003d36:	681b      	ldr	r3, [r3, #0]
}
 8003d38:	4618      	mov	r0, r3
 8003d3a:	46bd      	mov	sp, r7
 8003d3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d40:	4770      	bx	lr
 8003d42:	bf00      	nop
 8003d44:	20000000 	.word	0x20000000

08003d48 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003d48:	b580      	push	{r7, lr}
 8003d4a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8003d4c:	f7ff fff0 	bl	8003d30 <HAL_RCC_GetHCLKFreq>
 8003d50:	4602      	mov	r2, r0
 8003d52:	4b05      	ldr	r3, [pc, #20]	@ (8003d68 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003d54:	689b      	ldr	r3, [r3, #8]
 8003d56:	0a9b      	lsrs	r3, r3, #10
 8003d58:	f003 0307 	and.w	r3, r3, #7
 8003d5c:	4903      	ldr	r1, [pc, #12]	@ (8003d6c <HAL_RCC_GetPCLK1Freq+0x24>)
 8003d5e:	5ccb      	ldrb	r3, [r1, r3]
 8003d60:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003d64:	4618      	mov	r0, r3
 8003d66:	bd80      	pop	{r7, pc}
 8003d68:	40023800 	.word	0x40023800
 8003d6c:	08008ddc 	.word	0x08008ddc

08003d70 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003d70:	b580      	push	{r7, lr}
 8003d72:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8003d74:	f7ff ffdc 	bl	8003d30 <HAL_RCC_GetHCLKFreq>
 8003d78:	4602      	mov	r2, r0
 8003d7a:	4b05      	ldr	r3, [pc, #20]	@ (8003d90 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003d7c:	689b      	ldr	r3, [r3, #8]
 8003d7e:	0b5b      	lsrs	r3, r3, #13
 8003d80:	f003 0307 	and.w	r3, r3, #7
 8003d84:	4903      	ldr	r1, [pc, #12]	@ (8003d94 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003d86:	5ccb      	ldrb	r3, [r1, r3]
 8003d88:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003d8c:	4618      	mov	r0, r3
 8003d8e:	bd80      	pop	{r7, pc}
 8003d90:	40023800 	.word	0x40023800
 8003d94:	08008ddc 	.word	0x08008ddc

08003d98 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003d98:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003d9c:	b0ae      	sub	sp, #184	@ 0xb8
 8003d9e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8003da0:	2300      	movs	r3, #0
 8003da2:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  uint32_t pllvco = 0U;
 8003da6:	2300      	movs	r3, #0
 8003da8:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  uint32_t pllp = 0U;
 8003dac:	2300      	movs	r3, #0
 8003dae:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  uint32_t pllr = 0U;
 8003db2:	2300      	movs	r3, #0
 8003db4:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  uint32_t sysclockfreq = 0U;
 8003db8:	2300      	movs	r3, #0
 8003dba:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003dbe:	4bd0      	ldr	r3, [pc, #832]	@ (8004100 <HAL_RCC_GetSysClockFreq+0x368>)
 8003dc0:	689b      	ldr	r3, [r3, #8]
 8003dc2:	f003 030c 	and.w	r3, r3, #12
 8003dc6:	2b0c      	cmp	r3, #12
 8003dc8:	f200 8210 	bhi.w	80041ec <HAL_RCC_GetSysClockFreq+0x454>
 8003dcc:	a201      	add	r2, pc, #4	@ (adr r2, 8003dd4 <HAL_RCC_GetSysClockFreq+0x3c>)
 8003dce:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003dd2:	bf00      	nop
 8003dd4:	08003e09 	.word	0x08003e09
 8003dd8:	080041ed 	.word	0x080041ed
 8003ddc:	080041ed 	.word	0x080041ed
 8003de0:	080041ed 	.word	0x080041ed
 8003de4:	08003e11 	.word	0x08003e11
 8003de8:	080041ed 	.word	0x080041ed
 8003dec:	080041ed 	.word	0x080041ed
 8003df0:	080041ed 	.word	0x080041ed
 8003df4:	08003e19 	.word	0x08003e19
 8003df8:	080041ed 	.word	0x080041ed
 8003dfc:	080041ed 	.word	0x080041ed
 8003e00:	080041ed 	.word	0x080041ed
 8003e04:	08004013 	.word	0x08004013
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003e08:	4bbe      	ldr	r3, [pc, #760]	@ (8004104 <HAL_RCC_GetSysClockFreq+0x36c>)
 8003e0a:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8003e0e:	e1f1      	b.n	80041f4 <HAL_RCC_GetSysClockFreq+0x45c>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003e10:	4bbd      	ldr	r3, [pc, #756]	@ (8004108 <HAL_RCC_GetSysClockFreq+0x370>)
 8003e12:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8003e16:	e1ed      	b.n	80041f4 <HAL_RCC_GetSysClockFreq+0x45c>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003e18:	4bb9      	ldr	r3, [pc, #740]	@ (8004100 <HAL_RCC_GetSysClockFreq+0x368>)
 8003e1a:	685b      	ldr	r3, [r3, #4]
 8003e1c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8003e20:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003e24:	4bb6      	ldr	r3, [pc, #728]	@ (8004100 <HAL_RCC_GetSysClockFreq+0x368>)
 8003e26:	685b      	ldr	r3, [r3, #4]
 8003e28:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003e2c:	2b00      	cmp	r3, #0
 8003e2e:	bf14      	ite	ne
 8003e30:	2301      	movne	r3, #1
 8003e32:	2300      	moveq	r3, #0
 8003e34:	b2db      	uxtb	r3, r3
 8003e36:	2b00      	cmp	r3, #0
 8003e38:	d071      	beq.n	8003f1e <HAL_RCC_GetSysClockFreq+0x186>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003e3a:	4bb1      	ldr	r3, [pc, #708]	@ (8004100 <HAL_RCC_GetSysClockFreq+0x368>)
 8003e3c:	685b      	ldr	r3, [r3, #4]
 8003e3e:	099b      	lsrs	r3, r3, #6
 8003e40:	2200      	movs	r2, #0
 8003e42:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8003e46:	f8c7 209c 	str.w	r2, [r7, #156]	@ 0x9c
 8003e4a:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8003e4e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003e52:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8003e56:	2300      	movs	r3, #0
 8003e58:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8003e5c:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8003e60:	4622      	mov	r2, r4
 8003e62:	462b      	mov	r3, r5
 8003e64:	f04f 0000 	mov.w	r0, #0
 8003e68:	f04f 0100 	mov.w	r1, #0
 8003e6c:	0159      	lsls	r1, r3, #5
 8003e6e:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003e72:	0150      	lsls	r0, r2, #5
 8003e74:	4602      	mov	r2, r0
 8003e76:	460b      	mov	r3, r1
 8003e78:	4621      	mov	r1, r4
 8003e7a:	1a51      	subs	r1, r2, r1
 8003e7c:	6439      	str	r1, [r7, #64]	@ 0x40
 8003e7e:	4629      	mov	r1, r5
 8003e80:	eb63 0301 	sbc.w	r3, r3, r1
 8003e84:	647b      	str	r3, [r7, #68]	@ 0x44
 8003e86:	f04f 0200 	mov.w	r2, #0
 8003e8a:	f04f 0300 	mov.w	r3, #0
 8003e8e:	e9d7 8910 	ldrd	r8, r9, [r7, #64]	@ 0x40
 8003e92:	4649      	mov	r1, r9
 8003e94:	018b      	lsls	r3, r1, #6
 8003e96:	4641      	mov	r1, r8
 8003e98:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8003e9c:	4641      	mov	r1, r8
 8003e9e:	018a      	lsls	r2, r1, #6
 8003ea0:	4641      	mov	r1, r8
 8003ea2:	1a51      	subs	r1, r2, r1
 8003ea4:	63b9      	str	r1, [r7, #56]	@ 0x38
 8003ea6:	4649      	mov	r1, r9
 8003ea8:	eb63 0301 	sbc.w	r3, r3, r1
 8003eac:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8003eae:	f04f 0200 	mov.w	r2, #0
 8003eb2:	f04f 0300 	mov.w	r3, #0
 8003eb6:	e9d7 890e 	ldrd	r8, r9, [r7, #56]	@ 0x38
 8003eba:	4649      	mov	r1, r9
 8003ebc:	00cb      	lsls	r3, r1, #3
 8003ebe:	4641      	mov	r1, r8
 8003ec0:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003ec4:	4641      	mov	r1, r8
 8003ec6:	00ca      	lsls	r2, r1, #3
 8003ec8:	4610      	mov	r0, r2
 8003eca:	4619      	mov	r1, r3
 8003ecc:	4603      	mov	r3, r0
 8003ece:	4622      	mov	r2, r4
 8003ed0:	189b      	adds	r3, r3, r2
 8003ed2:	633b      	str	r3, [r7, #48]	@ 0x30
 8003ed4:	462b      	mov	r3, r5
 8003ed6:	460a      	mov	r2, r1
 8003ed8:	eb42 0303 	adc.w	r3, r2, r3
 8003edc:	637b      	str	r3, [r7, #52]	@ 0x34
 8003ede:	f04f 0200 	mov.w	r2, #0
 8003ee2:	f04f 0300 	mov.w	r3, #0
 8003ee6:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8003eea:	4629      	mov	r1, r5
 8003eec:	024b      	lsls	r3, r1, #9
 8003eee:	4621      	mov	r1, r4
 8003ef0:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8003ef4:	4621      	mov	r1, r4
 8003ef6:	024a      	lsls	r2, r1, #9
 8003ef8:	4610      	mov	r0, r2
 8003efa:	4619      	mov	r1, r3
 8003efc:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8003f00:	2200      	movs	r2, #0
 8003f02:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8003f06:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8003f0a:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	@ 0x88
 8003f0e:	f7fc fe6b 	bl	8000be8 <__aeabi_uldivmod>
 8003f12:	4602      	mov	r2, r0
 8003f14:	460b      	mov	r3, r1
 8003f16:	4613      	mov	r3, r2
 8003f18:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8003f1c:	e067      	b.n	8003fee <HAL_RCC_GetSysClockFreq+0x256>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003f1e:	4b78      	ldr	r3, [pc, #480]	@ (8004100 <HAL_RCC_GetSysClockFreq+0x368>)
 8003f20:	685b      	ldr	r3, [r3, #4]
 8003f22:	099b      	lsrs	r3, r3, #6
 8003f24:	2200      	movs	r2, #0
 8003f26:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8003f2a:	f8c7 2084 	str.w	r2, [r7, #132]	@ 0x84
 8003f2e:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8003f32:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003f36:	67bb      	str	r3, [r7, #120]	@ 0x78
 8003f38:	2300      	movs	r3, #0
 8003f3a:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8003f3c:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	@ 0x78
 8003f40:	4622      	mov	r2, r4
 8003f42:	462b      	mov	r3, r5
 8003f44:	f04f 0000 	mov.w	r0, #0
 8003f48:	f04f 0100 	mov.w	r1, #0
 8003f4c:	0159      	lsls	r1, r3, #5
 8003f4e:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003f52:	0150      	lsls	r0, r2, #5
 8003f54:	4602      	mov	r2, r0
 8003f56:	460b      	mov	r3, r1
 8003f58:	4621      	mov	r1, r4
 8003f5a:	1a51      	subs	r1, r2, r1
 8003f5c:	62b9      	str	r1, [r7, #40]	@ 0x28
 8003f5e:	4629      	mov	r1, r5
 8003f60:	eb63 0301 	sbc.w	r3, r3, r1
 8003f64:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003f66:	f04f 0200 	mov.w	r2, #0
 8003f6a:	f04f 0300 	mov.w	r3, #0
 8003f6e:	e9d7 890a 	ldrd	r8, r9, [r7, #40]	@ 0x28
 8003f72:	4649      	mov	r1, r9
 8003f74:	018b      	lsls	r3, r1, #6
 8003f76:	4641      	mov	r1, r8
 8003f78:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8003f7c:	4641      	mov	r1, r8
 8003f7e:	018a      	lsls	r2, r1, #6
 8003f80:	4641      	mov	r1, r8
 8003f82:	ebb2 0a01 	subs.w	sl, r2, r1
 8003f86:	4649      	mov	r1, r9
 8003f88:	eb63 0b01 	sbc.w	fp, r3, r1
 8003f8c:	f04f 0200 	mov.w	r2, #0
 8003f90:	f04f 0300 	mov.w	r3, #0
 8003f94:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8003f98:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8003f9c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003fa0:	4692      	mov	sl, r2
 8003fa2:	469b      	mov	fp, r3
 8003fa4:	4623      	mov	r3, r4
 8003fa6:	eb1a 0303 	adds.w	r3, sl, r3
 8003faa:	623b      	str	r3, [r7, #32]
 8003fac:	462b      	mov	r3, r5
 8003fae:	eb4b 0303 	adc.w	r3, fp, r3
 8003fb2:	627b      	str	r3, [r7, #36]	@ 0x24
 8003fb4:	f04f 0200 	mov.w	r2, #0
 8003fb8:	f04f 0300 	mov.w	r3, #0
 8003fbc:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 8003fc0:	4629      	mov	r1, r5
 8003fc2:	028b      	lsls	r3, r1, #10
 8003fc4:	4621      	mov	r1, r4
 8003fc6:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003fca:	4621      	mov	r1, r4
 8003fcc:	028a      	lsls	r2, r1, #10
 8003fce:	4610      	mov	r0, r2
 8003fd0:	4619      	mov	r1, r3
 8003fd2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8003fd6:	2200      	movs	r2, #0
 8003fd8:	673b      	str	r3, [r7, #112]	@ 0x70
 8003fda:	677a      	str	r2, [r7, #116]	@ 0x74
 8003fdc:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	@ 0x70
 8003fe0:	f7fc fe02 	bl	8000be8 <__aeabi_uldivmod>
 8003fe4:	4602      	mov	r2, r0
 8003fe6:	460b      	mov	r3, r1
 8003fe8:	4613      	mov	r3, r2
 8003fea:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8003fee:	4b44      	ldr	r3, [pc, #272]	@ (8004100 <HAL_RCC_GetSysClockFreq+0x368>)
 8003ff0:	685b      	ldr	r3, [r3, #4]
 8003ff2:	0c1b      	lsrs	r3, r3, #16
 8003ff4:	f003 0303 	and.w	r3, r3, #3
 8003ff8:	3301      	adds	r3, #1
 8003ffa:	005b      	lsls	r3, r3, #1
 8003ffc:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8

      sysclockfreq = pllvco / pllp;
 8004000:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8004004:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8004008:	fbb2 f3f3 	udiv	r3, r2, r3
 800400c:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8004010:	e0f0      	b.n	80041f4 <HAL_RCC_GetSysClockFreq+0x45c>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004012:	4b3b      	ldr	r3, [pc, #236]	@ (8004100 <HAL_RCC_GetSysClockFreq+0x368>)
 8004014:	685b      	ldr	r3, [r3, #4]
 8004016:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800401a:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800401e:	4b38      	ldr	r3, [pc, #224]	@ (8004100 <HAL_RCC_GetSysClockFreq+0x368>)
 8004020:	685b      	ldr	r3, [r3, #4]
 8004022:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004026:	2b00      	cmp	r3, #0
 8004028:	bf14      	ite	ne
 800402a:	2301      	movne	r3, #1
 800402c:	2300      	moveq	r3, #0
 800402e:	b2db      	uxtb	r3, r3
 8004030:	2b00      	cmp	r3, #0
 8004032:	d06b      	beq.n	800410c <HAL_RCC_GetSysClockFreq+0x374>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004034:	4b32      	ldr	r3, [pc, #200]	@ (8004100 <HAL_RCC_GetSysClockFreq+0x368>)
 8004036:	685b      	ldr	r3, [r3, #4]
 8004038:	099b      	lsrs	r3, r3, #6
 800403a:	2200      	movs	r2, #0
 800403c:	66bb      	str	r3, [r7, #104]	@ 0x68
 800403e:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8004040:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8004042:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004046:	663b      	str	r3, [r7, #96]	@ 0x60
 8004048:	2300      	movs	r3, #0
 800404a:	667b      	str	r3, [r7, #100]	@ 0x64
 800404c:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	@ 0x60
 8004050:	4622      	mov	r2, r4
 8004052:	462b      	mov	r3, r5
 8004054:	f04f 0000 	mov.w	r0, #0
 8004058:	f04f 0100 	mov.w	r1, #0
 800405c:	0159      	lsls	r1, r3, #5
 800405e:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004062:	0150      	lsls	r0, r2, #5
 8004064:	4602      	mov	r2, r0
 8004066:	460b      	mov	r3, r1
 8004068:	4621      	mov	r1, r4
 800406a:	1a51      	subs	r1, r2, r1
 800406c:	61b9      	str	r1, [r7, #24]
 800406e:	4629      	mov	r1, r5
 8004070:	eb63 0301 	sbc.w	r3, r3, r1
 8004074:	61fb      	str	r3, [r7, #28]
 8004076:	f04f 0200 	mov.w	r2, #0
 800407a:	f04f 0300 	mov.w	r3, #0
 800407e:	e9d7 ab06 	ldrd	sl, fp, [r7, #24]
 8004082:	4659      	mov	r1, fp
 8004084:	018b      	lsls	r3, r1, #6
 8004086:	4651      	mov	r1, sl
 8004088:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800408c:	4651      	mov	r1, sl
 800408e:	018a      	lsls	r2, r1, #6
 8004090:	4651      	mov	r1, sl
 8004092:	ebb2 0801 	subs.w	r8, r2, r1
 8004096:	4659      	mov	r1, fp
 8004098:	eb63 0901 	sbc.w	r9, r3, r1
 800409c:	f04f 0200 	mov.w	r2, #0
 80040a0:	f04f 0300 	mov.w	r3, #0
 80040a4:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80040a8:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80040ac:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80040b0:	4690      	mov	r8, r2
 80040b2:	4699      	mov	r9, r3
 80040b4:	4623      	mov	r3, r4
 80040b6:	eb18 0303 	adds.w	r3, r8, r3
 80040ba:	613b      	str	r3, [r7, #16]
 80040bc:	462b      	mov	r3, r5
 80040be:	eb49 0303 	adc.w	r3, r9, r3
 80040c2:	617b      	str	r3, [r7, #20]
 80040c4:	f04f 0200 	mov.w	r2, #0
 80040c8:	f04f 0300 	mov.w	r3, #0
 80040cc:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 80040d0:	4629      	mov	r1, r5
 80040d2:	024b      	lsls	r3, r1, #9
 80040d4:	4621      	mov	r1, r4
 80040d6:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80040da:	4621      	mov	r1, r4
 80040dc:	024a      	lsls	r2, r1, #9
 80040de:	4610      	mov	r0, r2
 80040e0:	4619      	mov	r1, r3
 80040e2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80040e6:	2200      	movs	r2, #0
 80040e8:	65bb      	str	r3, [r7, #88]	@ 0x58
 80040ea:	65fa      	str	r2, [r7, #92]	@ 0x5c
 80040ec:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 80040f0:	f7fc fd7a 	bl	8000be8 <__aeabi_uldivmod>
 80040f4:	4602      	mov	r2, r0
 80040f6:	460b      	mov	r3, r1
 80040f8:	4613      	mov	r3, r2
 80040fa:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80040fe:	e065      	b.n	80041cc <HAL_RCC_GetSysClockFreq+0x434>
 8004100:	40023800 	.word	0x40023800
 8004104:	00f42400 	.word	0x00f42400
 8004108:	007a1200 	.word	0x007a1200
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800410c:	4b3d      	ldr	r3, [pc, #244]	@ (8004204 <HAL_RCC_GetSysClockFreq+0x46c>)
 800410e:	685b      	ldr	r3, [r3, #4]
 8004110:	099b      	lsrs	r3, r3, #6
 8004112:	2200      	movs	r2, #0
 8004114:	4618      	mov	r0, r3
 8004116:	4611      	mov	r1, r2
 8004118:	f3c0 0308 	ubfx	r3, r0, #0, #9
 800411c:	653b      	str	r3, [r7, #80]	@ 0x50
 800411e:	2300      	movs	r3, #0
 8004120:	657b      	str	r3, [r7, #84]	@ 0x54
 8004122:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	@ 0x50
 8004126:	4642      	mov	r2, r8
 8004128:	464b      	mov	r3, r9
 800412a:	f04f 0000 	mov.w	r0, #0
 800412e:	f04f 0100 	mov.w	r1, #0
 8004132:	0159      	lsls	r1, r3, #5
 8004134:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004138:	0150      	lsls	r0, r2, #5
 800413a:	4602      	mov	r2, r0
 800413c:	460b      	mov	r3, r1
 800413e:	4641      	mov	r1, r8
 8004140:	1a51      	subs	r1, r2, r1
 8004142:	60b9      	str	r1, [r7, #8]
 8004144:	4649      	mov	r1, r9
 8004146:	eb63 0301 	sbc.w	r3, r3, r1
 800414a:	60fb      	str	r3, [r7, #12]
 800414c:	f04f 0200 	mov.w	r2, #0
 8004150:	f04f 0300 	mov.w	r3, #0
 8004154:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 8004158:	4659      	mov	r1, fp
 800415a:	018b      	lsls	r3, r1, #6
 800415c:	4651      	mov	r1, sl
 800415e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8004162:	4651      	mov	r1, sl
 8004164:	018a      	lsls	r2, r1, #6
 8004166:	4651      	mov	r1, sl
 8004168:	1a54      	subs	r4, r2, r1
 800416a:	4659      	mov	r1, fp
 800416c:	eb63 0501 	sbc.w	r5, r3, r1
 8004170:	f04f 0200 	mov.w	r2, #0
 8004174:	f04f 0300 	mov.w	r3, #0
 8004178:	00eb      	lsls	r3, r5, #3
 800417a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800417e:	00e2      	lsls	r2, r4, #3
 8004180:	4614      	mov	r4, r2
 8004182:	461d      	mov	r5, r3
 8004184:	4643      	mov	r3, r8
 8004186:	18e3      	adds	r3, r4, r3
 8004188:	603b      	str	r3, [r7, #0]
 800418a:	464b      	mov	r3, r9
 800418c:	eb45 0303 	adc.w	r3, r5, r3
 8004190:	607b      	str	r3, [r7, #4]
 8004192:	f04f 0200 	mov.w	r2, #0
 8004196:	f04f 0300 	mov.w	r3, #0
 800419a:	e9d7 4500 	ldrd	r4, r5, [r7]
 800419e:	4629      	mov	r1, r5
 80041a0:	028b      	lsls	r3, r1, #10
 80041a2:	4621      	mov	r1, r4
 80041a4:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80041a8:	4621      	mov	r1, r4
 80041aa:	028a      	lsls	r2, r1, #10
 80041ac:	4610      	mov	r0, r2
 80041ae:	4619      	mov	r1, r3
 80041b0:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80041b4:	2200      	movs	r2, #0
 80041b6:	64bb      	str	r3, [r7, #72]	@ 0x48
 80041b8:	64fa      	str	r2, [r7, #76]	@ 0x4c
 80041ba:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 80041be:	f7fc fd13 	bl	8000be8 <__aeabi_uldivmod>
 80041c2:	4602      	mov	r2, r0
 80041c4:	460b      	mov	r3, r1
 80041c6:	4613      	mov	r3, r2
 80041c8:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 80041cc:	4b0d      	ldr	r3, [pc, #52]	@ (8004204 <HAL_RCC_GetSysClockFreq+0x46c>)
 80041ce:	685b      	ldr	r3, [r3, #4]
 80041d0:	0f1b      	lsrs	r3, r3, #28
 80041d2:	f003 0307 	and.w	r3, r3, #7
 80041d6:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4

      sysclockfreq = pllvco / pllr;
 80041da:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 80041de:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 80041e2:	fbb2 f3f3 	udiv	r3, r2, r3
 80041e6:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 80041ea:	e003      	b.n	80041f4 <HAL_RCC_GetSysClockFreq+0x45c>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80041ec:	4b06      	ldr	r3, [pc, #24]	@ (8004208 <HAL_RCC_GetSysClockFreq+0x470>)
 80041ee:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 80041f2:	bf00      	nop
    }
  }
  return sysclockfreq;
 80041f4:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
}
 80041f8:	4618      	mov	r0, r3
 80041fa:	37b8      	adds	r7, #184	@ 0xb8
 80041fc:	46bd      	mov	sp, r7
 80041fe:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004202:	bf00      	nop
 8004204:	40023800 	.word	0x40023800
 8004208:	00f42400 	.word	0x00f42400

0800420c <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800420c:	b580      	push	{r7, lr}
 800420e:	b086      	sub	sp, #24
 8004210:	af00      	add	r7, sp, #0
 8004212:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	2b00      	cmp	r3, #0
 8004218:	d101      	bne.n	800421e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800421a:	2301      	movs	r3, #1
 800421c:	e334      	b.n	8004888 <HAL_RCC_OscConfig+0x67c>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	681b      	ldr	r3, [r3, #0]
 8004222:	f003 0301 	and.w	r3, r3, #1
 8004226:	2b00      	cmp	r3, #0
 8004228:	f000 80a1 	beq.w	800436e <HAL_RCC_OscConfig+0x162>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 800422c:	4b96      	ldr	r3, [pc, #600]	@ (8004488 <HAL_RCC_OscConfig+0x27c>)
 800422e:	689b      	ldr	r3, [r3, #8]
 8004230:	f003 030c 	and.w	r3, r3, #12
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 8004234:	2b04      	cmp	r3, #4
 8004236:	d019      	beq.n	800426c <HAL_RCC_OscConfig+0x60>
 8004238:	4b93      	ldr	r3, [pc, #588]	@ (8004488 <HAL_RCC_OscConfig+0x27c>)
 800423a:	689b      	ldr	r3, [r3, #8]
 800423c:	f003 030c 	and.w	r3, r3, #12
        || \
 8004240:	2b08      	cmp	r3, #8
 8004242:	d106      	bne.n	8004252 <HAL_RCC_OscConfig+0x46>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 8004244:	4b90      	ldr	r3, [pc, #576]	@ (8004488 <HAL_RCC_OscConfig+0x27c>)
 8004246:	685b      	ldr	r3, [r3, #4]
 8004248:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800424c:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8004250:	d00c      	beq.n	800426c <HAL_RCC_OscConfig+0x60>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004252:	4b8d      	ldr	r3, [pc, #564]	@ (8004488 <HAL_RCC_OscConfig+0x27c>)
 8004254:	689b      	ldr	r3, [r3, #8]
 8004256:	f003 030c 	and.w	r3, r3, #12
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 800425a:	2b0c      	cmp	r3, #12
 800425c:	d108      	bne.n	8004270 <HAL_RCC_OscConfig+0x64>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800425e:	4b8a      	ldr	r3, [pc, #552]	@ (8004488 <HAL_RCC_OscConfig+0x27c>)
 8004260:	685b      	ldr	r3, [r3, #4]
 8004262:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004266:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800426a:	d101      	bne.n	8004270 <HAL_RCC_OscConfig+0x64>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 800426c:	2301      	movs	r3, #1
 800426e:	e000      	b.n	8004272 <HAL_RCC_OscConfig+0x66>
 8004270:	2300      	movs	r3, #0
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8004272:	2b00      	cmp	r3, #0
 8004274:	d010      	beq.n	8004298 <HAL_RCC_OscConfig+0x8c>
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004276:	4b84      	ldr	r3, [pc, #528]	@ (8004488 <HAL_RCC_OscConfig+0x27c>)
 8004278:	681b      	ldr	r3, [r3, #0]
 800427a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800427e:	2b00      	cmp	r3, #0
 8004280:	d005      	beq.n	800428e <HAL_RCC_OscConfig+0x82>
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	685b      	ldr	r3, [r3, #4]
 8004286:	2b00      	cmp	r3, #0
 8004288:	d101      	bne.n	800428e <HAL_RCC_OscConfig+0x82>
 800428a:	2301      	movs	r3, #1
 800428c:	e000      	b.n	8004290 <HAL_RCC_OscConfig+0x84>
 800428e:	2300      	movs	r3, #0
 8004290:	2b00      	cmp	r3, #0
 8004292:	d06c      	beq.n	800436e <HAL_RCC_OscConfig+0x162>
      {
        return HAL_ERROR;
 8004294:	2301      	movs	r3, #1
 8004296:	e2f7      	b.n	8004888 <HAL_RCC_OscConfig+0x67c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	685b      	ldr	r3, [r3, #4]
 800429c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80042a0:	d106      	bne.n	80042b0 <HAL_RCC_OscConfig+0xa4>
 80042a2:	4b79      	ldr	r3, [pc, #484]	@ (8004488 <HAL_RCC_OscConfig+0x27c>)
 80042a4:	681b      	ldr	r3, [r3, #0]
 80042a6:	4a78      	ldr	r2, [pc, #480]	@ (8004488 <HAL_RCC_OscConfig+0x27c>)
 80042a8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80042ac:	6013      	str	r3, [r2, #0]
 80042ae:	e01d      	b.n	80042ec <HAL_RCC_OscConfig+0xe0>
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	685b      	ldr	r3, [r3, #4]
 80042b4:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80042b8:	d10c      	bne.n	80042d4 <HAL_RCC_OscConfig+0xc8>
 80042ba:	4b73      	ldr	r3, [pc, #460]	@ (8004488 <HAL_RCC_OscConfig+0x27c>)
 80042bc:	681b      	ldr	r3, [r3, #0]
 80042be:	4a72      	ldr	r2, [pc, #456]	@ (8004488 <HAL_RCC_OscConfig+0x27c>)
 80042c0:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80042c4:	6013      	str	r3, [r2, #0]
 80042c6:	4b70      	ldr	r3, [pc, #448]	@ (8004488 <HAL_RCC_OscConfig+0x27c>)
 80042c8:	681b      	ldr	r3, [r3, #0]
 80042ca:	4a6f      	ldr	r2, [pc, #444]	@ (8004488 <HAL_RCC_OscConfig+0x27c>)
 80042cc:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80042d0:	6013      	str	r3, [r2, #0]
 80042d2:	e00b      	b.n	80042ec <HAL_RCC_OscConfig+0xe0>
 80042d4:	4b6c      	ldr	r3, [pc, #432]	@ (8004488 <HAL_RCC_OscConfig+0x27c>)
 80042d6:	681b      	ldr	r3, [r3, #0]
 80042d8:	4a6b      	ldr	r2, [pc, #428]	@ (8004488 <HAL_RCC_OscConfig+0x27c>)
 80042da:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80042de:	6013      	str	r3, [r2, #0]
 80042e0:	4b69      	ldr	r3, [pc, #420]	@ (8004488 <HAL_RCC_OscConfig+0x27c>)
 80042e2:	681b      	ldr	r3, [r3, #0]
 80042e4:	4a68      	ldr	r2, [pc, #416]	@ (8004488 <HAL_RCC_OscConfig+0x27c>)
 80042e6:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80042ea:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	685b      	ldr	r3, [r3, #4]
 80042f0:	2b00      	cmp	r3, #0
 80042f2:	d01e      	beq.n	8004332 <HAL_RCC_OscConfig+0x126>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80042f4:	f7fe fcb0 	bl	8002c58 <HAL_GetTick>
 80042f8:	4603      	mov	r3, r0
 80042fa:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80042fc:	e00d      	b.n	800431a <HAL_RCC_OscConfig+0x10e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80042fe:	f7fe fcab 	bl	8002c58 <HAL_GetTick>
 8004302:	4602      	mov	r2, r0
 8004304:	693b      	ldr	r3, [r7, #16]
 8004306:	1ad3      	subs	r3, r2, r3
 8004308:	2b64      	cmp	r3, #100	@ 0x64
 800430a:	bf8c      	ite	hi
 800430c:	2301      	movhi	r3, #1
 800430e:	2300      	movls	r3, #0
 8004310:	b2db      	uxtb	r3, r3
 8004312:	2b00      	cmp	r3, #0
 8004314:	d001      	beq.n	800431a <HAL_RCC_OscConfig+0x10e>
          {
            return HAL_TIMEOUT;
 8004316:	2303      	movs	r3, #3
 8004318:	e2b6      	b.n	8004888 <HAL_RCC_OscConfig+0x67c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800431a:	4b5b      	ldr	r3, [pc, #364]	@ (8004488 <HAL_RCC_OscConfig+0x27c>)
 800431c:	681b      	ldr	r3, [r3, #0]
 800431e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004322:	2b00      	cmp	r3, #0
 8004324:	bf0c      	ite	eq
 8004326:	2301      	moveq	r3, #1
 8004328:	2300      	movne	r3, #0
 800432a:	b2db      	uxtb	r3, r3
 800432c:	2b00      	cmp	r3, #0
 800432e:	d1e6      	bne.n	80042fe <HAL_RCC_OscConfig+0xf2>
 8004330:	e01d      	b.n	800436e <HAL_RCC_OscConfig+0x162>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004332:	f7fe fc91 	bl	8002c58 <HAL_GetTick>
 8004336:	4603      	mov	r3, r0
 8004338:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800433a:	e00d      	b.n	8004358 <HAL_RCC_OscConfig+0x14c>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800433c:	f7fe fc8c 	bl	8002c58 <HAL_GetTick>
 8004340:	4602      	mov	r2, r0
 8004342:	693b      	ldr	r3, [r7, #16]
 8004344:	1ad3      	subs	r3, r2, r3
 8004346:	2b64      	cmp	r3, #100	@ 0x64
 8004348:	bf8c      	ite	hi
 800434a:	2301      	movhi	r3, #1
 800434c:	2300      	movls	r3, #0
 800434e:	b2db      	uxtb	r3, r3
 8004350:	2b00      	cmp	r3, #0
 8004352:	d001      	beq.n	8004358 <HAL_RCC_OscConfig+0x14c>
          {
            return HAL_TIMEOUT;
 8004354:	2303      	movs	r3, #3
 8004356:	e297      	b.n	8004888 <HAL_RCC_OscConfig+0x67c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004358:	4b4b      	ldr	r3, [pc, #300]	@ (8004488 <HAL_RCC_OscConfig+0x27c>)
 800435a:	681b      	ldr	r3, [r3, #0]
 800435c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004360:	2b00      	cmp	r3, #0
 8004362:	bf14      	ite	ne
 8004364:	2301      	movne	r3, #1
 8004366:	2300      	moveq	r3, #0
 8004368:	b2db      	uxtb	r3, r3
 800436a:	2b00      	cmp	r3, #0
 800436c:	d1e6      	bne.n	800433c <HAL_RCC_OscConfig+0x130>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	681b      	ldr	r3, [r3, #0]
 8004372:	f003 0302 	and.w	r3, r3, #2
 8004376:	2b00      	cmp	r3, #0
 8004378:	f000 8095 	beq.w	80044a6 <HAL_RCC_OscConfig+0x29a>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 800437c:	4b42      	ldr	r3, [pc, #264]	@ (8004488 <HAL_RCC_OscConfig+0x27c>)
 800437e:	689b      	ldr	r3, [r3, #8]
 8004380:	f003 030c 	and.w	r3, r3, #12
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 8004384:	2b00      	cmp	r3, #0
 8004386:	d017      	beq.n	80043b8 <HAL_RCC_OscConfig+0x1ac>
 8004388:	4b3f      	ldr	r3, [pc, #252]	@ (8004488 <HAL_RCC_OscConfig+0x27c>)
 800438a:	689b      	ldr	r3, [r3, #8]
 800438c:	f003 030c 	and.w	r3, r3, #12
        || \
 8004390:	2b08      	cmp	r3, #8
 8004392:	d105      	bne.n	80043a0 <HAL_RCC_OscConfig+0x194>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 8004394:	4b3c      	ldr	r3, [pc, #240]	@ (8004488 <HAL_RCC_OscConfig+0x27c>)
 8004396:	685b      	ldr	r3, [r3, #4]
 8004398:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800439c:	2b00      	cmp	r3, #0
 800439e:	d00b      	beq.n	80043b8 <HAL_RCC_OscConfig+0x1ac>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80043a0:	4b39      	ldr	r3, [pc, #228]	@ (8004488 <HAL_RCC_OscConfig+0x27c>)
 80043a2:	689b      	ldr	r3, [r3, #8]
 80043a4:	f003 030c 	and.w	r3, r3, #12
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 80043a8:	2b0c      	cmp	r3, #12
 80043aa:	d107      	bne.n	80043bc <HAL_RCC_OscConfig+0x1b0>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80043ac:	4b36      	ldr	r3, [pc, #216]	@ (8004488 <HAL_RCC_OscConfig+0x27c>)
 80043ae:	685b      	ldr	r3, [r3, #4]
 80043b0:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80043b4:	2b00      	cmp	r3, #0
 80043b6:	d101      	bne.n	80043bc <HAL_RCC_OscConfig+0x1b0>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 80043b8:	2301      	movs	r3, #1
 80043ba:	e000      	b.n	80043be <HAL_RCC_OscConfig+0x1b2>
 80043bc:	2300      	movs	r3, #0
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 80043be:	2b00      	cmp	r3, #0
 80043c0:	d01b      	beq.n	80043fa <HAL_RCC_OscConfig+0x1ee>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80043c2:	4b31      	ldr	r3, [pc, #196]	@ (8004488 <HAL_RCC_OscConfig+0x27c>)
 80043c4:	681b      	ldr	r3, [r3, #0]
 80043c6:	f003 0302 	and.w	r3, r3, #2
 80043ca:	2b00      	cmp	r3, #0
 80043cc:	d005      	beq.n	80043da <HAL_RCC_OscConfig+0x1ce>
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	68db      	ldr	r3, [r3, #12]
 80043d2:	2b01      	cmp	r3, #1
 80043d4:	d001      	beq.n	80043da <HAL_RCC_OscConfig+0x1ce>
 80043d6:	2301      	movs	r3, #1
 80043d8:	e000      	b.n	80043dc <HAL_RCC_OscConfig+0x1d0>
 80043da:	2300      	movs	r3, #0
 80043dc:	2b00      	cmp	r3, #0
 80043de:	d001      	beq.n	80043e4 <HAL_RCC_OscConfig+0x1d8>
      {
        return HAL_ERROR;
 80043e0:	2301      	movs	r3, #1
 80043e2:	e251      	b.n	8004888 <HAL_RCC_OscConfig+0x67c>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80043e4:	4b28      	ldr	r3, [pc, #160]	@ (8004488 <HAL_RCC_OscConfig+0x27c>)
 80043e6:	681b      	ldr	r3, [r3, #0]
 80043e8:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	691b      	ldr	r3, [r3, #16]
 80043f0:	00db      	lsls	r3, r3, #3
 80043f2:	4925      	ldr	r1, [pc, #148]	@ (8004488 <HAL_RCC_OscConfig+0x27c>)
 80043f4:	4313      	orrs	r3, r2
 80043f6:	600b      	str	r3, [r1, #0]
 80043f8:	e055      	b.n	80044a6 <HAL_RCC_OscConfig+0x29a>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80043fa:	687b      	ldr	r3, [r7, #4]
 80043fc:	68db      	ldr	r3, [r3, #12]
 80043fe:	2b00      	cmp	r3, #0
 8004400:	d02b      	beq.n	800445a <HAL_RCC_OscConfig+0x24e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004402:	4b22      	ldr	r3, [pc, #136]	@ (800448c <HAL_RCC_OscConfig+0x280>)
 8004404:	2201      	movs	r2, #1
 8004406:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004408:	f7fe fc26 	bl	8002c58 <HAL_GetTick>
 800440c:	4603      	mov	r3, r0
 800440e:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004410:	e00d      	b.n	800442e <HAL_RCC_OscConfig+0x222>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004412:	f7fe fc21 	bl	8002c58 <HAL_GetTick>
 8004416:	4602      	mov	r2, r0
 8004418:	693b      	ldr	r3, [r7, #16]
 800441a:	1ad3      	subs	r3, r2, r3
 800441c:	2b02      	cmp	r3, #2
 800441e:	bf8c      	ite	hi
 8004420:	2301      	movhi	r3, #1
 8004422:	2300      	movls	r3, #0
 8004424:	b2db      	uxtb	r3, r3
 8004426:	2b00      	cmp	r3, #0
 8004428:	d001      	beq.n	800442e <HAL_RCC_OscConfig+0x222>
          {
            return HAL_TIMEOUT;
 800442a:	2303      	movs	r3, #3
 800442c:	e22c      	b.n	8004888 <HAL_RCC_OscConfig+0x67c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800442e:	4b16      	ldr	r3, [pc, #88]	@ (8004488 <HAL_RCC_OscConfig+0x27c>)
 8004430:	681b      	ldr	r3, [r3, #0]
 8004432:	f003 0302 	and.w	r3, r3, #2
 8004436:	2b00      	cmp	r3, #0
 8004438:	bf0c      	ite	eq
 800443a:	2301      	moveq	r3, #1
 800443c:	2300      	movne	r3, #0
 800443e:	b2db      	uxtb	r3, r3
 8004440:	2b00      	cmp	r3, #0
 8004442:	d1e6      	bne.n	8004412 <HAL_RCC_OscConfig+0x206>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004444:	4b10      	ldr	r3, [pc, #64]	@ (8004488 <HAL_RCC_OscConfig+0x27c>)
 8004446:	681b      	ldr	r3, [r3, #0]
 8004448:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	691b      	ldr	r3, [r3, #16]
 8004450:	00db      	lsls	r3, r3, #3
 8004452:	490d      	ldr	r1, [pc, #52]	@ (8004488 <HAL_RCC_OscConfig+0x27c>)
 8004454:	4313      	orrs	r3, r2
 8004456:	600b      	str	r3, [r1, #0]
 8004458:	e025      	b.n	80044a6 <HAL_RCC_OscConfig+0x29a>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800445a:	4b0c      	ldr	r3, [pc, #48]	@ (800448c <HAL_RCC_OscConfig+0x280>)
 800445c:	2200      	movs	r2, #0
 800445e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004460:	f7fe fbfa 	bl	8002c58 <HAL_GetTick>
 8004464:	4603      	mov	r3, r0
 8004466:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004468:	e012      	b.n	8004490 <HAL_RCC_OscConfig+0x284>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800446a:	f7fe fbf5 	bl	8002c58 <HAL_GetTick>
 800446e:	4602      	mov	r2, r0
 8004470:	693b      	ldr	r3, [r7, #16]
 8004472:	1ad3      	subs	r3, r2, r3
 8004474:	2b02      	cmp	r3, #2
 8004476:	bf8c      	ite	hi
 8004478:	2301      	movhi	r3, #1
 800447a:	2300      	movls	r3, #0
 800447c:	b2db      	uxtb	r3, r3
 800447e:	2b00      	cmp	r3, #0
 8004480:	d006      	beq.n	8004490 <HAL_RCC_OscConfig+0x284>
          {
            return HAL_TIMEOUT;
 8004482:	2303      	movs	r3, #3
 8004484:	e200      	b.n	8004888 <HAL_RCC_OscConfig+0x67c>
 8004486:	bf00      	nop
 8004488:	40023800 	.word	0x40023800
 800448c:	42470000 	.word	0x42470000
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004490:	4b86      	ldr	r3, [pc, #536]	@ (80046ac <HAL_RCC_OscConfig+0x4a0>)
 8004492:	681b      	ldr	r3, [r3, #0]
 8004494:	f003 0302 	and.w	r3, r3, #2
 8004498:	2b00      	cmp	r3, #0
 800449a:	bf14      	ite	ne
 800449c:	2301      	movne	r3, #1
 800449e:	2300      	moveq	r3, #0
 80044a0:	b2db      	uxtb	r3, r3
 80044a2:	2b00      	cmp	r3, #0
 80044a4:	d1e1      	bne.n	800446a <HAL_RCC_OscConfig+0x25e>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80044a6:	687b      	ldr	r3, [r7, #4]
 80044a8:	681b      	ldr	r3, [r3, #0]
 80044aa:	f003 0308 	and.w	r3, r3, #8
 80044ae:	2b00      	cmp	r3, #0
 80044b0:	d046      	beq.n	8004540 <HAL_RCC_OscConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80044b2:	687b      	ldr	r3, [r7, #4]
 80044b4:	695b      	ldr	r3, [r3, #20]
 80044b6:	2b00      	cmp	r3, #0
 80044b8:	d021      	beq.n	80044fe <HAL_RCC_OscConfig+0x2f2>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80044ba:	4b7d      	ldr	r3, [pc, #500]	@ (80046b0 <HAL_RCC_OscConfig+0x4a4>)
 80044bc:	2201      	movs	r2, #1
 80044be:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80044c0:	f7fe fbca 	bl	8002c58 <HAL_GetTick>
 80044c4:	4603      	mov	r3, r0
 80044c6:	613b      	str	r3, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80044c8:	e00d      	b.n	80044e6 <HAL_RCC_OscConfig+0x2da>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80044ca:	f7fe fbc5 	bl	8002c58 <HAL_GetTick>
 80044ce:	4602      	mov	r2, r0
 80044d0:	693b      	ldr	r3, [r7, #16]
 80044d2:	1ad3      	subs	r3, r2, r3
 80044d4:	2b02      	cmp	r3, #2
 80044d6:	bf8c      	ite	hi
 80044d8:	2301      	movhi	r3, #1
 80044da:	2300      	movls	r3, #0
 80044dc:	b2db      	uxtb	r3, r3
 80044de:	2b00      	cmp	r3, #0
 80044e0:	d001      	beq.n	80044e6 <HAL_RCC_OscConfig+0x2da>
        {
          return HAL_TIMEOUT;
 80044e2:	2303      	movs	r3, #3
 80044e4:	e1d0      	b.n	8004888 <HAL_RCC_OscConfig+0x67c>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80044e6:	4b71      	ldr	r3, [pc, #452]	@ (80046ac <HAL_RCC_OscConfig+0x4a0>)
 80044e8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80044ea:	f003 0302 	and.w	r3, r3, #2
 80044ee:	2b00      	cmp	r3, #0
 80044f0:	bf0c      	ite	eq
 80044f2:	2301      	moveq	r3, #1
 80044f4:	2300      	movne	r3, #0
 80044f6:	b2db      	uxtb	r3, r3
 80044f8:	2b00      	cmp	r3, #0
 80044fa:	d1e6      	bne.n	80044ca <HAL_RCC_OscConfig+0x2be>
 80044fc:	e020      	b.n	8004540 <HAL_RCC_OscConfig+0x334>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80044fe:	4b6c      	ldr	r3, [pc, #432]	@ (80046b0 <HAL_RCC_OscConfig+0x4a4>)
 8004500:	2200      	movs	r2, #0
 8004502:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004504:	f7fe fba8 	bl	8002c58 <HAL_GetTick>
 8004508:	4603      	mov	r3, r0
 800450a:	613b      	str	r3, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800450c:	e00d      	b.n	800452a <HAL_RCC_OscConfig+0x31e>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800450e:	f7fe fba3 	bl	8002c58 <HAL_GetTick>
 8004512:	4602      	mov	r2, r0
 8004514:	693b      	ldr	r3, [r7, #16]
 8004516:	1ad3      	subs	r3, r2, r3
 8004518:	2b02      	cmp	r3, #2
 800451a:	bf8c      	ite	hi
 800451c:	2301      	movhi	r3, #1
 800451e:	2300      	movls	r3, #0
 8004520:	b2db      	uxtb	r3, r3
 8004522:	2b00      	cmp	r3, #0
 8004524:	d001      	beq.n	800452a <HAL_RCC_OscConfig+0x31e>
        {
          return HAL_TIMEOUT;
 8004526:	2303      	movs	r3, #3
 8004528:	e1ae      	b.n	8004888 <HAL_RCC_OscConfig+0x67c>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800452a:	4b60      	ldr	r3, [pc, #384]	@ (80046ac <HAL_RCC_OscConfig+0x4a0>)
 800452c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800452e:	f003 0302 	and.w	r3, r3, #2
 8004532:	2b00      	cmp	r3, #0
 8004534:	bf14      	ite	ne
 8004536:	2301      	movne	r3, #1
 8004538:	2300      	moveq	r3, #0
 800453a:	b2db      	uxtb	r3, r3
 800453c:	2b00      	cmp	r3, #0
 800453e:	d1e6      	bne.n	800450e <HAL_RCC_OscConfig+0x302>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	681b      	ldr	r3, [r3, #0]
 8004544:	f003 0304 	and.w	r3, r3, #4
 8004548:	2b00      	cmp	r3, #0
 800454a:	f000 80c9 	beq.w	80046e0 <HAL_RCC_OscConfig+0x4d4>
  {
    FlagStatus       pwrclkchanged = RESET;
 800454e:	2300      	movs	r3, #0
 8004550:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004552:	4b56      	ldr	r3, [pc, #344]	@ (80046ac <HAL_RCC_OscConfig+0x4a0>)
 8004554:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004556:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800455a:	2b00      	cmp	r3, #0
 800455c:	bf0c      	ite	eq
 800455e:	2301      	moveq	r3, #1
 8004560:	2300      	movne	r3, #0
 8004562:	b2db      	uxtb	r3, r3
 8004564:	2b00      	cmp	r3, #0
 8004566:	d00f      	beq.n	8004588 <HAL_RCC_OscConfig+0x37c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004568:	2300      	movs	r3, #0
 800456a:	60bb      	str	r3, [r7, #8]
 800456c:	4b4f      	ldr	r3, [pc, #316]	@ (80046ac <HAL_RCC_OscConfig+0x4a0>)
 800456e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004570:	4a4e      	ldr	r2, [pc, #312]	@ (80046ac <HAL_RCC_OscConfig+0x4a0>)
 8004572:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004576:	6413      	str	r3, [r2, #64]	@ 0x40
 8004578:	4b4c      	ldr	r3, [pc, #304]	@ (80046ac <HAL_RCC_OscConfig+0x4a0>)
 800457a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800457c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004580:	60bb      	str	r3, [r7, #8]
 8004582:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004584:	2301      	movs	r3, #1
 8004586:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004588:	4b4a      	ldr	r3, [pc, #296]	@ (80046b4 <HAL_RCC_OscConfig+0x4a8>)
 800458a:	681b      	ldr	r3, [r3, #0]
 800458c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004590:	2b00      	cmp	r3, #0
 8004592:	bf0c      	ite	eq
 8004594:	2301      	moveq	r3, #1
 8004596:	2300      	movne	r3, #0
 8004598:	b2db      	uxtb	r3, r3
 800459a:	2b00      	cmp	r3, #0
 800459c:	d023      	beq.n	80045e6 <HAL_RCC_OscConfig+0x3da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800459e:	4b45      	ldr	r3, [pc, #276]	@ (80046b4 <HAL_RCC_OscConfig+0x4a8>)
 80045a0:	681b      	ldr	r3, [r3, #0]
 80045a2:	4a44      	ldr	r2, [pc, #272]	@ (80046b4 <HAL_RCC_OscConfig+0x4a8>)
 80045a4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80045a8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80045aa:	f7fe fb55 	bl	8002c58 <HAL_GetTick>
 80045ae:	4603      	mov	r3, r0
 80045b0:	613b      	str	r3, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80045b2:	e00d      	b.n	80045d0 <HAL_RCC_OscConfig+0x3c4>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80045b4:	f7fe fb50 	bl	8002c58 <HAL_GetTick>
 80045b8:	4602      	mov	r2, r0
 80045ba:	693b      	ldr	r3, [r7, #16]
 80045bc:	1ad3      	subs	r3, r2, r3
 80045be:	2b02      	cmp	r3, #2
 80045c0:	bf8c      	ite	hi
 80045c2:	2301      	movhi	r3, #1
 80045c4:	2300      	movls	r3, #0
 80045c6:	b2db      	uxtb	r3, r3
 80045c8:	2b00      	cmp	r3, #0
 80045ca:	d001      	beq.n	80045d0 <HAL_RCC_OscConfig+0x3c4>
        {
          return HAL_TIMEOUT;
 80045cc:	2303      	movs	r3, #3
 80045ce:	e15b      	b.n	8004888 <HAL_RCC_OscConfig+0x67c>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80045d0:	4b38      	ldr	r3, [pc, #224]	@ (80046b4 <HAL_RCC_OscConfig+0x4a8>)
 80045d2:	681b      	ldr	r3, [r3, #0]
 80045d4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80045d8:	2b00      	cmp	r3, #0
 80045da:	bf0c      	ite	eq
 80045dc:	2301      	moveq	r3, #1
 80045de:	2300      	movne	r3, #0
 80045e0:	b2db      	uxtb	r3, r3
 80045e2:	2b00      	cmp	r3, #0
 80045e4:	d1e6      	bne.n	80045b4 <HAL_RCC_OscConfig+0x3a8>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80045e6:	687b      	ldr	r3, [r7, #4]
 80045e8:	689b      	ldr	r3, [r3, #8]
 80045ea:	2b01      	cmp	r3, #1
 80045ec:	d106      	bne.n	80045fc <HAL_RCC_OscConfig+0x3f0>
 80045ee:	4b2f      	ldr	r3, [pc, #188]	@ (80046ac <HAL_RCC_OscConfig+0x4a0>)
 80045f0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80045f2:	4a2e      	ldr	r2, [pc, #184]	@ (80046ac <HAL_RCC_OscConfig+0x4a0>)
 80045f4:	f043 0301 	orr.w	r3, r3, #1
 80045f8:	6713      	str	r3, [r2, #112]	@ 0x70
 80045fa:	e01c      	b.n	8004636 <HAL_RCC_OscConfig+0x42a>
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	689b      	ldr	r3, [r3, #8]
 8004600:	2b05      	cmp	r3, #5
 8004602:	d10c      	bne.n	800461e <HAL_RCC_OscConfig+0x412>
 8004604:	4b29      	ldr	r3, [pc, #164]	@ (80046ac <HAL_RCC_OscConfig+0x4a0>)
 8004606:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004608:	4a28      	ldr	r2, [pc, #160]	@ (80046ac <HAL_RCC_OscConfig+0x4a0>)
 800460a:	f043 0304 	orr.w	r3, r3, #4
 800460e:	6713      	str	r3, [r2, #112]	@ 0x70
 8004610:	4b26      	ldr	r3, [pc, #152]	@ (80046ac <HAL_RCC_OscConfig+0x4a0>)
 8004612:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004614:	4a25      	ldr	r2, [pc, #148]	@ (80046ac <HAL_RCC_OscConfig+0x4a0>)
 8004616:	f043 0301 	orr.w	r3, r3, #1
 800461a:	6713      	str	r3, [r2, #112]	@ 0x70
 800461c:	e00b      	b.n	8004636 <HAL_RCC_OscConfig+0x42a>
 800461e:	4b23      	ldr	r3, [pc, #140]	@ (80046ac <HAL_RCC_OscConfig+0x4a0>)
 8004620:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004622:	4a22      	ldr	r2, [pc, #136]	@ (80046ac <HAL_RCC_OscConfig+0x4a0>)
 8004624:	f023 0301 	bic.w	r3, r3, #1
 8004628:	6713      	str	r3, [r2, #112]	@ 0x70
 800462a:	4b20      	ldr	r3, [pc, #128]	@ (80046ac <HAL_RCC_OscConfig+0x4a0>)
 800462c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800462e:	4a1f      	ldr	r2, [pc, #124]	@ (80046ac <HAL_RCC_OscConfig+0x4a0>)
 8004630:	f023 0304 	bic.w	r3, r3, #4
 8004634:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004636:	687b      	ldr	r3, [r7, #4]
 8004638:	689b      	ldr	r3, [r3, #8]
 800463a:	2b00      	cmp	r3, #0
 800463c:	d020      	beq.n	8004680 <HAL_RCC_OscConfig+0x474>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800463e:	f7fe fb0b 	bl	8002c58 <HAL_GetTick>
 8004642:	4603      	mov	r3, r0
 8004644:	613b      	str	r3, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004646:	e00f      	b.n	8004668 <HAL_RCC_OscConfig+0x45c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004648:	f7fe fb06 	bl	8002c58 <HAL_GetTick>
 800464c:	4602      	mov	r2, r0
 800464e:	693b      	ldr	r3, [r7, #16]
 8004650:	1ad3      	subs	r3, r2, r3
 8004652:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004656:	4293      	cmp	r3, r2
 8004658:	bf8c      	ite	hi
 800465a:	2301      	movhi	r3, #1
 800465c:	2300      	movls	r3, #0
 800465e:	b2db      	uxtb	r3, r3
 8004660:	2b00      	cmp	r3, #0
 8004662:	d001      	beq.n	8004668 <HAL_RCC_OscConfig+0x45c>
        {
          return HAL_TIMEOUT;
 8004664:	2303      	movs	r3, #3
 8004666:	e10f      	b.n	8004888 <HAL_RCC_OscConfig+0x67c>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004668:	4b10      	ldr	r3, [pc, #64]	@ (80046ac <HAL_RCC_OscConfig+0x4a0>)
 800466a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800466c:	f003 0302 	and.w	r3, r3, #2
 8004670:	2b00      	cmp	r3, #0
 8004672:	bf0c      	ite	eq
 8004674:	2301      	moveq	r3, #1
 8004676:	2300      	movne	r3, #0
 8004678:	b2db      	uxtb	r3, r3
 800467a:	2b00      	cmp	r3, #0
 800467c:	d1e4      	bne.n	8004648 <HAL_RCC_OscConfig+0x43c>
 800467e:	e026      	b.n	80046ce <HAL_RCC_OscConfig+0x4c2>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004680:	f7fe faea 	bl	8002c58 <HAL_GetTick>
 8004684:	4603      	mov	r3, r0
 8004686:	613b      	str	r3, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004688:	e016      	b.n	80046b8 <HAL_RCC_OscConfig+0x4ac>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800468a:	f7fe fae5 	bl	8002c58 <HAL_GetTick>
 800468e:	4602      	mov	r2, r0
 8004690:	693b      	ldr	r3, [r7, #16]
 8004692:	1ad3      	subs	r3, r2, r3
 8004694:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004698:	4293      	cmp	r3, r2
 800469a:	bf8c      	ite	hi
 800469c:	2301      	movhi	r3, #1
 800469e:	2300      	movls	r3, #0
 80046a0:	b2db      	uxtb	r3, r3
 80046a2:	2b00      	cmp	r3, #0
 80046a4:	d008      	beq.n	80046b8 <HAL_RCC_OscConfig+0x4ac>
        {
          return HAL_TIMEOUT;
 80046a6:	2303      	movs	r3, #3
 80046a8:	e0ee      	b.n	8004888 <HAL_RCC_OscConfig+0x67c>
 80046aa:	bf00      	nop
 80046ac:	40023800 	.word	0x40023800
 80046b0:	42470e80 	.word	0x42470e80
 80046b4:	40007000 	.word	0x40007000
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80046b8:	4b75      	ldr	r3, [pc, #468]	@ (8004890 <HAL_RCC_OscConfig+0x684>)
 80046ba:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80046bc:	f003 0302 	and.w	r3, r3, #2
 80046c0:	2b00      	cmp	r3, #0
 80046c2:	bf14      	ite	ne
 80046c4:	2301      	movne	r3, #1
 80046c6:	2300      	moveq	r3, #0
 80046c8:	b2db      	uxtb	r3, r3
 80046ca:	2b00      	cmp	r3, #0
 80046cc:	d1dd      	bne.n	800468a <HAL_RCC_OscConfig+0x47e>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80046ce:	7dfb      	ldrb	r3, [r7, #23]
 80046d0:	2b01      	cmp	r3, #1
 80046d2:	d105      	bne.n	80046e0 <HAL_RCC_OscConfig+0x4d4>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80046d4:	4b6e      	ldr	r3, [pc, #440]	@ (8004890 <HAL_RCC_OscConfig+0x684>)
 80046d6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80046d8:	4a6d      	ldr	r2, [pc, #436]	@ (8004890 <HAL_RCC_OscConfig+0x684>)
 80046da:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80046de:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80046e0:	687b      	ldr	r3, [r7, #4]
 80046e2:	699b      	ldr	r3, [r3, #24]
 80046e4:	2b00      	cmp	r3, #0
 80046e6:	f000 80ce 	beq.w	8004886 <HAL_RCC_OscConfig+0x67a>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80046ea:	4b69      	ldr	r3, [pc, #420]	@ (8004890 <HAL_RCC_OscConfig+0x684>)
 80046ec:	689b      	ldr	r3, [r3, #8]
 80046ee:	f003 030c 	and.w	r3, r3, #12
 80046f2:	2b08      	cmp	r3, #8
 80046f4:	bf14      	ite	ne
 80046f6:	2301      	movne	r3, #1
 80046f8:	2300      	moveq	r3, #0
 80046fa:	b2db      	uxtb	r3, r3
 80046fc:	2b00      	cmp	r3, #0
 80046fe:	f000 8082 	beq.w	8004806 <HAL_RCC_OscConfig+0x5fa>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004702:	687b      	ldr	r3, [r7, #4]
 8004704:	699b      	ldr	r3, [r3, #24]
 8004706:	2b02      	cmp	r3, #2
 8004708:	d15b      	bne.n	80047c2 <HAL_RCC_OscConfig+0x5b6>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800470a:	4b62      	ldr	r3, [pc, #392]	@ (8004894 <HAL_RCC_OscConfig+0x688>)
 800470c:	2200      	movs	r2, #0
 800470e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004710:	f7fe faa2 	bl	8002c58 <HAL_GetTick>
 8004714:	4603      	mov	r3, r0
 8004716:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004718:	e00d      	b.n	8004736 <HAL_RCC_OscConfig+0x52a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800471a:	f7fe fa9d 	bl	8002c58 <HAL_GetTick>
 800471e:	4602      	mov	r2, r0
 8004720:	693b      	ldr	r3, [r7, #16]
 8004722:	1ad3      	subs	r3, r2, r3
 8004724:	2b02      	cmp	r3, #2
 8004726:	bf8c      	ite	hi
 8004728:	2301      	movhi	r3, #1
 800472a:	2300      	movls	r3, #0
 800472c:	b2db      	uxtb	r3, r3
 800472e:	2b00      	cmp	r3, #0
 8004730:	d001      	beq.n	8004736 <HAL_RCC_OscConfig+0x52a>
          {
            return HAL_TIMEOUT;
 8004732:	2303      	movs	r3, #3
 8004734:	e0a8      	b.n	8004888 <HAL_RCC_OscConfig+0x67c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004736:	4b56      	ldr	r3, [pc, #344]	@ (8004890 <HAL_RCC_OscConfig+0x684>)
 8004738:	681b      	ldr	r3, [r3, #0]
 800473a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800473e:	2b00      	cmp	r3, #0
 8004740:	bf14      	ite	ne
 8004742:	2301      	movne	r3, #1
 8004744:	2300      	moveq	r3, #0
 8004746:	b2db      	uxtb	r3, r3
 8004748:	2b00      	cmp	r3, #0
 800474a:	d1e6      	bne.n	800471a <HAL_RCC_OscConfig+0x50e>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800474c:	687b      	ldr	r3, [r7, #4]
 800474e:	69da      	ldr	r2, [r3, #28]
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	6a1b      	ldr	r3, [r3, #32]
 8004754:	431a      	orrs	r2, r3
 8004756:	687b      	ldr	r3, [r7, #4]
 8004758:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800475a:	019b      	lsls	r3, r3, #6
 800475c:	431a      	orrs	r2, r3
 800475e:	687b      	ldr	r3, [r7, #4]
 8004760:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004762:	085b      	lsrs	r3, r3, #1
 8004764:	3b01      	subs	r3, #1
 8004766:	041b      	lsls	r3, r3, #16
 8004768:	431a      	orrs	r2, r3
 800476a:	687b      	ldr	r3, [r7, #4]
 800476c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800476e:	061b      	lsls	r3, r3, #24
 8004770:	431a      	orrs	r2, r3
 8004772:	687b      	ldr	r3, [r7, #4]
 8004774:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004776:	071b      	lsls	r3, r3, #28
 8004778:	4945      	ldr	r1, [pc, #276]	@ (8004890 <HAL_RCC_OscConfig+0x684>)
 800477a:	4313      	orrs	r3, r2
 800477c:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800477e:	4b45      	ldr	r3, [pc, #276]	@ (8004894 <HAL_RCC_OscConfig+0x688>)
 8004780:	2201      	movs	r2, #1
 8004782:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004784:	f7fe fa68 	bl	8002c58 <HAL_GetTick>
 8004788:	4603      	mov	r3, r0
 800478a:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800478c:	e00d      	b.n	80047aa <HAL_RCC_OscConfig+0x59e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800478e:	f7fe fa63 	bl	8002c58 <HAL_GetTick>
 8004792:	4602      	mov	r2, r0
 8004794:	693b      	ldr	r3, [r7, #16]
 8004796:	1ad3      	subs	r3, r2, r3
 8004798:	2b02      	cmp	r3, #2
 800479a:	bf8c      	ite	hi
 800479c:	2301      	movhi	r3, #1
 800479e:	2300      	movls	r3, #0
 80047a0:	b2db      	uxtb	r3, r3
 80047a2:	2b00      	cmp	r3, #0
 80047a4:	d001      	beq.n	80047aa <HAL_RCC_OscConfig+0x59e>
          {
            return HAL_TIMEOUT;
 80047a6:	2303      	movs	r3, #3
 80047a8:	e06e      	b.n	8004888 <HAL_RCC_OscConfig+0x67c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80047aa:	4b39      	ldr	r3, [pc, #228]	@ (8004890 <HAL_RCC_OscConfig+0x684>)
 80047ac:	681b      	ldr	r3, [r3, #0]
 80047ae:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80047b2:	2b00      	cmp	r3, #0
 80047b4:	bf0c      	ite	eq
 80047b6:	2301      	moveq	r3, #1
 80047b8:	2300      	movne	r3, #0
 80047ba:	b2db      	uxtb	r3, r3
 80047bc:	2b00      	cmp	r3, #0
 80047be:	d1e6      	bne.n	800478e <HAL_RCC_OscConfig+0x582>
 80047c0:	e061      	b.n	8004886 <HAL_RCC_OscConfig+0x67a>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80047c2:	4b34      	ldr	r3, [pc, #208]	@ (8004894 <HAL_RCC_OscConfig+0x688>)
 80047c4:	2200      	movs	r2, #0
 80047c6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80047c8:	f7fe fa46 	bl	8002c58 <HAL_GetTick>
 80047cc:	4603      	mov	r3, r0
 80047ce:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80047d0:	e00d      	b.n	80047ee <HAL_RCC_OscConfig+0x5e2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80047d2:	f7fe fa41 	bl	8002c58 <HAL_GetTick>
 80047d6:	4602      	mov	r2, r0
 80047d8:	693b      	ldr	r3, [r7, #16]
 80047da:	1ad3      	subs	r3, r2, r3
 80047dc:	2b02      	cmp	r3, #2
 80047de:	bf8c      	ite	hi
 80047e0:	2301      	movhi	r3, #1
 80047e2:	2300      	movls	r3, #0
 80047e4:	b2db      	uxtb	r3, r3
 80047e6:	2b00      	cmp	r3, #0
 80047e8:	d001      	beq.n	80047ee <HAL_RCC_OscConfig+0x5e2>
          {
            return HAL_TIMEOUT;
 80047ea:	2303      	movs	r3, #3
 80047ec:	e04c      	b.n	8004888 <HAL_RCC_OscConfig+0x67c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80047ee:	4b28      	ldr	r3, [pc, #160]	@ (8004890 <HAL_RCC_OscConfig+0x684>)
 80047f0:	681b      	ldr	r3, [r3, #0]
 80047f2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80047f6:	2b00      	cmp	r3, #0
 80047f8:	bf14      	ite	ne
 80047fa:	2301      	movne	r3, #1
 80047fc:	2300      	moveq	r3, #0
 80047fe:	b2db      	uxtb	r3, r3
 8004800:	2b00      	cmp	r3, #0
 8004802:	d1e6      	bne.n	80047d2 <HAL_RCC_OscConfig+0x5c6>
 8004804:	e03f      	b.n	8004886 <HAL_RCC_OscConfig+0x67a>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004806:	687b      	ldr	r3, [r7, #4]
 8004808:	699b      	ldr	r3, [r3, #24]
 800480a:	2b01      	cmp	r3, #1
 800480c:	d101      	bne.n	8004812 <HAL_RCC_OscConfig+0x606>
      {
        return HAL_ERROR;
 800480e:	2301      	movs	r3, #1
 8004810:	e03a      	b.n	8004888 <HAL_RCC_OscConfig+0x67c>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8004812:	4b1f      	ldr	r3, [pc, #124]	@ (8004890 <HAL_RCC_OscConfig+0x684>)
 8004814:	685b      	ldr	r3, [r3, #4]
 8004816:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	699b      	ldr	r3, [r3, #24]
 800481c:	2b01      	cmp	r3, #1
 800481e:	d030      	beq.n	8004882 <HAL_RCC_OscConfig+0x676>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004820:	68fb      	ldr	r3, [r7, #12]
 8004822:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8004826:	687b      	ldr	r3, [r7, #4]
 8004828:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800482a:	429a      	cmp	r2, r3
 800482c:	d129      	bne.n	8004882 <HAL_RCC_OscConfig+0x676>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800482e:	68fb      	ldr	r3, [r7, #12]
 8004830:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8004834:	687b      	ldr	r3, [r7, #4]
 8004836:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004838:	429a      	cmp	r2, r3
 800483a:	d122      	bne.n	8004882 <HAL_RCC_OscConfig+0x676>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800483c:	68fa      	ldr	r2, [r7, #12]
 800483e:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8004842:	4013      	ands	r3, r2
 8004844:	687a      	ldr	r2, [r7, #4]
 8004846:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8004848:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800484a:	4293      	cmp	r3, r2
 800484c:	d119      	bne.n	8004882 <HAL_RCC_OscConfig+0x676>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800484e:	68fb      	ldr	r3, [r7, #12]
 8004850:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004858:	085b      	lsrs	r3, r3, #1
 800485a:	3b01      	subs	r3, #1
 800485c:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800485e:	429a      	cmp	r2, r3
 8004860:	d10f      	bne.n	8004882 <HAL_RCC_OscConfig+0x676>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004862:	68fb      	ldr	r3, [r7, #12]
 8004864:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8004868:	687b      	ldr	r3, [r7, #4]
 800486a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800486c:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800486e:	429a      	cmp	r2, r3
 8004870:	d107      	bne.n	8004882 <HAL_RCC_OscConfig+0x676>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8004872:	68fb      	ldr	r3, [r7, #12]
 8004874:	f003 42e0 	and.w	r2, r3, #1879048192	@ 0x70000000
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800487c:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 800487e:	429a      	cmp	r2, r3
 8004880:	d001      	beq.n	8004886 <HAL_RCC_OscConfig+0x67a>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8004882:	2301      	movs	r3, #1
 8004884:	e000      	b.n	8004888 <HAL_RCC_OscConfig+0x67c>
        }
      }
    }
  }
  return HAL_OK;
 8004886:	2300      	movs	r3, #0
}
 8004888:	4618      	mov	r0, r3
 800488a:	3718      	adds	r7, #24
 800488c:	46bd      	mov	sp, r7
 800488e:	bd80      	pop	{r7, pc}
 8004890:	40023800 	.word	0x40023800
 8004894:	42470060 	.word	0x42470060

08004898 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8004898:	b580      	push	{r7, lr}
 800489a:	b082      	sub	sp, #8
 800489c:	af00      	add	r7, sp, #0
 800489e:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80048a0:	687b      	ldr	r3, [r7, #4]
 80048a2:	2b00      	cmp	r3, #0
 80048a4:	d101      	bne.n	80048aa <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80048a6:	2301      	movs	r3, #1
 80048a8:	e080      	b.n	80049ac <HAL_SPI_Init+0x114>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80048aa:	687b      	ldr	r3, [r7, #4]
 80048ac:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80048ae:	2b00      	cmp	r3, #0
 80048b0:	d108      	bne.n	80048c4 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80048b2:	687b      	ldr	r3, [r7, #4]
 80048b4:	685b      	ldr	r3, [r3, #4]
 80048b6:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80048ba:	d009      	beq.n	80048d0 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	2200      	movs	r2, #0
 80048c0:	61da      	str	r2, [r3, #28]
 80048c2:	e005      	b.n	80048d0 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80048c4:	687b      	ldr	r3, [r7, #4]
 80048c6:	2200      	movs	r2, #0
 80048c8:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80048ca:	687b      	ldr	r3, [r7, #4]
 80048cc:	2200      	movs	r2, #0
 80048ce:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80048d0:	687b      	ldr	r3, [r7, #4]
 80048d2:	2200      	movs	r2, #0
 80048d4:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80048d6:	687b      	ldr	r3, [r7, #4]
 80048d8:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 80048dc:	b2db      	uxtb	r3, r3
 80048de:	2b00      	cmp	r3, #0
 80048e0:	bf0c      	ite	eq
 80048e2:	2301      	moveq	r3, #1
 80048e4:	2300      	movne	r3, #0
 80048e6:	b2db      	uxtb	r3, r3
 80048e8:	2b00      	cmp	r3, #0
 80048ea:	d006      	beq.n	80048fa <HAL_SPI_Init+0x62>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80048ec:	687b      	ldr	r3, [r7, #4]
 80048ee:	2200      	movs	r2, #0
 80048f0:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80048f4:	6878      	ldr	r0, [r7, #4]
 80048f6:	f7fd ffc9 	bl	800288c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80048fa:	687b      	ldr	r3, [r7, #4]
 80048fc:	2202      	movs	r2, #2
 80048fe:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8004902:	687b      	ldr	r3, [r7, #4]
 8004904:	681b      	ldr	r3, [r3, #0]
 8004906:	681a      	ldr	r2, [r3, #0]
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	681b      	ldr	r3, [r3, #0]
 800490c:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8004910:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8004912:	687b      	ldr	r3, [r7, #4]
 8004914:	685b      	ldr	r3, [r3, #4]
 8004916:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 800491a:	687b      	ldr	r3, [r7, #4]
 800491c:	689b      	ldr	r3, [r3, #8]
 800491e:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8004922:	431a      	orrs	r2, r3
 8004924:	687b      	ldr	r3, [r7, #4]
 8004926:	68db      	ldr	r3, [r3, #12]
 8004928:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800492c:	431a      	orrs	r2, r3
 800492e:	687b      	ldr	r3, [r7, #4]
 8004930:	691b      	ldr	r3, [r3, #16]
 8004932:	f003 0302 	and.w	r3, r3, #2
 8004936:	431a      	orrs	r2, r3
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	695b      	ldr	r3, [r3, #20]
 800493c:	f003 0301 	and.w	r3, r3, #1
 8004940:	431a      	orrs	r2, r3
 8004942:	687b      	ldr	r3, [r7, #4]
 8004944:	699b      	ldr	r3, [r3, #24]
 8004946:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800494a:	431a      	orrs	r2, r3
 800494c:	687b      	ldr	r3, [r7, #4]
 800494e:	69db      	ldr	r3, [r3, #28]
 8004950:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8004954:	431a      	orrs	r2, r3
 8004956:	687b      	ldr	r3, [r7, #4]
 8004958:	6a1b      	ldr	r3, [r3, #32]
 800495a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800495e:	ea42 0103 	orr.w	r1, r2, r3
 8004962:	687b      	ldr	r3, [r7, #4]
 8004964:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004966:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 800496a:	687b      	ldr	r3, [r7, #4]
 800496c:	681b      	ldr	r3, [r3, #0]
 800496e:	430a      	orrs	r2, r1
 8004970:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8004972:	687b      	ldr	r3, [r7, #4]
 8004974:	699b      	ldr	r3, [r3, #24]
 8004976:	0c1b      	lsrs	r3, r3, #16
 8004978:	f003 0104 	and.w	r1, r3, #4
 800497c:	687b      	ldr	r3, [r7, #4]
 800497e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004980:	f003 0210 	and.w	r2, r3, #16
 8004984:	687b      	ldr	r3, [r7, #4]
 8004986:	681b      	ldr	r3, [r3, #0]
 8004988:	430a      	orrs	r2, r1
 800498a:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800498c:	687b      	ldr	r3, [r7, #4]
 800498e:	681b      	ldr	r3, [r3, #0]
 8004990:	69da      	ldr	r2, [r3, #28]
 8004992:	687b      	ldr	r3, [r7, #4]
 8004994:	681b      	ldr	r3, [r3, #0]
 8004996:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800499a:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800499c:	687b      	ldr	r3, [r7, #4]
 800499e:	2200      	movs	r2, #0
 80049a0:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80049a2:	687b      	ldr	r3, [r7, #4]
 80049a4:	2201      	movs	r2, #1
 80049a6:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 80049aa:	2300      	movs	r3, #0
}
 80049ac:	4618      	mov	r0, r3
 80049ae:	3708      	adds	r7, #8
 80049b0:	46bd      	mov	sp, r7
 80049b2:	bd80      	pop	{r7, pc}

080049b4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80049b4:	b580      	push	{r7, lr}
 80049b6:	b082      	sub	sp, #8
 80049b8:	af00      	add	r7, sp, #0
 80049ba:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80049bc:	687b      	ldr	r3, [r7, #4]
 80049be:	2b00      	cmp	r3, #0
 80049c0:	d101      	bne.n	80049c6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80049c2:	2301      	movs	r3, #1
 80049c4:	e046      	b.n	8004a54 <HAL_TIM_Base_Init+0xa0>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80049c6:	687b      	ldr	r3, [r7, #4]
 80049c8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80049cc:	b2db      	uxtb	r3, r3
 80049ce:	2b00      	cmp	r3, #0
 80049d0:	bf0c      	ite	eq
 80049d2:	2301      	moveq	r3, #1
 80049d4:	2300      	movne	r3, #0
 80049d6:	b2db      	uxtb	r3, r3
 80049d8:	2b00      	cmp	r3, #0
 80049da:	d006      	beq.n	80049ea <HAL_TIM_Base_Init+0x36>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80049dc:	687b      	ldr	r3, [r7, #4]
 80049de:	2200      	movs	r2, #0
 80049e0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80049e4:	6878      	ldr	r0, [r7, #4]
 80049e6:	f7fd ff99 	bl	800291c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80049ea:	687b      	ldr	r3, [r7, #4]
 80049ec:	2202      	movs	r2, #2
 80049ee:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80049f2:	687b      	ldr	r3, [r7, #4]
 80049f4:	681a      	ldr	r2, [r3, #0]
 80049f6:	687b      	ldr	r3, [r7, #4]
 80049f8:	3304      	adds	r3, #4
 80049fa:	4619      	mov	r1, r3
 80049fc:	4610      	mov	r0, r2
 80049fe:	f000 fb3b 	bl	8005078 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004a02:	687b      	ldr	r3, [r7, #4]
 8004a04:	2201      	movs	r2, #1
 8004a06:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004a0a:	687b      	ldr	r3, [r7, #4]
 8004a0c:	2201      	movs	r2, #1
 8004a0e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8004a12:	687b      	ldr	r3, [r7, #4]
 8004a14:	2201      	movs	r2, #1
 8004a16:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8004a1a:	687b      	ldr	r3, [r7, #4]
 8004a1c:	2201      	movs	r2, #1
 8004a1e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8004a22:	687b      	ldr	r3, [r7, #4]
 8004a24:	2201      	movs	r2, #1
 8004a26:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004a2a:	687b      	ldr	r3, [r7, #4]
 8004a2c:	2201      	movs	r2, #1
 8004a2e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8004a32:	687b      	ldr	r3, [r7, #4]
 8004a34:	2201      	movs	r2, #1
 8004a36:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8004a3a:	687b      	ldr	r3, [r7, #4]
 8004a3c:	2201      	movs	r2, #1
 8004a3e:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8004a42:	687b      	ldr	r3, [r7, #4]
 8004a44:	2201      	movs	r2, #1
 8004a46:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004a4a:	687b      	ldr	r3, [r7, #4]
 8004a4c:	2201      	movs	r2, #1
 8004a4e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8004a52:	2300      	movs	r3, #0
}
 8004a54:	4618      	mov	r0, r3
 8004a56:	3708      	adds	r7, #8
 8004a58:	46bd      	mov	sp, r7
 8004a5a:	bd80      	pop	{r7, pc}

08004a5c <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8004a5c:	b480      	push	{r7}
 8004a5e:	b085      	sub	sp, #20
 8004a60:	af00      	add	r7, sp, #0
 8004a62:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004a64:	687b      	ldr	r3, [r7, #4]
 8004a66:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004a6a:	b2db      	uxtb	r3, r3
 8004a6c:	2b01      	cmp	r3, #1
 8004a6e:	bf14      	ite	ne
 8004a70:	2301      	movne	r3, #1
 8004a72:	2300      	moveq	r3, #0
 8004a74:	b2db      	uxtb	r3, r3
 8004a76:	2b00      	cmp	r3, #0
 8004a78:	d001      	beq.n	8004a7e <HAL_TIM_Base_Start+0x22>
  {
    return HAL_ERROR;
 8004a7a:	2301      	movs	r3, #1
 8004a7c:	e046      	b.n	8004b0c <HAL_TIM_Base_Start+0xb0>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004a7e:	687b      	ldr	r3, [r7, #4]
 8004a80:	2202      	movs	r2, #2
 8004a82:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004a86:	687b      	ldr	r3, [r7, #4]
 8004a88:	681b      	ldr	r3, [r3, #0]
 8004a8a:	4a23      	ldr	r2, [pc, #140]	@ (8004b18 <HAL_TIM_Base_Start+0xbc>)
 8004a8c:	4293      	cmp	r3, r2
 8004a8e:	d022      	beq.n	8004ad6 <HAL_TIM_Base_Start+0x7a>
 8004a90:	687b      	ldr	r3, [r7, #4]
 8004a92:	681b      	ldr	r3, [r3, #0]
 8004a94:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004a98:	d01d      	beq.n	8004ad6 <HAL_TIM_Base_Start+0x7a>
 8004a9a:	687b      	ldr	r3, [r7, #4]
 8004a9c:	681b      	ldr	r3, [r3, #0]
 8004a9e:	4a1f      	ldr	r2, [pc, #124]	@ (8004b1c <HAL_TIM_Base_Start+0xc0>)
 8004aa0:	4293      	cmp	r3, r2
 8004aa2:	d018      	beq.n	8004ad6 <HAL_TIM_Base_Start+0x7a>
 8004aa4:	687b      	ldr	r3, [r7, #4]
 8004aa6:	681b      	ldr	r3, [r3, #0]
 8004aa8:	4a1d      	ldr	r2, [pc, #116]	@ (8004b20 <HAL_TIM_Base_Start+0xc4>)
 8004aaa:	4293      	cmp	r3, r2
 8004aac:	d013      	beq.n	8004ad6 <HAL_TIM_Base_Start+0x7a>
 8004aae:	687b      	ldr	r3, [r7, #4]
 8004ab0:	681b      	ldr	r3, [r3, #0]
 8004ab2:	4a1c      	ldr	r2, [pc, #112]	@ (8004b24 <HAL_TIM_Base_Start+0xc8>)
 8004ab4:	4293      	cmp	r3, r2
 8004ab6:	d00e      	beq.n	8004ad6 <HAL_TIM_Base_Start+0x7a>
 8004ab8:	687b      	ldr	r3, [r7, #4]
 8004aba:	681b      	ldr	r3, [r3, #0]
 8004abc:	4a1a      	ldr	r2, [pc, #104]	@ (8004b28 <HAL_TIM_Base_Start+0xcc>)
 8004abe:	4293      	cmp	r3, r2
 8004ac0:	d009      	beq.n	8004ad6 <HAL_TIM_Base_Start+0x7a>
 8004ac2:	687b      	ldr	r3, [r7, #4]
 8004ac4:	681b      	ldr	r3, [r3, #0]
 8004ac6:	4a19      	ldr	r2, [pc, #100]	@ (8004b2c <HAL_TIM_Base_Start+0xd0>)
 8004ac8:	4293      	cmp	r3, r2
 8004aca:	d004      	beq.n	8004ad6 <HAL_TIM_Base_Start+0x7a>
 8004acc:	687b      	ldr	r3, [r7, #4]
 8004ace:	681b      	ldr	r3, [r3, #0]
 8004ad0:	4a17      	ldr	r2, [pc, #92]	@ (8004b30 <HAL_TIM_Base_Start+0xd4>)
 8004ad2:	4293      	cmp	r3, r2
 8004ad4:	d111      	bne.n	8004afa <HAL_TIM_Base_Start+0x9e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004ad6:	687b      	ldr	r3, [r7, #4]
 8004ad8:	681b      	ldr	r3, [r3, #0]
 8004ada:	689b      	ldr	r3, [r3, #8]
 8004adc:	f003 0307 	and.w	r3, r3, #7
 8004ae0:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004ae2:	68fb      	ldr	r3, [r7, #12]
 8004ae4:	2b06      	cmp	r3, #6
 8004ae6:	d010      	beq.n	8004b0a <HAL_TIM_Base_Start+0xae>
    {
      __HAL_TIM_ENABLE(htim);
 8004ae8:	687b      	ldr	r3, [r7, #4]
 8004aea:	681b      	ldr	r3, [r3, #0]
 8004aec:	681a      	ldr	r2, [r3, #0]
 8004aee:	687b      	ldr	r3, [r7, #4]
 8004af0:	681b      	ldr	r3, [r3, #0]
 8004af2:	f042 0201 	orr.w	r2, r2, #1
 8004af6:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004af8:	e007      	b.n	8004b0a <HAL_TIM_Base_Start+0xae>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004afa:	687b      	ldr	r3, [r7, #4]
 8004afc:	681b      	ldr	r3, [r3, #0]
 8004afe:	681a      	ldr	r2, [r3, #0]
 8004b00:	687b      	ldr	r3, [r7, #4]
 8004b02:	681b      	ldr	r3, [r3, #0]
 8004b04:	f042 0201 	orr.w	r2, r2, #1
 8004b08:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004b0a:	2300      	movs	r3, #0
}
 8004b0c:	4618      	mov	r0, r3
 8004b0e:	3714      	adds	r7, #20
 8004b10:	46bd      	mov	sp, r7
 8004b12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b16:	4770      	bx	lr
 8004b18:	40010000 	.word	0x40010000
 8004b1c:	40000400 	.word	0x40000400
 8004b20:	40000800 	.word	0x40000800
 8004b24:	40000c00 	.word	0x40000c00
 8004b28:	40010400 	.word	0x40010400
 8004b2c:	40014000 	.word	0x40014000
 8004b30:	40001800 	.word	0x40001800

08004b34 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8004b34:	b580      	push	{r7, lr}
 8004b36:	b082      	sub	sp, #8
 8004b38:	af00      	add	r7, sp, #0
 8004b3a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004b3c:	687b      	ldr	r3, [r7, #4]
 8004b3e:	2b00      	cmp	r3, #0
 8004b40:	d101      	bne.n	8004b46 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8004b42:	2301      	movs	r3, #1
 8004b44:	e046      	b.n	8004bd4 <HAL_TIM_PWM_Init+0xa0>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004b46:	687b      	ldr	r3, [r7, #4]
 8004b48:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004b4c:	b2db      	uxtb	r3, r3
 8004b4e:	2b00      	cmp	r3, #0
 8004b50:	bf0c      	ite	eq
 8004b52:	2301      	moveq	r3, #1
 8004b54:	2300      	movne	r3, #0
 8004b56:	b2db      	uxtb	r3, r3
 8004b58:	2b00      	cmp	r3, #0
 8004b5a:	d006      	beq.n	8004b6a <HAL_TIM_PWM_Init+0x36>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004b5c:	687b      	ldr	r3, [r7, #4]
 8004b5e:	2200      	movs	r2, #0
 8004b60:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8004b64:	6878      	ldr	r0, [r7, #4]
 8004b66:	f000 f839 	bl	8004bdc <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004b6a:	687b      	ldr	r3, [r7, #4]
 8004b6c:	2202      	movs	r2, #2
 8004b6e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004b72:	687b      	ldr	r3, [r7, #4]
 8004b74:	681a      	ldr	r2, [r3, #0]
 8004b76:	687b      	ldr	r3, [r7, #4]
 8004b78:	3304      	adds	r3, #4
 8004b7a:	4619      	mov	r1, r3
 8004b7c:	4610      	mov	r0, r2
 8004b7e:	f000 fa7b 	bl	8005078 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004b82:	687b      	ldr	r3, [r7, #4]
 8004b84:	2201      	movs	r2, #1
 8004b86:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004b8a:	687b      	ldr	r3, [r7, #4]
 8004b8c:	2201      	movs	r2, #1
 8004b8e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8004b92:	687b      	ldr	r3, [r7, #4]
 8004b94:	2201      	movs	r2, #1
 8004b96:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8004b9a:	687b      	ldr	r3, [r7, #4]
 8004b9c:	2201      	movs	r2, #1
 8004b9e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8004ba2:	687b      	ldr	r3, [r7, #4]
 8004ba4:	2201      	movs	r2, #1
 8004ba6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004baa:	687b      	ldr	r3, [r7, #4]
 8004bac:	2201      	movs	r2, #1
 8004bae:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8004bb2:	687b      	ldr	r3, [r7, #4]
 8004bb4:	2201      	movs	r2, #1
 8004bb6:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8004bba:	687b      	ldr	r3, [r7, #4]
 8004bbc:	2201      	movs	r2, #1
 8004bbe:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8004bc2:	687b      	ldr	r3, [r7, #4]
 8004bc4:	2201      	movs	r2, #1
 8004bc6:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004bca:	687b      	ldr	r3, [r7, #4]
 8004bcc:	2201      	movs	r2, #1
 8004bce:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8004bd2:	2300      	movs	r3, #0
}
 8004bd4:	4618      	mov	r0, r3
 8004bd6:	3708      	adds	r7, #8
 8004bd8:	46bd      	mov	sp, r7
 8004bda:	bd80      	pop	{r7, pc}

08004bdc <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8004bdc:	b480      	push	{r7}
 8004bde:	b083      	sub	sp, #12
 8004be0:	af00      	add	r7, sp, #0
 8004be2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8004be4:	bf00      	nop
 8004be6:	370c      	adds	r7, #12
 8004be8:	46bd      	mov	sp, r7
 8004bea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bee:	4770      	bx	lr

08004bf0 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004bf0:	b580      	push	{r7, lr}
 8004bf2:	b084      	sub	sp, #16
 8004bf4:	af00      	add	r7, sp, #0
 8004bf6:	6078      	str	r0, [r7, #4]
 8004bf8:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8004bfa:	683b      	ldr	r3, [r7, #0]
 8004bfc:	2b00      	cmp	r3, #0
 8004bfe:	d104      	bne.n	8004c0a <HAL_TIM_PWM_Start+0x1a>
 8004c00:	687b      	ldr	r3, [r7, #4]
 8004c02:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8004c06:	b2db      	uxtb	r3, r3
 8004c08:	e013      	b.n	8004c32 <HAL_TIM_PWM_Start+0x42>
 8004c0a:	683b      	ldr	r3, [r7, #0]
 8004c0c:	2b04      	cmp	r3, #4
 8004c0e:	d104      	bne.n	8004c1a <HAL_TIM_PWM_Start+0x2a>
 8004c10:	687b      	ldr	r3, [r7, #4]
 8004c12:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8004c16:	b2db      	uxtb	r3, r3
 8004c18:	e00b      	b.n	8004c32 <HAL_TIM_PWM_Start+0x42>
 8004c1a:	683b      	ldr	r3, [r7, #0]
 8004c1c:	2b08      	cmp	r3, #8
 8004c1e:	d104      	bne.n	8004c2a <HAL_TIM_PWM_Start+0x3a>
 8004c20:	687b      	ldr	r3, [r7, #4]
 8004c22:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8004c26:	b2db      	uxtb	r3, r3
 8004c28:	e003      	b.n	8004c32 <HAL_TIM_PWM_Start+0x42>
 8004c2a:	687b      	ldr	r3, [r7, #4]
 8004c2c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004c30:	b2db      	uxtb	r3, r3
 8004c32:	2b01      	cmp	r3, #1
 8004c34:	bf14      	ite	ne
 8004c36:	2301      	movne	r3, #1
 8004c38:	2300      	moveq	r3, #0
 8004c3a:	b2db      	uxtb	r3, r3
 8004c3c:	2b00      	cmp	r3, #0
 8004c3e:	d001      	beq.n	8004c44 <HAL_TIM_PWM_Start+0x54>
  {
    return HAL_ERROR;
 8004c40:	2301      	movs	r3, #1
 8004c42:	e07c      	b.n	8004d3e <HAL_TIM_PWM_Start+0x14e>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8004c44:	683b      	ldr	r3, [r7, #0]
 8004c46:	2b00      	cmp	r3, #0
 8004c48:	d104      	bne.n	8004c54 <HAL_TIM_PWM_Start+0x64>
 8004c4a:	687b      	ldr	r3, [r7, #4]
 8004c4c:	2202      	movs	r2, #2
 8004c4e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8004c52:	e013      	b.n	8004c7c <HAL_TIM_PWM_Start+0x8c>
 8004c54:	683b      	ldr	r3, [r7, #0]
 8004c56:	2b04      	cmp	r3, #4
 8004c58:	d104      	bne.n	8004c64 <HAL_TIM_PWM_Start+0x74>
 8004c5a:	687b      	ldr	r3, [r7, #4]
 8004c5c:	2202      	movs	r2, #2
 8004c5e:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8004c62:	e00b      	b.n	8004c7c <HAL_TIM_PWM_Start+0x8c>
 8004c64:	683b      	ldr	r3, [r7, #0]
 8004c66:	2b08      	cmp	r3, #8
 8004c68:	d104      	bne.n	8004c74 <HAL_TIM_PWM_Start+0x84>
 8004c6a:	687b      	ldr	r3, [r7, #4]
 8004c6c:	2202      	movs	r2, #2
 8004c6e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8004c72:	e003      	b.n	8004c7c <HAL_TIM_PWM_Start+0x8c>
 8004c74:	687b      	ldr	r3, [r7, #4]
 8004c76:	2202      	movs	r2, #2
 8004c78:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8004c7c:	687b      	ldr	r3, [r7, #4]
 8004c7e:	681b      	ldr	r3, [r3, #0]
 8004c80:	2201      	movs	r2, #1
 8004c82:	6839      	ldr	r1, [r7, #0]
 8004c84:	4618      	mov	r0, r3
 8004c86:	f000 fcf1 	bl	800566c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8004c8a:	687b      	ldr	r3, [r7, #4]
 8004c8c:	681b      	ldr	r3, [r3, #0]
 8004c8e:	4a2e      	ldr	r2, [pc, #184]	@ (8004d48 <HAL_TIM_PWM_Start+0x158>)
 8004c90:	4293      	cmp	r3, r2
 8004c92:	d004      	beq.n	8004c9e <HAL_TIM_PWM_Start+0xae>
 8004c94:	687b      	ldr	r3, [r7, #4]
 8004c96:	681b      	ldr	r3, [r3, #0]
 8004c98:	4a2c      	ldr	r2, [pc, #176]	@ (8004d4c <HAL_TIM_PWM_Start+0x15c>)
 8004c9a:	4293      	cmp	r3, r2
 8004c9c:	d101      	bne.n	8004ca2 <HAL_TIM_PWM_Start+0xb2>
 8004c9e:	2301      	movs	r3, #1
 8004ca0:	e000      	b.n	8004ca4 <HAL_TIM_PWM_Start+0xb4>
 8004ca2:	2300      	movs	r3, #0
 8004ca4:	2b00      	cmp	r3, #0
 8004ca6:	d007      	beq.n	8004cb8 <HAL_TIM_PWM_Start+0xc8>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8004ca8:	687b      	ldr	r3, [r7, #4]
 8004caa:	681b      	ldr	r3, [r3, #0]
 8004cac:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8004cae:	687b      	ldr	r3, [r7, #4]
 8004cb0:	681b      	ldr	r3, [r3, #0]
 8004cb2:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8004cb6:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004cb8:	687b      	ldr	r3, [r7, #4]
 8004cba:	681b      	ldr	r3, [r3, #0]
 8004cbc:	4a22      	ldr	r2, [pc, #136]	@ (8004d48 <HAL_TIM_PWM_Start+0x158>)
 8004cbe:	4293      	cmp	r3, r2
 8004cc0:	d022      	beq.n	8004d08 <HAL_TIM_PWM_Start+0x118>
 8004cc2:	687b      	ldr	r3, [r7, #4]
 8004cc4:	681b      	ldr	r3, [r3, #0]
 8004cc6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004cca:	d01d      	beq.n	8004d08 <HAL_TIM_PWM_Start+0x118>
 8004ccc:	687b      	ldr	r3, [r7, #4]
 8004cce:	681b      	ldr	r3, [r3, #0]
 8004cd0:	4a1f      	ldr	r2, [pc, #124]	@ (8004d50 <HAL_TIM_PWM_Start+0x160>)
 8004cd2:	4293      	cmp	r3, r2
 8004cd4:	d018      	beq.n	8004d08 <HAL_TIM_PWM_Start+0x118>
 8004cd6:	687b      	ldr	r3, [r7, #4]
 8004cd8:	681b      	ldr	r3, [r3, #0]
 8004cda:	4a1e      	ldr	r2, [pc, #120]	@ (8004d54 <HAL_TIM_PWM_Start+0x164>)
 8004cdc:	4293      	cmp	r3, r2
 8004cde:	d013      	beq.n	8004d08 <HAL_TIM_PWM_Start+0x118>
 8004ce0:	687b      	ldr	r3, [r7, #4]
 8004ce2:	681b      	ldr	r3, [r3, #0]
 8004ce4:	4a1c      	ldr	r2, [pc, #112]	@ (8004d58 <HAL_TIM_PWM_Start+0x168>)
 8004ce6:	4293      	cmp	r3, r2
 8004ce8:	d00e      	beq.n	8004d08 <HAL_TIM_PWM_Start+0x118>
 8004cea:	687b      	ldr	r3, [r7, #4]
 8004cec:	681b      	ldr	r3, [r3, #0]
 8004cee:	4a17      	ldr	r2, [pc, #92]	@ (8004d4c <HAL_TIM_PWM_Start+0x15c>)
 8004cf0:	4293      	cmp	r3, r2
 8004cf2:	d009      	beq.n	8004d08 <HAL_TIM_PWM_Start+0x118>
 8004cf4:	687b      	ldr	r3, [r7, #4]
 8004cf6:	681b      	ldr	r3, [r3, #0]
 8004cf8:	4a18      	ldr	r2, [pc, #96]	@ (8004d5c <HAL_TIM_PWM_Start+0x16c>)
 8004cfa:	4293      	cmp	r3, r2
 8004cfc:	d004      	beq.n	8004d08 <HAL_TIM_PWM_Start+0x118>
 8004cfe:	687b      	ldr	r3, [r7, #4]
 8004d00:	681b      	ldr	r3, [r3, #0]
 8004d02:	4a17      	ldr	r2, [pc, #92]	@ (8004d60 <HAL_TIM_PWM_Start+0x170>)
 8004d04:	4293      	cmp	r3, r2
 8004d06:	d111      	bne.n	8004d2c <HAL_TIM_PWM_Start+0x13c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004d08:	687b      	ldr	r3, [r7, #4]
 8004d0a:	681b      	ldr	r3, [r3, #0]
 8004d0c:	689b      	ldr	r3, [r3, #8]
 8004d0e:	f003 0307 	and.w	r3, r3, #7
 8004d12:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004d14:	68fb      	ldr	r3, [r7, #12]
 8004d16:	2b06      	cmp	r3, #6
 8004d18:	d010      	beq.n	8004d3c <HAL_TIM_PWM_Start+0x14c>
    {
      __HAL_TIM_ENABLE(htim);
 8004d1a:	687b      	ldr	r3, [r7, #4]
 8004d1c:	681b      	ldr	r3, [r3, #0]
 8004d1e:	681a      	ldr	r2, [r3, #0]
 8004d20:	687b      	ldr	r3, [r7, #4]
 8004d22:	681b      	ldr	r3, [r3, #0]
 8004d24:	f042 0201 	orr.w	r2, r2, #1
 8004d28:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004d2a:	e007      	b.n	8004d3c <HAL_TIM_PWM_Start+0x14c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004d2c:	687b      	ldr	r3, [r7, #4]
 8004d2e:	681b      	ldr	r3, [r3, #0]
 8004d30:	681a      	ldr	r2, [r3, #0]
 8004d32:	687b      	ldr	r3, [r7, #4]
 8004d34:	681b      	ldr	r3, [r3, #0]
 8004d36:	f042 0201 	orr.w	r2, r2, #1
 8004d3a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004d3c:	2300      	movs	r3, #0
}
 8004d3e:	4618      	mov	r0, r3
 8004d40:	3710      	adds	r7, #16
 8004d42:	46bd      	mov	sp, r7
 8004d44:	bd80      	pop	{r7, pc}
 8004d46:	bf00      	nop
 8004d48:	40010000 	.word	0x40010000
 8004d4c:	40010400 	.word	0x40010400
 8004d50:	40000400 	.word	0x40000400
 8004d54:	40000800 	.word	0x40000800
 8004d58:	40000c00 	.word	0x40000c00
 8004d5c:	40014000 	.word	0x40014000
 8004d60:	40001800 	.word	0x40001800

08004d64 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8004d64:	b580      	push	{r7, lr}
 8004d66:	b086      	sub	sp, #24
 8004d68:	af00      	add	r7, sp, #0
 8004d6a:	60f8      	str	r0, [r7, #12]
 8004d6c:	60b9      	str	r1, [r7, #8]
 8004d6e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004d70:	2300      	movs	r3, #0
 8004d72:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8004d74:	68fb      	ldr	r3, [r7, #12]
 8004d76:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004d7a:	2b01      	cmp	r3, #1
 8004d7c:	d101      	bne.n	8004d82 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8004d7e:	2302      	movs	r3, #2
 8004d80:	e0ae      	b.n	8004ee0 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8004d82:	68fb      	ldr	r3, [r7, #12]
 8004d84:	2201      	movs	r2, #1
 8004d86:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8004d8a:	687b      	ldr	r3, [r7, #4]
 8004d8c:	2b0c      	cmp	r3, #12
 8004d8e:	f200 809f 	bhi.w	8004ed0 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8004d92:	a201      	add	r2, pc, #4	@ (adr r2, 8004d98 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8004d94:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004d98:	08004dcd 	.word	0x08004dcd
 8004d9c:	08004ed1 	.word	0x08004ed1
 8004da0:	08004ed1 	.word	0x08004ed1
 8004da4:	08004ed1 	.word	0x08004ed1
 8004da8:	08004e0d 	.word	0x08004e0d
 8004dac:	08004ed1 	.word	0x08004ed1
 8004db0:	08004ed1 	.word	0x08004ed1
 8004db4:	08004ed1 	.word	0x08004ed1
 8004db8:	08004e4f 	.word	0x08004e4f
 8004dbc:	08004ed1 	.word	0x08004ed1
 8004dc0:	08004ed1 	.word	0x08004ed1
 8004dc4:	08004ed1 	.word	0x08004ed1
 8004dc8:	08004e8f 	.word	0x08004e8f
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8004dcc:	68fb      	ldr	r3, [r7, #12]
 8004dce:	681b      	ldr	r3, [r3, #0]
 8004dd0:	68b9      	ldr	r1, [r7, #8]
 8004dd2:	4618      	mov	r0, r3
 8004dd4:	f000 fa00 	bl	80051d8 <_ZL17TIM_OC1_SetConfigP11TIM_TypeDefPK18TIM_OC_InitTypeDef>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8004dd8:	68fb      	ldr	r3, [r7, #12]
 8004dda:	681b      	ldr	r3, [r3, #0]
 8004ddc:	699a      	ldr	r2, [r3, #24]
 8004dde:	68fb      	ldr	r3, [r7, #12]
 8004de0:	681b      	ldr	r3, [r3, #0]
 8004de2:	f042 0208 	orr.w	r2, r2, #8
 8004de6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8004de8:	68fb      	ldr	r3, [r7, #12]
 8004dea:	681b      	ldr	r3, [r3, #0]
 8004dec:	699a      	ldr	r2, [r3, #24]
 8004dee:	68fb      	ldr	r3, [r7, #12]
 8004df0:	681b      	ldr	r3, [r3, #0]
 8004df2:	f022 0204 	bic.w	r2, r2, #4
 8004df6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8004df8:	68fb      	ldr	r3, [r7, #12]
 8004dfa:	681b      	ldr	r3, [r3, #0]
 8004dfc:	6999      	ldr	r1, [r3, #24]
 8004dfe:	68bb      	ldr	r3, [r7, #8]
 8004e00:	691a      	ldr	r2, [r3, #16]
 8004e02:	68fb      	ldr	r3, [r7, #12]
 8004e04:	681b      	ldr	r3, [r3, #0]
 8004e06:	430a      	orrs	r2, r1
 8004e08:	619a      	str	r2, [r3, #24]
      break;
 8004e0a:	e064      	b.n	8004ed6 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8004e0c:	68fb      	ldr	r3, [r7, #12]
 8004e0e:	681b      	ldr	r3, [r3, #0]
 8004e10:	68b9      	ldr	r1, [r7, #8]
 8004e12:	4618      	mov	r0, r3
 8004e14:	f000 fa50 	bl	80052b8 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8004e18:	68fb      	ldr	r3, [r7, #12]
 8004e1a:	681b      	ldr	r3, [r3, #0]
 8004e1c:	699a      	ldr	r2, [r3, #24]
 8004e1e:	68fb      	ldr	r3, [r7, #12]
 8004e20:	681b      	ldr	r3, [r3, #0]
 8004e22:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8004e26:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8004e28:	68fb      	ldr	r3, [r7, #12]
 8004e2a:	681b      	ldr	r3, [r3, #0]
 8004e2c:	699a      	ldr	r2, [r3, #24]
 8004e2e:	68fb      	ldr	r3, [r7, #12]
 8004e30:	681b      	ldr	r3, [r3, #0]
 8004e32:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004e36:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8004e38:	68fb      	ldr	r3, [r7, #12]
 8004e3a:	681b      	ldr	r3, [r3, #0]
 8004e3c:	6999      	ldr	r1, [r3, #24]
 8004e3e:	68bb      	ldr	r3, [r7, #8]
 8004e40:	691b      	ldr	r3, [r3, #16]
 8004e42:	021a      	lsls	r2, r3, #8
 8004e44:	68fb      	ldr	r3, [r7, #12]
 8004e46:	681b      	ldr	r3, [r3, #0]
 8004e48:	430a      	orrs	r2, r1
 8004e4a:	619a      	str	r2, [r3, #24]
      break;
 8004e4c:	e043      	b.n	8004ed6 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8004e4e:	68fb      	ldr	r3, [r7, #12]
 8004e50:	681b      	ldr	r3, [r3, #0]
 8004e52:	68b9      	ldr	r1, [r7, #8]
 8004e54:	4618      	mov	r0, r3
 8004e56:	f000 faa5 	bl	80053a4 <_ZL17TIM_OC3_SetConfigP11TIM_TypeDefPK18TIM_OC_InitTypeDef>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8004e5a:	68fb      	ldr	r3, [r7, #12]
 8004e5c:	681b      	ldr	r3, [r3, #0]
 8004e5e:	69da      	ldr	r2, [r3, #28]
 8004e60:	68fb      	ldr	r3, [r7, #12]
 8004e62:	681b      	ldr	r3, [r3, #0]
 8004e64:	f042 0208 	orr.w	r2, r2, #8
 8004e68:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8004e6a:	68fb      	ldr	r3, [r7, #12]
 8004e6c:	681b      	ldr	r3, [r3, #0]
 8004e6e:	69da      	ldr	r2, [r3, #28]
 8004e70:	68fb      	ldr	r3, [r7, #12]
 8004e72:	681b      	ldr	r3, [r3, #0]
 8004e74:	f022 0204 	bic.w	r2, r2, #4
 8004e78:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8004e7a:	68fb      	ldr	r3, [r7, #12]
 8004e7c:	681b      	ldr	r3, [r3, #0]
 8004e7e:	69d9      	ldr	r1, [r3, #28]
 8004e80:	68bb      	ldr	r3, [r7, #8]
 8004e82:	691a      	ldr	r2, [r3, #16]
 8004e84:	68fb      	ldr	r3, [r7, #12]
 8004e86:	681b      	ldr	r3, [r3, #0]
 8004e88:	430a      	orrs	r2, r1
 8004e8a:	61da      	str	r2, [r3, #28]
      break;
 8004e8c:	e023      	b.n	8004ed6 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8004e8e:	68fb      	ldr	r3, [r7, #12]
 8004e90:	681b      	ldr	r3, [r3, #0]
 8004e92:	68b9      	ldr	r1, [r7, #8]
 8004e94:	4618      	mov	r0, r3
 8004e96:	f000 faf9 	bl	800548c <_ZL17TIM_OC4_SetConfigP11TIM_TypeDefPK18TIM_OC_InitTypeDef>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8004e9a:	68fb      	ldr	r3, [r7, #12]
 8004e9c:	681b      	ldr	r3, [r3, #0]
 8004e9e:	69da      	ldr	r2, [r3, #28]
 8004ea0:	68fb      	ldr	r3, [r7, #12]
 8004ea2:	681b      	ldr	r3, [r3, #0]
 8004ea4:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8004ea8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8004eaa:	68fb      	ldr	r3, [r7, #12]
 8004eac:	681b      	ldr	r3, [r3, #0]
 8004eae:	69da      	ldr	r2, [r3, #28]
 8004eb0:	68fb      	ldr	r3, [r7, #12]
 8004eb2:	681b      	ldr	r3, [r3, #0]
 8004eb4:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004eb8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8004eba:	68fb      	ldr	r3, [r7, #12]
 8004ebc:	681b      	ldr	r3, [r3, #0]
 8004ebe:	69d9      	ldr	r1, [r3, #28]
 8004ec0:	68bb      	ldr	r3, [r7, #8]
 8004ec2:	691b      	ldr	r3, [r3, #16]
 8004ec4:	021a      	lsls	r2, r3, #8
 8004ec6:	68fb      	ldr	r3, [r7, #12]
 8004ec8:	681b      	ldr	r3, [r3, #0]
 8004eca:	430a      	orrs	r2, r1
 8004ecc:	61da      	str	r2, [r3, #28]
      break;
 8004ece:	e002      	b.n	8004ed6 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8004ed0:	2301      	movs	r3, #1
 8004ed2:	75fb      	strb	r3, [r7, #23]
      break;
 8004ed4:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8004ed6:	68fb      	ldr	r3, [r7, #12]
 8004ed8:	2200      	movs	r2, #0
 8004eda:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8004ede:	7dfb      	ldrb	r3, [r7, #23]
}
 8004ee0:	4618      	mov	r0, r3
 8004ee2:	3718      	adds	r7, #24
 8004ee4:	46bd      	mov	sp, r7
 8004ee6:	bd80      	pop	{r7, pc}

08004ee8 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004ee8:	b580      	push	{r7, lr}
 8004eea:	b084      	sub	sp, #16
 8004eec:	af00      	add	r7, sp, #0
 8004eee:	6078      	str	r0, [r7, #4]
 8004ef0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004ef2:	2300      	movs	r3, #0
 8004ef4:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8004ef6:	687b      	ldr	r3, [r7, #4]
 8004ef8:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004efc:	2b01      	cmp	r3, #1
 8004efe:	d101      	bne.n	8004f04 <HAL_TIM_ConfigClockSource+0x1c>
 8004f00:	2302      	movs	r3, #2
 8004f02:	e0b4      	b.n	800506e <HAL_TIM_ConfigClockSource+0x186>
 8004f04:	687b      	ldr	r3, [r7, #4]
 8004f06:	2201      	movs	r2, #1
 8004f08:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004f0c:	687b      	ldr	r3, [r7, #4]
 8004f0e:	2202      	movs	r2, #2
 8004f10:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8004f14:	687b      	ldr	r3, [r7, #4]
 8004f16:	681b      	ldr	r3, [r3, #0]
 8004f18:	689b      	ldr	r3, [r3, #8]
 8004f1a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004f1c:	68bb      	ldr	r3, [r7, #8]
 8004f1e:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8004f22:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004f24:	68bb      	ldr	r3, [r7, #8]
 8004f26:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8004f2a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8004f2c:	687b      	ldr	r3, [r7, #4]
 8004f2e:	681b      	ldr	r3, [r3, #0]
 8004f30:	68ba      	ldr	r2, [r7, #8]
 8004f32:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004f34:	683b      	ldr	r3, [r7, #0]
 8004f36:	681b      	ldr	r3, [r3, #0]
 8004f38:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004f3c:	d03e      	beq.n	8004fbc <HAL_TIM_ConfigClockSource+0xd4>
 8004f3e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004f42:	f200 8087 	bhi.w	8005054 <HAL_TIM_ConfigClockSource+0x16c>
 8004f46:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004f4a:	f000 8086 	beq.w	800505a <HAL_TIM_ConfigClockSource+0x172>
 8004f4e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004f52:	d87f      	bhi.n	8005054 <HAL_TIM_ConfigClockSource+0x16c>
 8004f54:	2b70      	cmp	r3, #112	@ 0x70
 8004f56:	d01a      	beq.n	8004f8e <HAL_TIM_ConfigClockSource+0xa6>
 8004f58:	2b70      	cmp	r3, #112	@ 0x70
 8004f5a:	d87b      	bhi.n	8005054 <HAL_TIM_ConfigClockSource+0x16c>
 8004f5c:	2b60      	cmp	r3, #96	@ 0x60
 8004f5e:	d050      	beq.n	8005002 <HAL_TIM_ConfigClockSource+0x11a>
 8004f60:	2b60      	cmp	r3, #96	@ 0x60
 8004f62:	d877      	bhi.n	8005054 <HAL_TIM_ConfigClockSource+0x16c>
 8004f64:	2b50      	cmp	r3, #80	@ 0x50
 8004f66:	d03c      	beq.n	8004fe2 <HAL_TIM_ConfigClockSource+0xfa>
 8004f68:	2b50      	cmp	r3, #80	@ 0x50
 8004f6a:	d873      	bhi.n	8005054 <HAL_TIM_ConfigClockSource+0x16c>
 8004f6c:	2b40      	cmp	r3, #64	@ 0x40
 8004f6e:	d058      	beq.n	8005022 <HAL_TIM_ConfigClockSource+0x13a>
 8004f70:	2b40      	cmp	r3, #64	@ 0x40
 8004f72:	d86f      	bhi.n	8005054 <HAL_TIM_ConfigClockSource+0x16c>
 8004f74:	2b30      	cmp	r3, #48	@ 0x30
 8004f76:	d064      	beq.n	8005042 <HAL_TIM_ConfigClockSource+0x15a>
 8004f78:	2b30      	cmp	r3, #48	@ 0x30
 8004f7a:	d86b      	bhi.n	8005054 <HAL_TIM_ConfigClockSource+0x16c>
 8004f7c:	2b20      	cmp	r3, #32
 8004f7e:	d060      	beq.n	8005042 <HAL_TIM_ConfigClockSource+0x15a>
 8004f80:	2b20      	cmp	r3, #32
 8004f82:	d867      	bhi.n	8005054 <HAL_TIM_ConfigClockSource+0x16c>
 8004f84:	2b00      	cmp	r3, #0
 8004f86:	d05c      	beq.n	8005042 <HAL_TIM_ConfigClockSource+0x15a>
 8004f88:	2b10      	cmp	r3, #16
 8004f8a:	d05a      	beq.n	8005042 <HAL_TIM_ConfigClockSource+0x15a>
 8004f8c:	e062      	b.n	8005054 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004f8e:	687b      	ldr	r3, [r7, #4]
 8004f90:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8004f92:	683b      	ldr	r3, [r7, #0]
 8004f94:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8004f96:	683b      	ldr	r3, [r7, #0]
 8004f98:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8004f9a:	683b      	ldr	r3, [r7, #0]
 8004f9c:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8004f9e:	f000 fb45 	bl	800562c <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8004fa2:	687b      	ldr	r3, [r7, #4]
 8004fa4:	681b      	ldr	r3, [r3, #0]
 8004fa6:	689b      	ldr	r3, [r3, #8]
 8004fa8:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8004faa:	68bb      	ldr	r3, [r7, #8]
 8004fac:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8004fb0:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8004fb2:	687b      	ldr	r3, [r7, #4]
 8004fb4:	681b      	ldr	r3, [r3, #0]
 8004fb6:	68ba      	ldr	r2, [r7, #8]
 8004fb8:	609a      	str	r2, [r3, #8]
      break;
 8004fba:	e04f      	b.n	800505c <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004fbc:	687b      	ldr	r3, [r7, #4]
 8004fbe:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8004fc0:	683b      	ldr	r3, [r7, #0]
 8004fc2:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8004fc4:	683b      	ldr	r3, [r7, #0]
 8004fc6:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8004fc8:	683b      	ldr	r3, [r7, #0]
 8004fca:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8004fcc:	f000 fb2e 	bl	800562c <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004fd0:	687b      	ldr	r3, [r7, #4]
 8004fd2:	681b      	ldr	r3, [r3, #0]
 8004fd4:	689a      	ldr	r2, [r3, #8]
 8004fd6:	687b      	ldr	r3, [r7, #4]
 8004fd8:	681b      	ldr	r3, [r3, #0]
 8004fda:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8004fde:	609a      	str	r2, [r3, #8]
      break;
 8004fe0:	e03c      	b.n	800505c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004fe2:	687b      	ldr	r3, [r7, #4]
 8004fe4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004fe6:	683b      	ldr	r3, [r7, #0]
 8004fe8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004fea:	683b      	ldr	r3, [r7, #0]
 8004fec:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004fee:	461a      	mov	r2, r3
 8004ff0:	f000 faa2 	bl	8005538 <_ZL24TIM_TI1_ConfigInputStageP11TIM_TypeDefmm>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004ff4:	687b      	ldr	r3, [r7, #4]
 8004ff6:	681b      	ldr	r3, [r3, #0]
 8004ff8:	2150      	movs	r1, #80	@ 0x50
 8004ffa:	4618      	mov	r0, r3
 8004ffc:	f000 fafb 	bl	80055f6 <_ZL18TIM_ITRx_SetConfigP11TIM_TypeDefm>
      break;
 8005000:	e02c      	b.n	800505c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8005002:	687b      	ldr	r3, [r7, #4]
 8005004:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8005006:	683b      	ldr	r3, [r7, #0]
 8005008:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800500a:	683b      	ldr	r3, [r7, #0]
 800500c:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800500e:	461a      	mov	r2, r3
 8005010:	f000 fac1 	bl	8005596 <_ZL24TIM_TI2_ConfigInputStageP11TIM_TypeDefmm>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8005014:	687b      	ldr	r3, [r7, #4]
 8005016:	681b      	ldr	r3, [r3, #0]
 8005018:	2160      	movs	r1, #96	@ 0x60
 800501a:	4618      	mov	r0, r3
 800501c:	f000 faeb 	bl	80055f6 <_ZL18TIM_ITRx_SetConfigP11TIM_TypeDefm>
      break;
 8005020:	e01c      	b.n	800505c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005022:	687b      	ldr	r3, [r7, #4]
 8005024:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8005026:	683b      	ldr	r3, [r7, #0]
 8005028:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800502a:	683b      	ldr	r3, [r7, #0]
 800502c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800502e:	461a      	mov	r2, r3
 8005030:	f000 fa82 	bl	8005538 <_ZL24TIM_TI1_ConfigInputStageP11TIM_TypeDefmm>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8005034:	687b      	ldr	r3, [r7, #4]
 8005036:	681b      	ldr	r3, [r3, #0]
 8005038:	2140      	movs	r1, #64	@ 0x40
 800503a:	4618      	mov	r0, r3
 800503c:	f000 fadb 	bl	80055f6 <_ZL18TIM_ITRx_SetConfigP11TIM_TypeDefm>
      break;
 8005040:	e00c      	b.n	800505c <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8005042:	687b      	ldr	r3, [r7, #4]
 8005044:	681a      	ldr	r2, [r3, #0]
 8005046:	683b      	ldr	r3, [r7, #0]
 8005048:	681b      	ldr	r3, [r3, #0]
 800504a:	4619      	mov	r1, r3
 800504c:	4610      	mov	r0, r2
 800504e:	f000 fad2 	bl	80055f6 <_ZL18TIM_ITRx_SetConfigP11TIM_TypeDefm>
      break;
 8005052:	e003      	b.n	800505c <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8005054:	2301      	movs	r3, #1
 8005056:	73fb      	strb	r3, [r7, #15]
      break;
 8005058:	e000      	b.n	800505c <HAL_TIM_ConfigClockSource+0x174>
      break;
 800505a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800505c:	687b      	ldr	r3, [r7, #4]
 800505e:	2201      	movs	r2, #1
 8005060:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8005064:	687b      	ldr	r3, [r7, #4]
 8005066:	2200      	movs	r2, #0
 8005068:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800506c:	7bfb      	ldrb	r3, [r7, #15]
}
 800506e:	4618      	mov	r0, r3
 8005070:	3710      	adds	r7, #16
 8005072:	46bd      	mov	sp, r7
 8005074:	bd80      	pop	{r7, pc}
	...

08005078 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8005078:	b480      	push	{r7}
 800507a:	b085      	sub	sp, #20
 800507c:	af00      	add	r7, sp, #0
 800507e:	6078      	str	r0, [r7, #4]
 8005080:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005082:	687b      	ldr	r3, [r7, #4]
 8005084:	681b      	ldr	r3, [r3, #0]
 8005086:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005088:	687b      	ldr	r3, [r7, #4]
 800508a:	4a48      	ldr	r2, [pc, #288]	@ (80051ac <TIM_Base_SetConfig+0x134>)
 800508c:	4293      	cmp	r3, r2
 800508e:	d013      	beq.n	80050b8 <TIM_Base_SetConfig+0x40>
 8005090:	687b      	ldr	r3, [r7, #4]
 8005092:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005096:	d00f      	beq.n	80050b8 <TIM_Base_SetConfig+0x40>
 8005098:	687b      	ldr	r3, [r7, #4]
 800509a:	4a45      	ldr	r2, [pc, #276]	@ (80051b0 <TIM_Base_SetConfig+0x138>)
 800509c:	4293      	cmp	r3, r2
 800509e:	d00b      	beq.n	80050b8 <TIM_Base_SetConfig+0x40>
 80050a0:	687b      	ldr	r3, [r7, #4]
 80050a2:	4a44      	ldr	r2, [pc, #272]	@ (80051b4 <TIM_Base_SetConfig+0x13c>)
 80050a4:	4293      	cmp	r3, r2
 80050a6:	d007      	beq.n	80050b8 <TIM_Base_SetConfig+0x40>
 80050a8:	687b      	ldr	r3, [r7, #4]
 80050aa:	4a43      	ldr	r2, [pc, #268]	@ (80051b8 <TIM_Base_SetConfig+0x140>)
 80050ac:	4293      	cmp	r3, r2
 80050ae:	d003      	beq.n	80050b8 <TIM_Base_SetConfig+0x40>
 80050b0:	687b      	ldr	r3, [r7, #4]
 80050b2:	4a42      	ldr	r2, [pc, #264]	@ (80051bc <TIM_Base_SetConfig+0x144>)
 80050b4:	4293      	cmp	r3, r2
 80050b6:	d108      	bne.n	80050ca <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80050b8:	68fb      	ldr	r3, [r7, #12]
 80050ba:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80050be:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80050c0:	683b      	ldr	r3, [r7, #0]
 80050c2:	685b      	ldr	r3, [r3, #4]
 80050c4:	68fa      	ldr	r2, [r7, #12]
 80050c6:	4313      	orrs	r3, r2
 80050c8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80050ca:	687b      	ldr	r3, [r7, #4]
 80050cc:	4a37      	ldr	r2, [pc, #220]	@ (80051ac <TIM_Base_SetConfig+0x134>)
 80050ce:	4293      	cmp	r3, r2
 80050d0:	d02b      	beq.n	800512a <TIM_Base_SetConfig+0xb2>
 80050d2:	687b      	ldr	r3, [r7, #4]
 80050d4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80050d8:	d027      	beq.n	800512a <TIM_Base_SetConfig+0xb2>
 80050da:	687b      	ldr	r3, [r7, #4]
 80050dc:	4a34      	ldr	r2, [pc, #208]	@ (80051b0 <TIM_Base_SetConfig+0x138>)
 80050de:	4293      	cmp	r3, r2
 80050e0:	d023      	beq.n	800512a <TIM_Base_SetConfig+0xb2>
 80050e2:	687b      	ldr	r3, [r7, #4]
 80050e4:	4a33      	ldr	r2, [pc, #204]	@ (80051b4 <TIM_Base_SetConfig+0x13c>)
 80050e6:	4293      	cmp	r3, r2
 80050e8:	d01f      	beq.n	800512a <TIM_Base_SetConfig+0xb2>
 80050ea:	687b      	ldr	r3, [r7, #4]
 80050ec:	4a32      	ldr	r2, [pc, #200]	@ (80051b8 <TIM_Base_SetConfig+0x140>)
 80050ee:	4293      	cmp	r3, r2
 80050f0:	d01b      	beq.n	800512a <TIM_Base_SetConfig+0xb2>
 80050f2:	687b      	ldr	r3, [r7, #4]
 80050f4:	4a31      	ldr	r2, [pc, #196]	@ (80051bc <TIM_Base_SetConfig+0x144>)
 80050f6:	4293      	cmp	r3, r2
 80050f8:	d017      	beq.n	800512a <TIM_Base_SetConfig+0xb2>
 80050fa:	687b      	ldr	r3, [r7, #4]
 80050fc:	4a30      	ldr	r2, [pc, #192]	@ (80051c0 <TIM_Base_SetConfig+0x148>)
 80050fe:	4293      	cmp	r3, r2
 8005100:	d013      	beq.n	800512a <TIM_Base_SetConfig+0xb2>
 8005102:	687b      	ldr	r3, [r7, #4]
 8005104:	4a2f      	ldr	r2, [pc, #188]	@ (80051c4 <TIM_Base_SetConfig+0x14c>)
 8005106:	4293      	cmp	r3, r2
 8005108:	d00f      	beq.n	800512a <TIM_Base_SetConfig+0xb2>
 800510a:	687b      	ldr	r3, [r7, #4]
 800510c:	4a2e      	ldr	r2, [pc, #184]	@ (80051c8 <TIM_Base_SetConfig+0x150>)
 800510e:	4293      	cmp	r3, r2
 8005110:	d00b      	beq.n	800512a <TIM_Base_SetConfig+0xb2>
 8005112:	687b      	ldr	r3, [r7, #4]
 8005114:	4a2d      	ldr	r2, [pc, #180]	@ (80051cc <TIM_Base_SetConfig+0x154>)
 8005116:	4293      	cmp	r3, r2
 8005118:	d007      	beq.n	800512a <TIM_Base_SetConfig+0xb2>
 800511a:	687b      	ldr	r3, [r7, #4]
 800511c:	4a2c      	ldr	r2, [pc, #176]	@ (80051d0 <TIM_Base_SetConfig+0x158>)
 800511e:	4293      	cmp	r3, r2
 8005120:	d003      	beq.n	800512a <TIM_Base_SetConfig+0xb2>
 8005122:	687b      	ldr	r3, [r7, #4]
 8005124:	4a2b      	ldr	r2, [pc, #172]	@ (80051d4 <TIM_Base_SetConfig+0x15c>)
 8005126:	4293      	cmp	r3, r2
 8005128:	d108      	bne.n	800513c <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800512a:	68fb      	ldr	r3, [r7, #12]
 800512c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005130:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005132:	683b      	ldr	r3, [r7, #0]
 8005134:	68db      	ldr	r3, [r3, #12]
 8005136:	68fa      	ldr	r2, [r7, #12]
 8005138:	4313      	orrs	r3, r2
 800513a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800513c:	68fb      	ldr	r3, [r7, #12]
 800513e:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8005142:	683b      	ldr	r3, [r7, #0]
 8005144:	695b      	ldr	r3, [r3, #20]
 8005146:	4313      	orrs	r3, r2
 8005148:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800514a:	687b      	ldr	r3, [r7, #4]
 800514c:	68fa      	ldr	r2, [r7, #12]
 800514e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005150:	683b      	ldr	r3, [r7, #0]
 8005152:	689a      	ldr	r2, [r3, #8]
 8005154:	687b      	ldr	r3, [r7, #4]
 8005156:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005158:	683b      	ldr	r3, [r7, #0]
 800515a:	681a      	ldr	r2, [r3, #0]
 800515c:	687b      	ldr	r3, [r7, #4]
 800515e:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005160:	687b      	ldr	r3, [r7, #4]
 8005162:	4a12      	ldr	r2, [pc, #72]	@ (80051ac <TIM_Base_SetConfig+0x134>)
 8005164:	4293      	cmp	r3, r2
 8005166:	d003      	beq.n	8005170 <TIM_Base_SetConfig+0xf8>
 8005168:	687b      	ldr	r3, [r7, #4]
 800516a:	4a14      	ldr	r2, [pc, #80]	@ (80051bc <TIM_Base_SetConfig+0x144>)
 800516c:	4293      	cmp	r3, r2
 800516e:	d103      	bne.n	8005178 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005170:	683b      	ldr	r3, [r7, #0]
 8005172:	691a      	ldr	r2, [r3, #16]
 8005174:	687b      	ldr	r3, [r7, #4]
 8005176:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005178:	687b      	ldr	r3, [r7, #4]
 800517a:	2201      	movs	r2, #1
 800517c:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800517e:	687b      	ldr	r3, [r7, #4]
 8005180:	691b      	ldr	r3, [r3, #16]
 8005182:	f003 0301 	and.w	r3, r3, #1
 8005186:	2b01      	cmp	r3, #1
 8005188:	bf0c      	ite	eq
 800518a:	2301      	moveq	r3, #1
 800518c:	2300      	movne	r3, #0
 800518e:	b2db      	uxtb	r3, r3
 8005190:	2b00      	cmp	r3, #0
 8005192:	d005      	beq.n	80051a0 <TIM_Base_SetConfig+0x128>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8005194:	687b      	ldr	r3, [r7, #4]
 8005196:	691b      	ldr	r3, [r3, #16]
 8005198:	f023 0201 	bic.w	r2, r3, #1
 800519c:	687b      	ldr	r3, [r7, #4]
 800519e:	611a      	str	r2, [r3, #16]
  }
}
 80051a0:	bf00      	nop
 80051a2:	3714      	adds	r7, #20
 80051a4:	46bd      	mov	sp, r7
 80051a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051aa:	4770      	bx	lr
 80051ac:	40010000 	.word	0x40010000
 80051b0:	40000400 	.word	0x40000400
 80051b4:	40000800 	.word	0x40000800
 80051b8:	40000c00 	.word	0x40000c00
 80051bc:	40010400 	.word	0x40010400
 80051c0:	40014000 	.word	0x40014000
 80051c4:	40014400 	.word	0x40014400
 80051c8:	40014800 	.word	0x40014800
 80051cc:	40001800 	.word	0x40001800
 80051d0:	40001c00 	.word	0x40001c00
 80051d4:	40002000 	.word	0x40002000

080051d8 <_ZL17TIM_OC1_SetConfigP11TIM_TypeDefPK18TIM_OC_InitTypeDef>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80051d8:	b480      	push	{r7}
 80051da:	b087      	sub	sp, #28
 80051dc:	af00      	add	r7, sp, #0
 80051de:	6078      	str	r0, [r7, #4]
 80051e0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80051e2:	687b      	ldr	r3, [r7, #4]
 80051e4:	6a1b      	ldr	r3, [r3, #32]
 80051e6:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80051e8:	687b      	ldr	r3, [r7, #4]
 80051ea:	6a1b      	ldr	r3, [r3, #32]
 80051ec:	f023 0201 	bic.w	r2, r3, #1
 80051f0:	687b      	ldr	r3, [r7, #4]
 80051f2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80051f4:	687b      	ldr	r3, [r7, #4]
 80051f6:	685b      	ldr	r3, [r3, #4]
 80051f8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80051fa:	687b      	ldr	r3, [r7, #4]
 80051fc:	699b      	ldr	r3, [r3, #24]
 80051fe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8005200:	68fb      	ldr	r3, [r7, #12]
 8005202:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005206:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8005208:	68fb      	ldr	r3, [r7, #12]
 800520a:	f023 0303 	bic.w	r3, r3, #3
 800520e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005210:	683b      	ldr	r3, [r7, #0]
 8005212:	681b      	ldr	r3, [r3, #0]
 8005214:	68fa      	ldr	r2, [r7, #12]
 8005216:	4313      	orrs	r3, r2
 8005218:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800521a:	697b      	ldr	r3, [r7, #20]
 800521c:	f023 0302 	bic.w	r3, r3, #2
 8005220:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8005222:	683b      	ldr	r3, [r7, #0]
 8005224:	689b      	ldr	r3, [r3, #8]
 8005226:	697a      	ldr	r2, [r7, #20]
 8005228:	4313      	orrs	r3, r2
 800522a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800522c:	687b      	ldr	r3, [r7, #4]
 800522e:	4a20      	ldr	r2, [pc, #128]	@ (80052b0 <_ZL17TIM_OC1_SetConfigP11TIM_TypeDefPK18TIM_OC_InitTypeDef+0xd8>)
 8005230:	4293      	cmp	r3, r2
 8005232:	d003      	beq.n	800523c <_ZL17TIM_OC1_SetConfigP11TIM_TypeDefPK18TIM_OC_InitTypeDef+0x64>
 8005234:	687b      	ldr	r3, [r7, #4]
 8005236:	4a1f      	ldr	r2, [pc, #124]	@ (80052b4 <_ZL17TIM_OC1_SetConfigP11TIM_TypeDefPK18TIM_OC_InitTypeDef+0xdc>)
 8005238:	4293      	cmp	r3, r2
 800523a:	d10c      	bne.n	8005256 <_ZL17TIM_OC1_SetConfigP11TIM_TypeDefPK18TIM_OC_InitTypeDef+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800523c:	697b      	ldr	r3, [r7, #20]
 800523e:	f023 0308 	bic.w	r3, r3, #8
 8005242:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8005244:	683b      	ldr	r3, [r7, #0]
 8005246:	68db      	ldr	r3, [r3, #12]
 8005248:	697a      	ldr	r2, [r7, #20]
 800524a:	4313      	orrs	r3, r2
 800524c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800524e:	697b      	ldr	r3, [r7, #20]
 8005250:	f023 0304 	bic.w	r3, r3, #4
 8005254:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005256:	687b      	ldr	r3, [r7, #4]
 8005258:	4a15      	ldr	r2, [pc, #84]	@ (80052b0 <_ZL17TIM_OC1_SetConfigP11TIM_TypeDefPK18TIM_OC_InitTypeDef+0xd8>)
 800525a:	4293      	cmp	r3, r2
 800525c:	d003      	beq.n	8005266 <_ZL17TIM_OC1_SetConfigP11TIM_TypeDefPK18TIM_OC_InitTypeDef+0x8e>
 800525e:	687b      	ldr	r3, [r7, #4]
 8005260:	4a14      	ldr	r2, [pc, #80]	@ (80052b4 <_ZL17TIM_OC1_SetConfigP11TIM_TypeDefPK18TIM_OC_InitTypeDef+0xdc>)
 8005262:	4293      	cmp	r3, r2
 8005264:	d111      	bne.n	800528a <_ZL17TIM_OC1_SetConfigP11TIM_TypeDefPK18TIM_OC_InitTypeDef+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8005266:	693b      	ldr	r3, [r7, #16]
 8005268:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800526c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800526e:	693b      	ldr	r3, [r7, #16]
 8005270:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8005274:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8005276:	683b      	ldr	r3, [r7, #0]
 8005278:	695b      	ldr	r3, [r3, #20]
 800527a:	693a      	ldr	r2, [r7, #16]
 800527c:	4313      	orrs	r3, r2
 800527e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8005280:	683b      	ldr	r3, [r7, #0]
 8005282:	699b      	ldr	r3, [r3, #24]
 8005284:	693a      	ldr	r2, [r7, #16]
 8005286:	4313      	orrs	r3, r2
 8005288:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800528a:	687b      	ldr	r3, [r7, #4]
 800528c:	693a      	ldr	r2, [r7, #16]
 800528e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005290:	687b      	ldr	r3, [r7, #4]
 8005292:	68fa      	ldr	r2, [r7, #12]
 8005294:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8005296:	683b      	ldr	r3, [r7, #0]
 8005298:	685a      	ldr	r2, [r3, #4]
 800529a:	687b      	ldr	r3, [r7, #4]
 800529c:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800529e:	687b      	ldr	r3, [r7, #4]
 80052a0:	697a      	ldr	r2, [r7, #20]
 80052a2:	621a      	str	r2, [r3, #32]
}
 80052a4:	bf00      	nop
 80052a6:	371c      	adds	r7, #28
 80052a8:	46bd      	mov	sp, r7
 80052aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052ae:	4770      	bx	lr
 80052b0:	40010000 	.word	0x40010000
 80052b4:	40010400 	.word	0x40010400

080052b8 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80052b8:	b480      	push	{r7}
 80052ba:	b087      	sub	sp, #28
 80052bc:	af00      	add	r7, sp, #0
 80052be:	6078      	str	r0, [r7, #4]
 80052c0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80052c2:	687b      	ldr	r3, [r7, #4]
 80052c4:	6a1b      	ldr	r3, [r3, #32]
 80052c6:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80052c8:	687b      	ldr	r3, [r7, #4]
 80052ca:	6a1b      	ldr	r3, [r3, #32]
 80052cc:	f023 0210 	bic.w	r2, r3, #16
 80052d0:	687b      	ldr	r3, [r7, #4]
 80052d2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80052d4:	687b      	ldr	r3, [r7, #4]
 80052d6:	685b      	ldr	r3, [r3, #4]
 80052d8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80052da:	687b      	ldr	r3, [r7, #4]
 80052dc:	699b      	ldr	r3, [r3, #24]
 80052de:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80052e0:	68fb      	ldr	r3, [r7, #12]
 80052e2:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80052e6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80052e8:	68fb      	ldr	r3, [r7, #12]
 80052ea:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80052ee:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80052f0:	683b      	ldr	r3, [r7, #0]
 80052f2:	681b      	ldr	r3, [r3, #0]
 80052f4:	021b      	lsls	r3, r3, #8
 80052f6:	68fa      	ldr	r2, [r7, #12]
 80052f8:	4313      	orrs	r3, r2
 80052fa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80052fc:	697b      	ldr	r3, [r7, #20]
 80052fe:	f023 0320 	bic.w	r3, r3, #32
 8005302:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8005304:	683b      	ldr	r3, [r7, #0]
 8005306:	689b      	ldr	r3, [r3, #8]
 8005308:	011b      	lsls	r3, r3, #4
 800530a:	697a      	ldr	r2, [r7, #20]
 800530c:	4313      	orrs	r3, r2
 800530e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8005310:	687b      	ldr	r3, [r7, #4]
 8005312:	4a22      	ldr	r2, [pc, #136]	@ (800539c <TIM_OC2_SetConfig+0xe4>)
 8005314:	4293      	cmp	r3, r2
 8005316:	d003      	beq.n	8005320 <TIM_OC2_SetConfig+0x68>
 8005318:	687b      	ldr	r3, [r7, #4]
 800531a:	4a21      	ldr	r2, [pc, #132]	@ (80053a0 <TIM_OC2_SetConfig+0xe8>)
 800531c:	4293      	cmp	r3, r2
 800531e:	d10d      	bne.n	800533c <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8005320:	697b      	ldr	r3, [r7, #20]
 8005322:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8005326:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8005328:	683b      	ldr	r3, [r7, #0]
 800532a:	68db      	ldr	r3, [r3, #12]
 800532c:	011b      	lsls	r3, r3, #4
 800532e:	697a      	ldr	r2, [r7, #20]
 8005330:	4313      	orrs	r3, r2
 8005332:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8005334:	697b      	ldr	r3, [r7, #20]
 8005336:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800533a:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800533c:	687b      	ldr	r3, [r7, #4]
 800533e:	4a17      	ldr	r2, [pc, #92]	@ (800539c <TIM_OC2_SetConfig+0xe4>)
 8005340:	4293      	cmp	r3, r2
 8005342:	d003      	beq.n	800534c <TIM_OC2_SetConfig+0x94>
 8005344:	687b      	ldr	r3, [r7, #4]
 8005346:	4a16      	ldr	r2, [pc, #88]	@ (80053a0 <TIM_OC2_SetConfig+0xe8>)
 8005348:	4293      	cmp	r3, r2
 800534a:	d113      	bne.n	8005374 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800534c:	693b      	ldr	r3, [r7, #16]
 800534e:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8005352:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8005354:	693b      	ldr	r3, [r7, #16]
 8005356:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800535a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800535c:	683b      	ldr	r3, [r7, #0]
 800535e:	695b      	ldr	r3, [r3, #20]
 8005360:	009b      	lsls	r3, r3, #2
 8005362:	693a      	ldr	r2, [r7, #16]
 8005364:	4313      	orrs	r3, r2
 8005366:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8005368:	683b      	ldr	r3, [r7, #0]
 800536a:	699b      	ldr	r3, [r3, #24]
 800536c:	009b      	lsls	r3, r3, #2
 800536e:	693a      	ldr	r2, [r7, #16]
 8005370:	4313      	orrs	r3, r2
 8005372:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005374:	687b      	ldr	r3, [r7, #4]
 8005376:	693a      	ldr	r2, [r7, #16]
 8005378:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800537a:	687b      	ldr	r3, [r7, #4]
 800537c:	68fa      	ldr	r2, [r7, #12]
 800537e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8005380:	683b      	ldr	r3, [r7, #0]
 8005382:	685a      	ldr	r2, [r3, #4]
 8005384:	687b      	ldr	r3, [r7, #4]
 8005386:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005388:	687b      	ldr	r3, [r7, #4]
 800538a:	697a      	ldr	r2, [r7, #20]
 800538c:	621a      	str	r2, [r3, #32]
}
 800538e:	bf00      	nop
 8005390:	371c      	adds	r7, #28
 8005392:	46bd      	mov	sp, r7
 8005394:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005398:	4770      	bx	lr
 800539a:	bf00      	nop
 800539c:	40010000 	.word	0x40010000
 80053a0:	40010400 	.word	0x40010400

080053a4 <_ZL17TIM_OC3_SetConfigP11TIM_TypeDefPK18TIM_OC_InitTypeDef>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80053a4:	b480      	push	{r7}
 80053a6:	b087      	sub	sp, #28
 80053a8:	af00      	add	r7, sp, #0
 80053aa:	6078      	str	r0, [r7, #4]
 80053ac:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80053ae:	687b      	ldr	r3, [r7, #4]
 80053b0:	6a1b      	ldr	r3, [r3, #32]
 80053b2:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80053b4:	687b      	ldr	r3, [r7, #4]
 80053b6:	6a1b      	ldr	r3, [r3, #32]
 80053b8:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80053bc:	687b      	ldr	r3, [r7, #4]
 80053be:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80053c0:	687b      	ldr	r3, [r7, #4]
 80053c2:	685b      	ldr	r3, [r3, #4]
 80053c4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80053c6:	687b      	ldr	r3, [r7, #4]
 80053c8:	69db      	ldr	r3, [r3, #28]
 80053ca:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80053cc:	68fb      	ldr	r3, [r7, #12]
 80053ce:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80053d2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80053d4:	68fb      	ldr	r3, [r7, #12]
 80053d6:	f023 0303 	bic.w	r3, r3, #3
 80053da:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80053dc:	683b      	ldr	r3, [r7, #0]
 80053de:	681b      	ldr	r3, [r3, #0]
 80053e0:	68fa      	ldr	r2, [r7, #12]
 80053e2:	4313      	orrs	r3, r2
 80053e4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80053e6:	697b      	ldr	r3, [r7, #20]
 80053e8:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 80053ec:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80053ee:	683b      	ldr	r3, [r7, #0]
 80053f0:	689b      	ldr	r3, [r3, #8]
 80053f2:	021b      	lsls	r3, r3, #8
 80053f4:	697a      	ldr	r2, [r7, #20]
 80053f6:	4313      	orrs	r3, r2
 80053f8:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80053fa:	687b      	ldr	r3, [r7, #4]
 80053fc:	4a21      	ldr	r2, [pc, #132]	@ (8005484 <_ZL17TIM_OC3_SetConfigP11TIM_TypeDefPK18TIM_OC_InitTypeDef+0xe0>)
 80053fe:	4293      	cmp	r3, r2
 8005400:	d003      	beq.n	800540a <_ZL17TIM_OC3_SetConfigP11TIM_TypeDefPK18TIM_OC_InitTypeDef+0x66>
 8005402:	687b      	ldr	r3, [r7, #4]
 8005404:	4a20      	ldr	r2, [pc, #128]	@ (8005488 <_ZL17TIM_OC3_SetConfigP11TIM_TypeDefPK18TIM_OC_InitTypeDef+0xe4>)
 8005406:	4293      	cmp	r3, r2
 8005408:	d10d      	bne.n	8005426 <_ZL17TIM_OC3_SetConfigP11TIM_TypeDefPK18TIM_OC_InitTypeDef+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800540a:	697b      	ldr	r3, [r7, #20]
 800540c:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8005410:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8005412:	683b      	ldr	r3, [r7, #0]
 8005414:	68db      	ldr	r3, [r3, #12]
 8005416:	021b      	lsls	r3, r3, #8
 8005418:	697a      	ldr	r2, [r7, #20]
 800541a:	4313      	orrs	r3, r2
 800541c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800541e:	697b      	ldr	r3, [r7, #20]
 8005420:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8005424:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005426:	687b      	ldr	r3, [r7, #4]
 8005428:	4a16      	ldr	r2, [pc, #88]	@ (8005484 <_ZL17TIM_OC3_SetConfigP11TIM_TypeDefPK18TIM_OC_InitTypeDef+0xe0>)
 800542a:	4293      	cmp	r3, r2
 800542c:	d003      	beq.n	8005436 <_ZL17TIM_OC3_SetConfigP11TIM_TypeDefPK18TIM_OC_InitTypeDef+0x92>
 800542e:	687b      	ldr	r3, [r7, #4]
 8005430:	4a15      	ldr	r2, [pc, #84]	@ (8005488 <_ZL17TIM_OC3_SetConfigP11TIM_TypeDefPK18TIM_OC_InitTypeDef+0xe4>)
 8005432:	4293      	cmp	r3, r2
 8005434:	d113      	bne.n	800545e <_ZL17TIM_OC3_SetConfigP11TIM_TypeDefPK18TIM_OC_InitTypeDef+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8005436:	693b      	ldr	r3, [r7, #16]
 8005438:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800543c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800543e:	693b      	ldr	r3, [r7, #16]
 8005440:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8005444:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8005446:	683b      	ldr	r3, [r7, #0]
 8005448:	695b      	ldr	r3, [r3, #20]
 800544a:	011b      	lsls	r3, r3, #4
 800544c:	693a      	ldr	r2, [r7, #16]
 800544e:	4313      	orrs	r3, r2
 8005450:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8005452:	683b      	ldr	r3, [r7, #0]
 8005454:	699b      	ldr	r3, [r3, #24]
 8005456:	011b      	lsls	r3, r3, #4
 8005458:	693a      	ldr	r2, [r7, #16]
 800545a:	4313      	orrs	r3, r2
 800545c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800545e:	687b      	ldr	r3, [r7, #4]
 8005460:	693a      	ldr	r2, [r7, #16]
 8005462:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005464:	687b      	ldr	r3, [r7, #4]
 8005466:	68fa      	ldr	r2, [r7, #12]
 8005468:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800546a:	683b      	ldr	r3, [r7, #0]
 800546c:	685a      	ldr	r2, [r3, #4]
 800546e:	687b      	ldr	r3, [r7, #4]
 8005470:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005472:	687b      	ldr	r3, [r7, #4]
 8005474:	697a      	ldr	r2, [r7, #20]
 8005476:	621a      	str	r2, [r3, #32]
}
 8005478:	bf00      	nop
 800547a:	371c      	adds	r7, #28
 800547c:	46bd      	mov	sp, r7
 800547e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005482:	4770      	bx	lr
 8005484:	40010000 	.word	0x40010000
 8005488:	40010400 	.word	0x40010400

0800548c <_ZL17TIM_OC4_SetConfigP11TIM_TypeDefPK18TIM_OC_InitTypeDef>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800548c:	b480      	push	{r7}
 800548e:	b087      	sub	sp, #28
 8005490:	af00      	add	r7, sp, #0
 8005492:	6078      	str	r0, [r7, #4]
 8005494:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005496:	687b      	ldr	r3, [r7, #4]
 8005498:	6a1b      	ldr	r3, [r3, #32]
 800549a:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800549c:	687b      	ldr	r3, [r7, #4]
 800549e:	6a1b      	ldr	r3, [r3, #32]
 80054a0:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 80054a4:	687b      	ldr	r3, [r7, #4]
 80054a6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80054a8:	687b      	ldr	r3, [r7, #4]
 80054aa:	685b      	ldr	r3, [r3, #4]
 80054ac:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80054ae:	687b      	ldr	r3, [r7, #4]
 80054b0:	69db      	ldr	r3, [r3, #28]
 80054b2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80054b4:	68fb      	ldr	r3, [r7, #12]
 80054b6:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80054ba:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80054bc:	68fb      	ldr	r3, [r7, #12]
 80054be:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80054c2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80054c4:	683b      	ldr	r3, [r7, #0]
 80054c6:	681b      	ldr	r3, [r3, #0]
 80054c8:	021b      	lsls	r3, r3, #8
 80054ca:	68fa      	ldr	r2, [r7, #12]
 80054cc:	4313      	orrs	r3, r2
 80054ce:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80054d0:	693b      	ldr	r3, [r7, #16]
 80054d2:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 80054d6:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80054d8:	683b      	ldr	r3, [r7, #0]
 80054da:	689b      	ldr	r3, [r3, #8]
 80054dc:	031b      	lsls	r3, r3, #12
 80054de:	693a      	ldr	r2, [r7, #16]
 80054e0:	4313      	orrs	r3, r2
 80054e2:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80054e4:	687b      	ldr	r3, [r7, #4]
 80054e6:	4a12      	ldr	r2, [pc, #72]	@ (8005530 <_ZL17TIM_OC4_SetConfigP11TIM_TypeDefPK18TIM_OC_InitTypeDef+0xa4>)
 80054e8:	4293      	cmp	r3, r2
 80054ea:	d003      	beq.n	80054f4 <_ZL17TIM_OC4_SetConfigP11TIM_TypeDefPK18TIM_OC_InitTypeDef+0x68>
 80054ec:	687b      	ldr	r3, [r7, #4]
 80054ee:	4a11      	ldr	r2, [pc, #68]	@ (8005534 <_ZL17TIM_OC4_SetConfigP11TIM_TypeDefPK18TIM_OC_InitTypeDef+0xa8>)
 80054f0:	4293      	cmp	r3, r2
 80054f2:	d109      	bne.n	8005508 <_ZL17TIM_OC4_SetConfigP11TIM_TypeDefPK18TIM_OC_InitTypeDef+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80054f4:	697b      	ldr	r3, [r7, #20]
 80054f6:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80054fa:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80054fc:	683b      	ldr	r3, [r7, #0]
 80054fe:	695b      	ldr	r3, [r3, #20]
 8005500:	019b      	lsls	r3, r3, #6
 8005502:	697a      	ldr	r2, [r7, #20]
 8005504:	4313      	orrs	r3, r2
 8005506:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005508:	687b      	ldr	r3, [r7, #4]
 800550a:	697a      	ldr	r2, [r7, #20]
 800550c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800550e:	687b      	ldr	r3, [r7, #4]
 8005510:	68fa      	ldr	r2, [r7, #12]
 8005512:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8005514:	683b      	ldr	r3, [r7, #0]
 8005516:	685a      	ldr	r2, [r3, #4]
 8005518:	687b      	ldr	r3, [r7, #4]
 800551a:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800551c:	687b      	ldr	r3, [r7, #4]
 800551e:	693a      	ldr	r2, [r7, #16]
 8005520:	621a      	str	r2, [r3, #32]
}
 8005522:	bf00      	nop
 8005524:	371c      	adds	r7, #28
 8005526:	46bd      	mov	sp, r7
 8005528:	f85d 7b04 	ldr.w	r7, [sp], #4
 800552c:	4770      	bx	lr
 800552e:	bf00      	nop
 8005530:	40010000 	.word	0x40010000
 8005534:	40010400 	.word	0x40010400

08005538 <_ZL24TIM_TI1_ConfigInputStageP11TIM_TypeDefmm>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005538:	b480      	push	{r7}
 800553a:	b087      	sub	sp, #28
 800553c:	af00      	add	r7, sp, #0
 800553e:	60f8      	str	r0, [r7, #12]
 8005540:	60b9      	str	r1, [r7, #8]
 8005542:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8005544:	68fb      	ldr	r3, [r7, #12]
 8005546:	6a1b      	ldr	r3, [r3, #32]
 8005548:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800554a:	68fb      	ldr	r3, [r7, #12]
 800554c:	6a1b      	ldr	r3, [r3, #32]
 800554e:	f023 0201 	bic.w	r2, r3, #1
 8005552:	68fb      	ldr	r3, [r7, #12]
 8005554:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005556:	68fb      	ldr	r3, [r7, #12]
 8005558:	699b      	ldr	r3, [r3, #24]
 800555a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800555c:	693b      	ldr	r3, [r7, #16]
 800555e:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8005562:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8005564:	687b      	ldr	r3, [r7, #4]
 8005566:	011b      	lsls	r3, r3, #4
 8005568:	693a      	ldr	r2, [r7, #16]
 800556a:	4313      	orrs	r3, r2
 800556c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800556e:	697b      	ldr	r3, [r7, #20]
 8005570:	f023 030a 	bic.w	r3, r3, #10
 8005574:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8005576:	697a      	ldr	r2, [r7, #20]
 8005578:	68bb      	ldr	r3, [r7, #8]
 800557a:	4313      	orrs	r3, r2
 800557c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800557e:	68fb      	ldr	r3, [r7, #12]
 8005580:	693a      	ldr	r2, [r7, #16]
 8005582:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005584:	68fb      	ldr	r3, [r7, #12]
 8005586:	697a      	ldr	r2, [r7, #20]
 8005588:	621a      	str	r2, [r3, #32]
}
 800558a:	bf00      	nop
 800558c:	371c      	adds	r7, #28
 800558e:	46bd      	mov	sp, r7
 8005590:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005594:	4770      	bx	lr

08005596 <_ZL24TIM_TI2_ConfigInputStageP11TIM_TypeDefmm>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005596:	b480      	push	{r7}
 8005598:	b087      	sub	sp, #28
 800559a:	af00      	add	r7, sp, #0
 800559c:	60f8      	str	r0, [r7, #12]
 800559e:	60b9      	str	r1, [r7, #8]
 80055a0:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 80055a2:	68fb      	ldr	r3, [r7, #12]
 80055a4:	6a1b      	ldr	r3, [r3, #32]
 80055a6:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80055a8:	68fb      	ldr	r3, [r7, #12]
 80055aa:	6a1b      	ldr	r3, [r3, #32]
 80055ac:	f023 0210 	bic.w	r2, r3, #16
 80055b0:	68fb      	ldr	r3, [r7, #12]
 80055b2:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80055b4:	68fb      	ldr	r3, [r7, #12]
 80055b6:	699b      	ldr	r3, [r3, #24]
 80055b8:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80055ba:	693b      	ldr	r3, [r7, #16]
 80055bc:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 80055c0:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80055c2:	687b      	ldr	r3, [r7, #4]
 80055c4:	031b      	lsls	r3, r3, #12
 80055c6:	693a      	ldr	r2, [r7, #16]
 80055c8:	4313      	orrs	r3, r2
 80055ca:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80055cc:	697b      	ldr	r3, [r7, #20]
 80055ce:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 80055d2:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 80055d4:	68bb      	ldr	r3, [r7, #8]
 80055d6:	011b      	lsls	r3, r3, #4
 80055d8:	697a      	ldr	r2, [r7, #20]
 80055da:	4313      	orrs	r3, r2
 80055dc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80055de:	68fb      	ldr	r3, [r7, #12]
 80055e0:	693a      	ldr	r2, [r7, #16]
 80055e2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80055e4:	68fb      	ldr	r3, [r7, #12]
 80055e6:	697a      	ldr	r2, [r7, #20]
 80055e8:	621a      	str	r2, [r3, #32]
}
 80055ea:	bf00      	nop
 80055ec:	371c      	adds	r7, #28
 80055ee:	46bd      	mov	sp, r7
 80055f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055f4:	4770      	bx	lr

080055f6 <_ZL18TIM_ITRx_SetConfigP11TIM_TypeDefm>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80055f6:	b480      	push	{r7}
 80055f8:	b085      	sub	sp, #20
 80055fa:	af00      	add	r7, sp, #0
 80055fc:	6078      	str	r0, [r7, #4]
 80055fe:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8005600:	687b      	ldr	r3, [r7, #4]
 8005602:	689b      	ldr	r3, [r3, #8]
 8005604:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8005606:	68fb      	ldr	r3, [r7, #12]
 8005608:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800560c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800560e:	683a      	ldr	r2, [r7, #0]
 8005610:	68fb      	ldr	r3, [r7, #12]
 8005612:	4313      	orrs	r3, r2
 8005614:	f043 0307 	orr.w	r3, r3, #7
 8005618:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800561a:	687b      	ldr	r3, [r7, #4]
 800561c:	68fa      	ldr	r2, [r7, #12]
 800561e:	609a      	str	r2, [r3, #8]
}
 8005620:	bf00      	nop
 8005622:	3714      	adds	r7, #20
 8005624:	46bd      	mov	sp, r7
 8005626:	f85d 7b04 	ldr.w	r7, [sp], #4
 800562a:	4770      	bx	lr

0800562c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800562c:	b480      	push	{r7}
 800562e:	b087      	sub	sp, #28
 8005630:	af00      	add	r7, sp, #0
 8005632:	60f8      	str	r0, [r7, #12]
 8005634:	60b9      	str	r1, [r7, #8]
 8005636:	607a      	str	r2, [r7, #4]
 8005638:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800563a:	68fb      	ldr	r3, [r7, #12]
 800563c:	689b      	ldr	r3, [r3, #8]
 800563e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005640:	697b      	ldr	r3, [r7, #20]
 8005642:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8005646:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8005648:	683b      	ldr	r3, [r7, #0]
 800564a:	021a      	lsls	r2, r3, #8
 800564c:	687b      	ldr	r3, [r7, #4]
 800564e:	431a      	orrs	r2, r3
 8005650:	68bb      	ldr	r3, [r7, #8]
 8005652:	4313      	orrs	r3, r2
 8005654:	697a      	ldr	r2, [r7, #20]
 8005656:	4313      	orrs	r3, r2
 8005658:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800565a:	68fb      	ldr	r3, [r7, #12]
 800565c:	697a      	ldr	r2, [r7, #20]
 800565e:	609a      	str	r2, [r3, #8]
}
 8005660:	bf00      	nop
 8005662:	371c      	adds	r7, #28
 8005664:	46bd      	mov	sp, r7
 8005666:	f85d 7b04 	ldr.w	r7, [sp], #4
 800566a:	4770      	bx	lr

0800566c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800566c:	b480      	push	{r7}
 800566e:	b087      	sub	sp, #28
 8005670:	af00      	add	r7, sp, #0
 8005672:	60f8      	str	r0, [r7, #12]
 8005674:	60b9      	str	r1, [r7, #8]
 8005676:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8005678:	68bb      	ldr	r3, [r7, #8]
 800567a:	f003 031f 	and.w	r3, r3, #31
 800567e:	2201      	movs	r2, #1
 8005680:	fa02 f303 	lsl.w	r3, r2, r3
 8005684:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8005686:	68fb      	ldr	r3, [r7, #12]
 8005688:	6a1a      	ldr	r2, [r3, #32]
 800568a:	697b      	ldr	r3, [r7, #20]
 800568c:	43db      	mvns	r3, r3
 800568e:	401a      	ands	r2, r3
 8005690:	68fb      	ldr	r3, [r7, #12]
 8005692:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8005694:	68fb      	ldr	r3, [r7, #12]
 8005696:	6a1a      	ldr	r2, [r3, #32]
 8005698:	68bb      	ldr	r3, [r7, #8]
 800569a:	f003 031f 	and.w	r3, r3, #31
 800569e:	6879      	ldr	r1, [r7, #4]
 80056a0:	fa01 f303 	lsl.w	r3, r1, r3
 80056a4:	431a      	orrs	r2, r3
 80056a6:	68fb      	ldr	r3, [r7, #12]
 80056a8:	621a      	str	r2, [r3, #32]
}
 80056aa:	bf00      	nop
 80056ac:	371c      	adds	r7, #28
 80056ae:	46bd      	mov	sp, r7
 80056b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056b4:	4770      	bx	lr
	...

080056b8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80056b8:	b480      	push	{r7}
 80056ba:	b085      	sub	sp, #20
 80056bc:	af00      	add	r7, sp, #0
 80056be:	6078      	str	r0, [r7, #4]
 80056c0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80056c2:	687b      	ldr	r3, [r7, #4]
 80056c4:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80056c8:	2b01      	cmp	r3, #1
 80056ca:	d101      	bne.n	80056d0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80056cc:	2302      	movs	r3, #2
 80056ce:	e05a      	b.n	8005786 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 80056d0:	687b      	ldr	r3, [r7, #4]
 80056d2:	2201      	movs	r2, #1
 80056d4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80056d8:	687b      	ldr	r3, [r7, #4]
 80056da:	2202      	movs	r2, #2
 80056dc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80056e0:	687b      	ldr	r3, [r7, #4]
 80056e2:	681b      	ldr	r3, [r3, #0]
 80056e4:	685b      	ldr	r3, [r3, #4]
 80056e6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80056e8:	687b      	ldr	r3, [r7, #4]
 80056ea:	681b      	ldr	r3, [r3, #0]
 80056ec:	689b      	ldr	r3, [r3, #8]
 80056ee:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80056f0:	68fb      	ldr	r3, [r7, #12]
 80056f2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80056f6:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80056f8:	683b      	ldr	r3, [r7, #0]
 80056fa:	681b      	ldr	r3, [r3, #0]
 80056fc:	68fa      	ldr	r2, [r7, #12]
 80056fe:	4313      	orrs	r3, r2
 8005700:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005702:	687b      	ldr	r3, [r7, #4]
 8005704:	681b      	ldr	r3, [r3, #0]
 8005706:	68fa      	ldr	r2, [r7, #12]
 8005708:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800570a:	687b      	ldr	r3, [r7, #4]
 800570c:	681b      	ldr	r3, [r3, #0]
 800570e:	4a21      	ldr	r2, [pc, #132]	@ (8005794 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8005710:	4293      	cmp	r3, r2
 8005712:	d022      	beq.n	800575a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005714:	687b      	ldr	r3, [r7, #4]
 8005716:	681b      	ldr	r3, [r3, #0]
 8005718:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800571c:	d01d      	beq.n	800575a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800571e:	687b      	ldr	r3, [r7, #4]
 8005720:	681b      	ldr	r3, [r3, #0]
 8005722:	4a1d      	ldr	r2, [pc, #116]	@ (8005798 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8005724:	4293      	cmp	r3, r2
 8005726:	d018      	beq.n	800575a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005728:	687b      	ldr	r3, [r7, #4]
 800572a:	681b      	ldr	r3, [r3, #0]
 800572c:	4a1b      	ldr	r2, [pc, #108]	@ (800579c <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 800572e:	4293      	cmp	r3, r2
 8005730:	d013      	beq.n	800575a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005732:	687b      	ldr	r3, [r7, #4]
 8005734:	681b      	ldr	r3, [r3, #0]
 8005736:	4a1a      	ldr	r2, [pc, #104]	@ (80057a0 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8005738:	4293      	cmp	r3, r2
 800573a:	d00e      	beq.n	800575a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800573c:	687b      	ldr	r3, [r7, #4]
 800573e:	681b      	ldr	r3, [r3, #0]
 8005740:	4a18      	ldr	r2, [pc, #96]	@ (80057a4 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8005742:	4293      	cmp	r3, r2
 8005744:	d009      	beq.n	800575a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005746:	687b      	ldr	r3, [r7, #4]
 8005748:	681b      	ldr	r3, [r3, #0]
 800574a:	4a17      	ldr	r2, [pc, #92]	@ (80057a8 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 800574c:	4293      	cmp	r3, r2
 800574e:	d004      	beq.n	800575a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005750:	687b      	ldr	r3, [r7, #4]
 8005752:	681b      	ldr	r3, [r3, #0]
 8005754:	4a15      	ldr	r2, [pc, #84]	@ (80057ac <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8005756:	4293      	cmp	r3, r2
 8005758:	d10c      	bne.n	8005774 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800575a:	68bb      	ldr	r3, [r7, #8]
 800575c:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8005760:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005762:	683b      	ldr	r3, [r7, #0]
 8005764:	685b      	ldr	r3, [r3, #4]
 8005766:	68ba      	ldr	r2, [r7, #8]
 8005768:	4313      	orrs	r3, r2
 800576a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800576c:	687b      	ldr	r3, [r7, #4]
 800576e:	681b      	ldr	r3, [r3, #0]
 8005770:	68ba      	ldr	r2, [r7, #8]
 8005772:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005774:	687b      	ldr	r3, [r7, #4]
 8005776:	2201      	movs	r2, #1
 8005778:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800577c:	687b      	ldr	r3, [r7, #4]
 800577e:	2200      	movs	r2, #0
 8005780:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8005784:	2300      	movs	r3, #0
}
 8005786:	4618      	mov	r0, r3
 8005788:	3714      	adds	r7, #20
 800578a:	46bd      	mov	sp, r7
 800578c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005790:	4770      	bx	lr
 8005792:	bf00      	nop
 8005794:	40010000 	.word	0x40010000
 8005798:	40000400 	.word	0x40000400
 800579c:	40000800 	.word	0x40000800
 80057a0:	40000c00 	.word	0x40000c00
 80057a4:	40010400 	.word	0x40010400
 80057a8:	40014000 	.word	0x40014000
 80057ac:	40001800 	.word	0x40001800

080057b0 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80057b0:	b580      	push	{r7, lr}
 80057b2:	b082      	sub	sp, #8
 80057b4:	af00      	add	r7, sp, #0
 80057b6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80057b8:	687b      	ldr	r3, [r7, #4]
 80057ba:	2b00      	cmp	r3, #0
 80057bc:	d101      	bne.n	80057c2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80057be:	2301      	movs	r3, #1
 80057c0:	e047      	b.n	8005852 <HAL_UART_Init+0xa2>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80057c2:	687b      	ldr	r3, [r7, #4]
 80057c4:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80057c8:	b2db      	uxtb	r3, r3
 80057ca:	2b00      	cmp	r3, #0
 80057cc:	bf0c      	ite	eq
 80057ce:	2301      	moveq	r3, #1
 80057d0:	2300      	movne	r3, #0
 80057d2:	b2db      	uxtb	r3, r3
 80057d4:	2b00      	cmp	r3, #0
 80057d6:	d006      	beq.n	80057e6 <HAL_UART_Init+0x36>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80057d8:	687b      	ldr	r3, [r7, #4]
 80057da:	2200      	movs	r2, #0
 80057dc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80057e0:	6878      	ldr	r0, [r7, #4]
 80057e2:	f7fd f909 	bl	80029f8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80057e6:	687b      	ldr	r3, [r7, #4]
 80057e8:	2224      	movs	r2, #36	@ 0x24
 80057ea:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80057ee:	687b      	ldr	r3, [r7, #4]
 80057f0:	681b      	ldr	r3, [r3, #0]
 80057f2:	68da      	ldr	r2, [r3, #12]
 80057f4:	687b      	ldr	r3, [r7, #4]
 80057f6:	681b      	ldr	r3, [r3, #0]
 80057f8:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80057fc:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80057fe:	6878      	ldr	r0, [r7, #4]
 8005800:	f000 f9b4 	bl	8005b6c <_ZL14UART_SetConfigP20__UART_HandleTypeDef>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005804:	687b      	ldr	r3, [r7, #4]
 8005806:	681b      	ldr	r3, [r3, #0]
 8005808:	691a      	ldr	r2, [r3, #16]
 800580a:	687b      	ldr	r3, [r7, #4]
 800580c:	681b      	ldr	r3, [r3, #0]
 800580e:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8005812:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005814:	687b      	ldr	r3, [r7, #4]
 8005816:	681b      	ldr	r3, [r3, #0]
 8005818:	695a      	ldr	r2, [r3, #20]
 800581a:	687b      	ldr	r3, [r7, #4]
 800581c:	681b      	ldr	r3, [r3, #0]
 800581e:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8005822:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8005824:	687b      	ldr	r3, [r7, #4]
 8005826:	681b      	ldr	r3, [r3, #0]
 8005828:	68da      	ldr	r2, [r3, #12]
 800582a:	687b      	ldr	r3, [r7, #4]
 800582c:	681b      	ldr	r3, [r3, #0]
 800582e:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8005832:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005834:	687b      	ldr	r3, [r7, #4]
 8005836:	2200      	movs	r2, #0
 8005838:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 800583a:	687b      	ldr	r3, [r7, #4]
 800583c:	2220      	movs	r2, #32
 800583e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8005842:	687b      	ldr	r3, [r7, #4]
 8005844:	2220      	movs	r2, #32
 8005846:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800584a:	687b      	ldr	r3, [r7, #4]
 800584c:	2200      	movs	r2, #0
 800584e:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8005850:	2300      	movs	r3, #0
}
 8005852:	4618      	mov	r0, r3
 8005854:	3708      	adds	r7, #8
 8005856:	46bd      	mov	sp, r7
 8005858:	bd80      	pop	{r7, pc}

0800585a <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800585a:	b580      	push	{r7, lr}
 800585c:	b08a      	sub	sp, #40	@ 0x28
 800585e:	af02      	add	r7, sp, #8
 8005860:	60f8      	str	r0, [r7, #12]
 8005862:	60b9      	str	r1, [r7, #8]
 8005864:	603b      	str	r3, [r7, #0]
 8005866:	4613      	mov	r3, r2
 8005868:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800586a:	2300      	movs	r3, #0
 800586c:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800586e:	68fb      	ldr	r3, [r7, #12]
 8005870:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005874:	b2db      	uxtb	r3, r3
 8005876:	2b20      	cmp	r3, #32
 8005878:	bf0c      	ite	eq
 800587a:	2301      	moveq	r3, #1
 800587c:	2300      	movne	r3, #0
 800587e:	b2db      	uxtb	r3, r3
 8005880:	2b00      	cmp	r3, #0
 8005882:	f000 8086 	beq.w	8005992 <HAL_UART_Transmit+0x138>
  {
    if ((pData == NULL) || (Size == 0U))
 8005886:	68bb      	ldr	r3, [r7, #8]
 8005888:	2b00      	cmp	r3, #0
 800588a:	d002      	beq.n	8005892 <HAL_UART_Transmit+0x38>
 800588c:	88fb      	ldrh	r3, [r7, #6]
 800588e:	2b00      	cmp	r3, #0
 8005890:	d101      	bne.n	8005896 <HAL_UART_Transmit+0x3c>
    {
      return  HAL_ERROR;
 8005892:	2301      	movs	r3, #1
 8005894:	e07e      	b.n	8005994 <HAL_UART_Transmit+0x13a>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005896:	68fb      	ldr	r3, [r7, #12]
 8005898:	2200      	movs	r2, #0
 800589a:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800589c:	68fb      	ldr	r3, [r7, #12]
 800589e:	2221      	movs	r2, #33	@ 0x21
 80058a0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80058a4:	f7fd f9d8 	bl	8002c58 <HAL_GetTick>
 80058a8:	4603      	mov	r3, r0
 80058aa:	617b      	str	r3, [r7, #20]

    huart->TxXferSize = Size;
 80058ac:	68fb      	ldr	r3, [r7, #12]
 80058ae:	88fa      	ldrh	r2, [r7, #6]
 80058b0:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 80058b2:	68fb      	ldr	r3, [r7, #12]
 80058b4:	88fa      	ldrh	r2, [r7, #6]
 80058b6:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80058b8:	68fb      	ldr	r3, [r7, #12]
 80058ba:	689b      	ldr	r3, [r3, #8]
 80058bc:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80058c0:	d108      	bne.n	80058d4 <HAL_UART_Transmit+0x7a>
 80058c2:	68fb      	ldr	r3, [r7, #12]
 80058c4:	691b      	ldr	r3, [r3, #16]
 80058c6:	2b00      	cmp	r3, #0
 80058c8:	d104      	bne.n	80058d4 <HAL_UART_Transmit+0x7a>
    {
      pdata8bits  = NULL;
 80058ca:	2300      	movs	r3, #0
 80058cc:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80058ce:	68bb      	ldr	r3, [r7, #8]
 80058d0:	61bb      	str	r3, [r7, #24]
 80058d2:	e003      	b.n	80058dc <HAL_UART_Transmit+0x82>
    }
    else
    {
      pdata8bits  = pData;
 80058d4:	68bb      	ldr	r3, [r7, #8]
 80058d6:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80058d8:	2300      	movs	r3, #0
 80058da:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80058dc:	e033      	b.n	8005946 <HAL_UART_Transmit+0xec>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80058de:	683b      	ldr	r3, [r7, #0]
 80058e0:	9300      	str	r3, [sp, #0]
 80058e2:	697b      	ldr	r3, [r7, #20]
 80058e4:	2200      	movs	r2, #0
 80058e6:	2180      	movs	r1, #128	@ 0x80
 80058e8:	68f8      	ldr	r0, [r7, #12]
 80058ea:	f000 f857 	bl	800599c <_ZL27UART_WaitOnFlagUntilTimeoutP20__UART_HandleTypeDefm10FlagStatusmm>
 80058ee:	4603      	mov	r3, r0
 80058f0:	2b00      	cmp	r3, #0
 80058f2:	bf14      	ite	ne
 80058f4:	2301      	movne	r3, #1
 80058f6:	2300      	moveq	r3, #0
 80058f8:	b2db      	uxtb	r3, r3
 80058fa:	2b00      	cmp	r3, #0
 80058fc:	d005      	beq.n	800590a <HAL_UART_Transmit+0xb0>
      {
        huart->gState = HAL_UART_STATE_READY;
 80058fe:	68fb      	ldr	r3, [r7, #12]
 8005900:	2220      	movs	r2, #32
 8005902:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 8005906:	2303      	movs	r3, #3
 8005908:	e044      	b.n	8005994 <HAL_UART_Transmit+0x13a>
      }
      if (pdata8bits == NULL)
 800590a:	69fb      	ldr	r3, [r7, #28]
 800590c:	2b00      	cmp	r3, #0
 800590e:	d10b      	bne.n	8005928 <HAL_UART_Transmit+0xce>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8005910:	69bb      	ldr	r3, [r7, #24]
 8005912:	881b      	ldrh	r3, [r3, #0]
 8005914:	461a      	mov	r2, r3
 8005916:	68fb      	ldr	r3, [r7, #12]
 8005918:	681b      	ldr	r3, [r3, #0]
 800591a:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800591e:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8005920:	69bb      	ldr	r3, [r7, #24]
 8005922:	3302      	adds	r3, #2
 8005924:	61bb      	str	r3, [r7, #24]
 8005926:	e007      	b.n	8005938 <HAL_UART_Transmit+0xde>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8005928:	69fb      	ldr	r3, [r7, #28]
 800592a:	781a      	ldrb	r2, [r3, #0]
 800592c:	68fb      	ldr	r3, [r7, #12]
 800592e:	681b      	ldr	r3, [r3, #0]
 8005930:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8005932:	69fb      	ldr	r3, [r7, #28]
 8005934:	3301      	adds	r3, #1
 8005936:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8005938:	68fb      	ldr	r3, [r7, #12]
 800593a:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 800593c:	b29b      	uxth	r3, r3
 800593e:	3b01      	subs	r3, #1
 8005940:	b29a      	uxth	r2, r3
 8005942:	68fb      	ldr	r3, [r7, #12]
 8005944:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8005946:	68fb      	ldr	r3, [r7, #12]
 8005948:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 800594a:	b29b      	uxth	r3, r3
 800594c:	2b00      	cmp	r3, #0
 800594e:	bf14      	ite	ne
 8005950:	2301      	movne	r3, #1
 8005952:	2300      	moveq	r3, #0
 8005954:	b2db      	uxtb	r3, r3
 8005956:	2b00      	cmp	r3, #0
 8005958:	d1c1      	bne.n	80058de <HAL_UART_Transmit+0x84>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800595a:	683b      	ldr	r3, [r7, #0]
 800595c:	9300      	str	r3, [sp, #0]
 800595e:	697b      	ldr	r3, [r7, #20]
 8005960:	2200      	movs	r2, #0
 8005962:	2140      	movs	r1, #64	@ 0x40
 8005964:	68f8      	ldr	r0, [r7, #12]
 8005966:	f000 f819 	bl	800599c <_ZL27UART_WaitOnFlagUntilTimeoutP20__UART_HandleTypeDefm10FlagStatusmm>
 800596a:	4603      	mov	r3, r0
 800596c:	2b00      	cmp	r3, #0
 800596e:	bf14      	ite	ne
 8005970:	2301      	movne	r3, #1
 8005972:	2300      	moveq	r3, #0
 8005974:	b2db      	uxtb	r3, r3
 8005976:	2b00      	cmp	r3, #0
 8005978:	d005      	beq.n	8005986 <HAL_UART_Transmit+0x12c>
    {
      huart->gState = HAL_UART_STATE_READY;
 800597a:	68fb      	ldr	r3, [r7, #12]
 800597c:	2220      	movs	r2, #32
 800597e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 8005982:	2303      	movs	r3, #3
 8005984:	e006      	b.n	8005994 <HAL_UART_Transmit+0x13a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8005986:	68fb      	ldr	r3, [r7, #12]
 8005988:	2220      	movs	r2, #32
 800598a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 800598e:	2300      	movs	r3, #0
 8005990:	e000      	b.n	8005994 <HAL_UART_Transmit+0x13a>
  }
  else
  {
    return HAL_BUSY;
 8005992:	2302      	movs	r3, #2
  }
}
 8005994:	4618      	mov	r0, r3
 8005996:	3720      	adds	r7, #32
 8005998:	46bd      	mov	sp, r7
 800599a:	bd80      	pop	{r7, pc}

0800599c <_ZL27UART_WaitOnFlagUntilTimeoutP20__UART_HandleTypeDefm10FlagStatusmm>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 800599c:	b580      	push	{r7, lr}
 800599e:	b086      	sub	sp, #24
 80059a0:	af00      	add	r7, sp, #0
 80059a2:	60f8      	str	r0, [r7, #12]
 80059a4:	60b9      	str	r1, [r7, #8]
 80059a6:	603b      	str	r3, [r7, #0]
 80059a8:	4613      	mov	r3, r2
 80059aa:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80059ac:	e04f      	b.n	8005a4e <_ZL27UART_WaitOnFlagUntilTimeoutP20__UART_HandleTypeDefm10FlagStatusmm+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80059ae:	6a3b      	ldr	r3, [r7, #32]
 80059b0:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80059b4:	d04b      	beq.n	8005a4e <_ZL27UART_WaitOnFlagUntilTimeoutP20__UART_HandleTypeDefm10FlagStatusmm+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80059b6:	f7fd f94f 	bl	8002c58 <HAL_GetTick>
 80059ba:	4602      	mov	r2, r0
 80059bc:	683b      	ldr	r3, [r7, #0]
 80059be:	1ad3      	subs	r3, r2, r3
 80059c0:	6a3a      	ldr	r2, [r7, #32]
 80059c2:	429a      	cmp	r2, r3
 80059c4:	d302      	bcc.n	80059cc <_ZL27UART_WaitOnFlagUntilTimeoutP20__UART_HandleTypeDefm10FlagStatusmm+0x30>
 80059c6:	6a3b      	ldr	r3, [r7, #32]
 80059c8:	2b00      	cmp	r3, #0
 80059ca:	d101      	bne.n	80059d0 <_ZL27UART_WaitOnFlagUntilTimeoutP20__UART_HandleTypeDefm10FlagStatusmm+0x34>
 80059cc:	2301      	movs	r3, #1
 80059ce:	e000      	b.n	80059d2 <_ZL27UART_WaitOnFlagUntilTimeoutP20__UART_HandleTypeDefm10FlagStatusmm+0x36>
 80059d0:	2300      	movs	r3, #0
 80059d2:	2b00      	cmp	r3, #0
 80059d4:	d001      	beq.n	80059da <_ZL27UART_WaitOnFlagUntilTimeoutP20__UART_HandleTypeDefm10FlagStatusmm+0x3e>
      {

        return HAL_TIMEOUT;
 80059d6:	2303      	movs	r3, #3
 80059d8:	e04d      	b.n	8005a76 <_ZL27UART_WaitOnFlagUntilTimeoutP20__UART_HandleTypeDefm10FlagStatusmm+0xda>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 80059da:	68fb      	ldr	r3, [r7, #12]
 80059dc:	681b      	ldr	r3, [r3, #0]
 80059de:	68db      	ldr	r3, [r3, #12]
 80059e0:	f003 0304 	and.w	r3, r3, #4
 80059e4:	2b00      	cmp	r3, #0
 80059e6:	d007      	beq.n	80059f8 <_ZL27UART_WaitOnFlagUntilTimeoutP20__UART_HandleTypeDefm10FlagStatusmm+0x5c>
 80059e8:	68bb      	ldr	r3, [r7, #8]
 80059ea:	2b80      	cmp	r3, #128	@ 0x80
 80059ec:	d004      	beq.n	80059f8 <_ZL27UART_WaitOnFlagUntilTimeoutP20__UART_HandleTypeDefm10FlagStatusmm+0x5c>
 80059ee:	68bb      	ldr	r3, [r7, #8]
 80059f0:	2b40      	cmp	r3, #64	@ 0x40
 80059f2:	d001      	beq.n	80059f8 <_ZL27UART_WaitOnFlagUntilTimeoutP20__UART_HandleTypeDefm10FlagStatusmm+0x5c>
 80059f4:	2301      	movs	r3, #1
 80059f6:	e000      	b.n	80059fa <_ZL27UART_WaitOnFlagUntilTimeoutP20__UART_HandleTypeDefm10FlagStatusmm+0x5e>
 80059f8:	2300      	movs	r3, #0
 80059fa:	2b00      	cmp	r3, #0
 80059fc:	d027      	beq.n	8005a4e <_ZL27UART_WaitOnFlagUntilTimeoutP20__UART_HandleTypeDefm10FlagStatusmm+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80059fe:	68fb      	ldr	r3, [r7, #12]
 8005a00:	681b      	ldr	r3, [r3, #0]
 8005a02:	681b      	ldr	r3, [r3, #0]
 8005a04:	f003 0308 	and.w	r3, r3, #8
 8005a08:	2b08      	cmp	r3, #8
 8005a0a:	bf0c      	ite	eq
 8005a0c:	2301      	moveq	r3, #1
 8005a0e:	2300      	movne	r3, #0
 8005a10:	b2db      	uxtb	r3, r3
 8005a12:	2b01      	cmp	r3, #1
 8005a14:	bf0c      	ite	eq
 8005a16:	2301      	moveq	r3, #1
 8005a18:	2300      	movne	r3, #0
 8005a1a:	b2db      	uxtb	r3, r3
 8005a1c:	2b00      	cmp	r3, #0
 8005a1e:	d016      	beq.n	8005a4e <_ZL27UART_WaitOnFlagUntilTimeoutP20__UART_HandleTypeDefm10FlagStatusmm+0xb2>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8005a20:	2300      	movs	r3, #0
 8005a22:	617b      	str	r3, [r7, #20]
 8005a24:	68fb      	ldr	r3, [r7, #12]
 8005a26:	681b      	ldr	r3, [r3, #0]
 8005a28:	681b      	ldr	r3, [r3, #0]
 8005a2a:	617b      	str	r3, [r7, #20]
 8005a2c:	68fb      	ldr	r3, [r7, #12]
 8005a2e:	681b      	ldr	r3, [r3, #0]
 8005a30:	685b      	ldr	r3, [r3, #4]
 8005a32:	617b      	str	r3, [r7, #20]
 8005a34:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8005a36:	68f8      	ldr	r0, [r7, #12]
 8005a38:	f000 f821 	bl	8005a7e <_ZL18UART_EndRxTransferP20__UART_HandleTypeDef>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8005a3c:	68fb      	ldr	r3, [r7, #12]
 8005a3e:	2208      	movs	r2, #8
 8005a40:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005a42:	68fb      	ldr	r3, [r7, #12]
 8005a44:	2200      	movs	r2, #0
 8005a46:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8005a4a:	2301      	movs	r3, #1
 8005a4c:	e013      	b.n	8005a76 <_ZL27UART_WaitOnFlagUntilTimeoutP20__UART_HandleTypeDefm10FlagStatusmm+0xda>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005a4e:	68fb      	ldr	r3, [r7, #12]
 8005a50:	681b      	ldr	r3, [r3, #0]
 8005a52:	681a      	ldr	r2, [r3, #0]
 8005a54:	68bb      	ldr	r3, [r7, #8]
 8005a56:	4013      	ands	r3, r2
 8005a58:	68ba      	ldr	r2, [r7, #8]
 8005a5a:	429a      	cmp	r2, r3
 8005a5c:	d101      	bne.n	8005a62 <_ZL27UART_WaitOnFlagUntilTimeoutP20__UART_HandleTypeDefm10FlagStatusmm+0xc6>
 8005a5e:	2201      	movs	r2, #1
 8005a60:	e000      	b.n	8005a64 <_ZL27UART_WaitOnFlagUntilTimeoutP20__UART_HandleTypeDefm10FlagStatusmm+0xc8>
 8005a62:	2200      	movs	r2, #0
 8005a64:	79fb      	ldrb	r3, [r7, #7]
 8005a66:	429a      	cmp	r2, r3
 8005a68:	bf0c      	ite	eq
 8005a6a:	2301      	moveq	r3, #1
 8005a6c:	2300      	movne	r3, #0
 8005a6e:	b2db      	uxtb	r3, r3
 8005a70:	2b00      	cmp	r3, #0
 8005a72:	d19c      	bne.n	80059ae <_ZL27UART_WaitOnFlagUntilTimeoutP20__UART_HandleTypeDefm10FlagStatusmm+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005a74:	2300      	movs	r3, #0
}
 8005a76:	4618      	mov	r0, r3
 8005a78:	3718      	adds	r7, #24
 8005a7a:	46bd      	mov	sp, r7
 8005a7c:	bd80      	pop	{r7, pc}

08005a7e <_ZL18UART_EndRxTransferP20__UART_HandleTypeDef>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8005a7e:	b480      	push	{r7}
 8005a80:	b095      	sub	sp, #84	@ 0x54
 8005a82:	af00      	add	r7, sp, #0
 8005a84:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005a86:	687b      	ldr	r3, [r7, #4]
 8005a88:	681b      	ldr	r3, [r3, #0]
 8005a8a:	330c      	adds	r3, #12
 8005a8c:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005a8e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005a90:	e853 3f00 	ldrex	r3, [r3]
 8005a94:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8005a96:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005a98:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8005a9c:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005a9e:	687b      	ldr	r3, [r7, #4]
 8005aa0:	681b      	ldr	r3, [r3, #0]
 8005aa2:	330c      	adds	r3, #12
 8005aa4:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8005aa6:	643a      	str	r2, [r7, #64]	@ 0x40
 8005aa8:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005aaa:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8005aac:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8005aae:	e841 2300 	strex	r3, r2, [r1]
 8005ab2:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8005ab4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005ab6:	2b00      	cmp	r3, #0
 8005ab8:	bf14      	ite	ne
 8005aba:	2301      	movne	r3, #1
 8005abc:	2300      	moveq	r3, #0
 8005abe:	b2db      	uxtb	r3, r3
 8005ac0:	2b00      	cmp	r3, #0
 8005ac2:	d1e0      	bne.n	8005a86 <_ZL18UART_EndRxTransferP20__UART_HandleTypeDef+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005ac4:	687b      	ldr	r3, [r7, #4]
 8005ac6:	681b      	ldr	r3, [r3, #0]
 8005ac8:	3314      	adds	r3, #20
 8005aca:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005acc:	6a3b      	ldr	r3, [r7, #32]
 8005ace:	e853 3f00 	ldrex	r3, [r3]
 8005ad2:	61fb      	str	r3, [r7, #28]
   return(result);
 8005ad4:	69fb      	ldr	r3, [r7, #28]
 8005ad6:	f023 0301 	bic.w	r3, r3, #1
 8005ada:	64bb      	str	r3, [r7, #72]	@ 0x48
 8005adc:	687b      	ldr	r3, [r7, #4]
 8005ade:	681b      	ldr	r3, [r3, #0]
 8005ae0:	3314      	adds	r3, #20
 8005ae2:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8005ae4:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8005ae6:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005ae8:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8005aea:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8005aec:	e841 2300 	strex	r3, r2, [r1]
 8005af0:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8005af2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005af4:	2b00      	cmp	r3, #0
 8005af6:	bf14      	ite	ne
 8005af8:	2301      	movne	r3, #1
 8005afa:	2300      	moveq	r3, #0
 8005afc:	b2db      	uxtb	r3, r3
 8005afe:	2b00      	cmp	r3, #0
 8005b00:	d1e0      	bne.n	8005ac4 <_ZL18UART_EndRxTransferP20__UART_HandleTypeDef+0x46>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005b02:	687b      	ldr	r3, [r7, #4]
 8005b04:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005b06:	2b01      	cmp	r3, #1
 8005b08:	bf0c      	ite	eq
 8005b0a:	2301      	moveq	r3, #1
 8005b0c:	2300      	movne	r3, #0
 8005b0e:	b2db      	uxtb	r3, r3
 8005b10:	2b00      	cmp	r3, #0
 8005b12:	d01e      	beq.n	8005b52 <_ZL18UART_EndRxTransferP20__UART_HandleTypeDef+0xd4>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005b14:	687b      	ldr	r3, [r7, #4]
 8005b16:	681b      	ldr	r3, [r3, #0]
 8005b18:	330c      	adds	r3, #12
 8005b1a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005b1c:	68fb      	ldr	r3, [r7, #12]
 8005b1e:	e853 3f00 	ldrex	r3, [r3]
 8005b22:	60bb      	str	r3, [r7, #8]
   return(result);
 8005b24:	68bb      	ldr	r3, [r7, #8]
 8005b26:	f023 0310 	bic.w	r3, r3, #16
 8005b2a:	647b      	str	r3, [r7, #68]	@ 0x44
 8005b2c:	687b      	ldr	r3, [r7, #4]
 8005b2e:	681b      	ldr	r3, [r3, #0]
 8005b30:	330c      	adds	r3, #12
 8005b32:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8005b34:	61ba      	str	r2, [r7, #24]
 8005b36:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005b38:	6979      	ldr	r1, [r7, #20]
 8005b3a:	69ba      	ldr	r2, [r7, #24]
 8005b3c:	e841 2300 	strex	r3, r2, [r1]
 8005b40:	613b      	str	r3, [r7, #16]
   return(result);
 8005b42:	693b      	ldr	r3, [r7, #16]
 8005b44:	2b00      	cmp	r3, #0
 8005b46:	bf14      	ite	ne
 8005b48:	2301      	movne	r3, #1
 8005b4a:	2300      	moveq	r3, #0
 8005b4c:	b2db      	uxtb	r3, r3
 8005b4e:	2b00      	cmp	r3, #0
 8005b50:	d1e0      	bne.n	8005b14 <_ZL18UART_EndRxTransferP20__UART_HandleTypeDef+0x96>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005b52:	687b      	ldr	r3, [r7, #4]
 8005b54:	2220      	movs	r2, #32
 8005b56:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005b5a:	687b      	ldr	r3, [r7, #4]
 8005b5c:	2200      	movs	r2, #0
 8005b5e:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8005b60:	bf00      	nop
 8005b62:	3754      	adds	r7, #84	@ 0x54
 8005b64:	46bd      	mov	sp, r7
 8005b66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b6a:	4770      	bx	lr

08005b6c <_ZL14UART_SetConfigP20__UART_HandleTypeDef>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005b6c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005b70:	b0c0      	sub	sp, #256	@ 0x100
 8005b72:	af00      	add	r7, sp, #0
 8005b74:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005b78:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005b7c:	681b      	ldr	r3, [r3, #0]
 8005b7e:	691b      	ldr	r3, [r3, #16]
 8005b80:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8005b84:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005b88:	68d9      	ldr	r1, [r3, #12]
 8005b8a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005b8e:	681a      	ldr	r2, [r3, #0]
 8005b90:	ea40 0301 	orr.w	r3, r0, r1
 8005b94:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8005b96:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005b9a:	689a      	ldr	r2, [r3, #8]
 8005b9c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005ba0:	691b      	ldr	r3, [r3, #16]
 8005ba2:	431a      	orrs	r2, r3
 8005ba4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005ba8:	695b      	ldr	r3, [r3, #20]
 8005baa:	431a      	orrs	r2, r3
 8005bac:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005bb0:	69db      	ldr	r3, [r3, #28]
 8005bb2:	4313      	orrs	r3, r2
 8005bb4:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8005bb8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005bbc:	681b      	ldr	r3, [r3, #0]
 8005bbe:	68db      	ldr	r3, [r3, #12]
 8005bc0:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8005bc4:	f021 010c 	bic.w	r1, r1, #12
 8005bc8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005bcc:	681a      	ldr	r2, [r3, #0]
 8005bce:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8005bd2:	430b      	orrs	r3, r1
 8005bd4:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8005bd6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005bda:	681b      	ldr	r3, [r3, #0]
 8005bdc:	695b      	ldr	r3, [r3, #20]
 8005bde:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 8005be2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005be6:	6999      	ldr	r1, [r3, #24]
 8005be8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005bec:	681a      	ldr	r2, [r3, #0]
 8005bee:	ea40 0301 	orr.w	r3, r0, r1
 8005bf2:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8005bf4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005bf8:	681a      	ldr	r2, [r3, #0]
 8005bfa:	4b90      	ldr	r3, [pc, #576]	@ (8005e3c <_ZL14UART_SetConfigP20__UART_HandleTypeDef+0x2d0>)
 8005bfc:	429a      	cmp	r2, r3
 8005bfe:	d005      	beq.n	8005c0c <_ZL14UART_SetConfigP20__UART_HandleTypeDef+0xa0>
 8005c00:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005c04:	681a      	ldr	r2, [r3, #0]
 8005c06:	4b8e      	ldr	r3, [pc, #568]	@ (8005e40 <_ZL14UART_SetConfigP20__UART_HandleTypeDef+0x2d4>)
 8005c08:	429a      	cmp	r2, r3
 8005c0a:	d105      	bne.n	8005c18 <_ZL14UART_SetConfigP20__UART_HandleTypeDef+0xac>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8005c0c:	f7fe f8b0 	bl	8003d70 <HAL_RCC_GetPCLK2Freq>
 8005c10:	4603      	mov	r3, r0
 8005c12:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 8005c16:	e004      	b.n	8005c22 <_ZL14UART_SetConfigP20__UART_HandleTypeDef+0xb6>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8005c18:	f7fe f896 	bl	8003d48 <HAL_RCC_GetPCLK1Freq>
 8005c1c:	4603      	mov	r3, r0
 8005c1e:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005c22:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005c26:	69db      	ldr	r3, [r3, #28]
 8005c28:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005c2c:	f040 810c 	bne.w	8005e48 <_ZL14UART_SetConfigP20__UART_HandleTypeDef+0x2dc>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8005c30:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005c34:	2200      	movs	r2, #0
 8005c36:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8005c3a:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8005c3e:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8005c42:	4622      	mov	r2, r4
 8005c44:	462b      	mov	r3, r5
 8005c46:	1891      	adds	r1, r2, r2
 8005c48:	65b9      	str	r1, [r7, #88]	@ 0x58
 8005c4a:	415b      	adcs	r3, r3
 8005c4c:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8005c4e:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8005c52:	4621      	mov	r1, r4
 8005c54:	eb12 0801 	adds.w	r8, r2, r1
 8005c58:	4629      	mov	r1, r5
 8005c5a:	eb43 0901 	adc.w	r9, r3, r1
 8005c5e:	f04f 0200 	mov.w	r2, #0
 8005c62:	f04f 0300 	mov.w	r3, #0
 8005c66:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8005c6a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8005c6e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8005c72:	4690      	mov	r8, r2
 8005c74:	4699      	mov	r9, r3
 8005c76:	4623      	mov	r3, r4
 8005c78:	eb18 0303 	adds.w	r3, r8, r3
 8005c7c:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8005c80:	462b      	mov	r3, r5
 8005c82:	eb49 0303 	adc.w	r3, r9, r3
 8005c86:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8005c8a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005c8e:	685b      	ldr	r3, [r3, #4]
 8005c90:	2200      	movs	r2, #0
 8005c92:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8005c96:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8005c9a:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8005c9e:	460b      	mov	r3, r1
 8005ca0:	18db      	adds	r3, r3, r3
 8005ca2:	653b      	str	r3, [r7, #80]	@ 0x50
 8005ca4:	4613      	mov	r3, r2
 8005ca6:	eb42 0303 	adc.w	r3, r2, r3
 8005caa:	657b      	str	r3, [r7, #84]	@ 0x54
 8005cac:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8005cb0:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8005cb4:	f7fa ff98 	bl	8000be8 <__aeabi_uldivmod>
 8005cb8:	4602      	mov	r2, r0
 8005cba:	460b      	mov	r3, r1
 8005cbc:	4b61      	ldr	r3, [pc, #388]	@ (8005e44 <_ZL14UART_SetConfigP20__UART_HandleTypeDef+0x2d8>)
 8005cbe:	fba3 2302 	umull	r2, r3, r3, r2
 8005cc2:	095b      	lsrs	r3, r3, #5
 8005cc4:	011c      	lsls	r4, r3, #4
 8005cc6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005cca:	2200      	movs	r2, #0
 8005ccc:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8005cd0:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8005cd4:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8005cd8:	4642      	mov	r2, r8
 8005cda:	464b      	mov	r3, r9
 8005cdc:	1891      	adds	r1, r2, r2
 8005cde:	64b9      	str	r1, [r7, #72]	@ 0x48
 8005ce0:	415b      	adcs	r3, r3
 8005ce2:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005ce4:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8005ce8:	4641      	mov	r1, r8
 8005cea:	eb12 0a01 	adds.w	sl, r2, r1
 8005cee:	4649      	mov	r1, r9
 8005cf0:	eb43 0b01 	adc.w	fp, r3, r1
 8005cf4:	f04f 0200 	mov.w	r2, #0
 8005cf8:	f04f 0300 	mov.w	r3, #0
 8005cfc:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8005d00:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8005d04:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8005d08:	4692      	mov	sl, r2
 8005d0a:	469b      	mov	fp, r3
 8005d0c:	4643      	mov	r3, r8
 8005d0e:	eb1a 0303 	adds.w	r3, sl, r3
 8005d12:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8005d16:	464b      	mov	r3, r9
 8005d18:	eb4b 0303 	adc.w	r3, fp, r3
 8005d1c:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8005d20:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005d24:	685b      	ldr	r3, [r3, #4]
 8005d26:	2200      	movs	r2, #0
 8005d28:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8005d2c:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8005d30:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8005d34:	460b      	mov	r3, r1
 8005d36:	18db      	adds	r3, r3, r3
 8005d38:	643b      	str	r3, [r7, #64]	@ 0x40
 8005d3a:	4613      	mov	r3, r2
 8005d3c:	eb42 0303 	adc.w	r3, r2, r3
 8005d40:	647b      	str	r3, [r7, #68]	@ 0x44
 8005d42:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8005d46:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 8005d4a:	f7fa ff4d 	bl	8000be8 <__aeabi_uldivmod>
 8005d4e:	4602      	mov	r2, r0
 8005d50:	460b      	mov	r3, r1
 8005d52:	4611      	mov	r1, r2
 8005d54:	4b3b      	ldr	r3, [pc, #236]	@ (8005e44 <_ZL14UART_SetConfigP20__UART_HandleTypeDef+0x2d8>)
 8005d56:	fba3 2301 	umull	r2, r3, r3, r1
 8005d5a:	095b      	lsrs	r3, r3, #5
 8005d5c:	2264      	movs	r2, #100	@ 0x64
 8005d5e:	fb02 f303 	mul.w	r3, r2, r3
 8005d62:	1acb      	subs	r3, r1, r3
 8005d64:	00db      	lsls	r3, r3, #3
 8005d66:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8005d6a:	4b36      	ldr	r3, [pc, #216]	@ (8005e44 <_ZL14UART_SetConfigP20__UART_HandleTypeDef+0x2d8>)
 8005d6c:	fba3 2302 	umull	r2, r3, r3, r2
 8005d70:	095b      	lsrs	r3, r3, #5
 8005d72:	005b      	lsls	r3, r3, #1
 8005d74:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8005d78:	441c      	add	r4, r3
 8005d7a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005d7e:	2200      	movs	r2, #0
 8005d80:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8005d84:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8005d88:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8005d8c:	4642      	mov	r2, r8
 8005d8e:	464b      	mov	r3, r9
 8005d90:	1891      	adds	r1, r2, r2
 8005d92:	63b9      	str	r1, [r7, #56]	@ 0x38
 8005d94:	415b      	adcs	r3, r3
 8005d96:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8005d98:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8005d9c:	4641      	mov	r1, r8
 8005d9e:	1851      	adds	r1, r2, r1
 8005da0:	6339      	str	r1, [r7, #48]	@ 0x30
 8005da2:	4649      	mov	r1, r9
 8005da4:	414b      	adcs	r3, r1
 8005da6:	637b      	str	r3, [r7, #52]	@ 0x34
 8005da8:	f04f 0200 	mov.w	r2, #0
 8005dac:	f04f 0300 	mov.w	r3, #0
 8005db0:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8005db4:	4659      	mov	r1, fp
 8005db6:	00cb      	lsls	r3, r1, #3
 8005db8:	4651      	mov	r1, sl
 8005dba:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005dbe:	4651      	mov	r1, sl
 8005dc0:	00ca      	lsls	r2, r1, #3
 8005dc2:	4610      	mov	r0, r2
 8005dc4:	4619      	mov	r1, r3
 8005dc6:	4603      	mov	r3, r0
 8005dc8:	4642      	mov	r2, r8
 8005dca:	189b      	adds	r3, r3, r2
 8005dcc:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8005dd0:	464b      	mov	r3, r9
 8005dd2:	460a      	mov	r2, r1
 8005dd4:	eb42 0303 	adc.w	r3, r2, r3
 8005dd8:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8005ddc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005de0:	685b      	ldr	r3, [r3, #4]
 8005de2:	2200      	movs	r2, #0
 8005de4:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8005de8:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8005dec:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8005df0:	460b      	mov	r3, r1
 8005df2:	18db      	adds	r3, r3, r3
 8005df4:	62bb      	str	r3, [r7, #40]	@ 0x28
 8005df6:	4613      	mov	r3, r2
 8005df8:	eb42 0303 	adc.w	r3, r2, r3
 8005dfc:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8005dfe:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8005e02:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 8005e06:	f7fa feef 	bl	8000be8 <__aeabi_uldivmod>
 8005e0a:	4602      	mov	r2, r0
 8005e0c:	460b      	mov	r3, r1
 8005e0e:	4b0d      	ldr	r3, [pc, #52]	@ (8005e44 <_ZL14UART_SetConfigP20__UART_HandleTypeDef+0x2d8>)
 8005e10:	fba3 1302 	umull	r1, r3, r3, r2
 8005e14:	095b      	lsrs	r3, r3, #5
 8005e16:	2164      	movs	r1, #100	@ 0x64
 8005e18:	fb01 f303 	mul.w	r3, r1, r3
 8005e1c:	1ad3      	subs	r3, r2, r3
 8005e1e:	00db      	lsls	r3, r3, #3
 8005e20:	3332      	adds	r3, #50	@ 0x32
 8005e22:	4a08      	ldr	r2, [pc, #32]	@ (8005e44 <_ZL14UART_SetConfigP20__UART_HandleTypeDef+0x2d8>)
 8005e24:	fba2 2303 	umull	r2, r3, r2, r3
 8005e28:	095b      	lsrs	r3, r3, #5
 8005e2a:	f003 0207 	and.w	r2, r3, #7
 8005e2e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005e32:	681b      	ldr	r3, [r3, #0]
 8005e34:	4422      	add	r2, r4
 8005e36:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8005e38:	e106      	b.n	8006048 <_ZL14UART_SetConfigP20__UART_HandleTypeDef+0x4dc>
 8005e3a:	bf00      	nop
 8005e3c:	40011000 	.word	0x40011000
 8005e40:	40011400 	.word	0x40011400
 8005e44:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8005e48:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005e4c:	2200      	movs	r2, #0
 8005e4e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8005e52:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8005e56:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8005e5a:	4642      	mov	r2, r8
 8005e5c:	464b      	mov	r3, r9
 8005e5e:	1891      	adds	r1, r2, r2
 8005e60:	6239      	str	r1, [r7, #32]
 8005e62:	415b      	adcs	r3, r3
 8005e64:	627b      	str	r3, [r7, #36]	@ 0x24
 8005e66:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8005e6a:	4641      	mov	r1, r8
 8005e6c:	1854      	adds	r4, r2, r1
 8005e6e:	4649      	mov	r1, r9
 8005e70:	eb43 0501 	adc.w	r5, r3, r1
 8005e74:	f04f 0200 	mov.w	r2, #0
 8005e78:	f04f 0300 	mov.w	r3, #0
 8005e7c:	00eb      	lsls	r3, r5, #3
 8005e7e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8005e82:	00e2      	lsls	r2, r4, #3
 8005e84:	4614      	mov	r4, r2
 8005e86:	461d      	mov	r5, r3
 8005e88:	4643      	mov	r3, r8
 8005e8a:	18e3      	adds	r3, r4, r3
 8005e8c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8005e90:	464b      	mov	r3, r9
 8005e92:	eb45 0303 	adc.w	r3, r5, r3
 8005e96:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8005e9a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005e9e:	685b      	ldr	r3, [r3, #4]
 8005ea0:	2200      	movs	r2, #0
 8005ea2:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8005ea6:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8005eaa:	f04f 0200 	mov.w	r2, #0
 8005eae:	f04f 0300 	mov.w	r3, #0
 8005eb2:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8005eb6:	4629      	mov	r1, r5
 8005eb8:	008b      	lsls	r3, r1, #2
 8005eba:	4621      	mov	r1, r4
 8005ebc:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005ec0:	4621      	mov	r1, r4
 8005ec2:	008a      	lsls	r2, r1, #2
 8005ec4:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8005ec8:	f7fa fe8e 	bl	8000be8 <__aeabi_uldivmod>
 8005ecc:	4602      	mov	r2, r0
 8005ece:	460b      	mov	r3, r1
 8005ed0:	4b60      	ldr	r3, [pc, #384]	@ (8006054 <_ZL14UART_SetConfigP20__UART_HandleTypeDef+0x4e8>)
 8005ed2:	fba3 2302 	umull	r2, r3, r3, r2
 8005ed6:	095b      	lsrs	r3, r3, #5
 8005ed8:	011c      	lsls	r4, r3, #4
 8005eda:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005ede:	2200      	movs	r2, #0
 8005ee0:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8005ee4:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8005ee8:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8005eec:	4642      	mov	r2, r8
 8005eee:	464b      	mov	r3, r9
 8005ef0:	1891      	adds	r1, r2, r2
 8005ef2:	61b9      	str	r1, [r7, #24]
 8005ef4:	415b      	adcs	r3, r3
 8005ef6:	61fb      	str	r3, [r7, #28]
 8005ef8:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8005efc:	4641      	mov	r1, r8
 8005efe:	1851      	adds	r1, r2, r1
 8005f00:	6139      	str	r1, [r7, #16]
 8005f02:	4649      	mov	r1, r9
 8005f04:	414b      	adcs	r3, r1
 8005f06:	617b      	str	r3, [r7, #20]
 8005f08:	f04f 0200 	mov.w	r2, #0
 8005f0c:	f04f 0300 	mov.w	r3, #0
 8005f10:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8005f14:	4659      	mov	r1, fp
 8005f16:	00cb      	lsls	r3, r1, #3
 8005f18:	4651      	mov	r1, sl
 8005f1a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005f1e:	4651      	mov	r1, sl
 8005f20:	00ca      	lsls	r2, r1, #3
 8005f22:	4610      	mov	r0, r2
 8005f24:	4619      	mov	r1, r3
 8005f26:	4603      	mov	r3, r0
 8005f28:	4642      	mov	r2, r8
 8005f2a:	189b      	adds	r3, r3, r2
 8005f2c:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8005f30:	464b      	mov	r3, r9
 8005f32:	460a      	mov	r2, r1
 8005f34:	eb42 0303 	adc.w	r3, r2, r3
 8005f38:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8005f3c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005f40:	685b      	ldr	r3, [r3, #4]
 8005f42:	2200      	movs	r2, #0
 8005f44:	67bb      	str	r3, [r7, #120]	@ 0x78
 8005f46:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8005f48:	f04f 0200 	mov.w	r2, #0
 8005f4c:	f04f 0300 	mov.w	r3, #0
 8005f50:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8005f54:	4649      	mov	r1, r9
 8005f56:	008b      	lsls	r3, r1, #2
 8005f58:	4641      	mov	r1, r8
 8005f5a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005f5e:	4641      	mov	r1, r8
 8005f60:	008a      	lsls	r2, r1, #2
 8005f62:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8005f66:	f7fa fe3f 	bl	8000be8 <__aeabi_uldivmod>
 8005f6a:	4602      	mov	r2, r0
 8005f6c:	460b      	mov	r3, r1
 8005f6e:	4611      	mov	r1, r2
 8005f70:	4b38      	ldr	r3, [pc, #224]	@ (8006054 <_ZL14UART_SetConfigP20__UART_HandleTypeDef+0x4e8>)
 8005f72:	fba3 2301 	umull	r2, r3, r3, r1
 8005f76:	095b      	lsrs	r3, r3, #5
 8005f78:	2264      	movs	r2, #100	@ 0x64
 8005f7a:	fb02 f303 	mul.w	r3, r2, r3
 8005f7e:	1acb      	subs	r3, r1, r3
 8005f80:	011b      	lsls	r3, r3, #4
 8005f82:	3332      	adds	r3, #50	@ 0x32
 8005f84:	4a33      	ldr	r2, [pc, #204]	@ (8006054 <_ZL14UART_SetConfigP20__UART_HandleTypeDef+0x4e8>)
 8005f86:	fba2 2303 	umull	r2, r3, r2, r3
 8005f8a:	095b      	lsrs	r3, r3, #5
 8005f8c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8005f90:	441c      	add	r4, r3
 8005f92:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005f96:	2200      	movs	r2, #0
 8005f98:	673b      	str	r3, [r7, #112]	@ 0x70
 8005f9a:	677a      	str	r2, [r7, #116]	@ 0x74
 8005f9c:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8005fa0:	4642      	mov	r2, r8
 8005fa2:	464b      	mov	r3, r9
 8005fa4:	1891      	adds	r1, r2, r2
 8005fa6:	60b9      	str	r1, [r7, #8]
 8005fa8:	415b      	adcs	r3, r3
 8005faa:	60fb      	str	r3, [r7, #12]
 8005fac:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8005fb0:	4641      	mov	r1, r8
 8005fb2:	1851      	adds	r1, r2, r1
 8005fb4:	6039      	str	r1, [r7, #0]
 8005fb6:	4649      	mov	r1, r9
 8005fb8:	414b      	adcs	r3, r1
 8005fba:	607b      	str	r3, [r7, #4]
 8005fbc:	f04f 0200 	mov.w	r2, #0
 8005fc0:	f04f 0300 	mov.w	r3, #0
 8005fc4:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8005fc8:	4659      	mov	r1, fp
 8005fca:	00cb      	lsls	r3, r1, #3
 8005fcc:	4651      	mov	r1, sl
 8005fce:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005fd2:	4651      	mov	r1, sl
 8005fd4:	00ca      	lsls	r2, r1, #3
 8005fd6:	4610      	mov	r0, r2
 8005fd8:	4619      	mov	r1, r3
 8005fda:	4603      	mov	r3, r0
 8005fdc:	4642      	mov	r2, r8
 8005fde:	189b      	adds	r3, r3, r2
 8005fe0:	66bb      	str	r3, [r7, #104]	@ 0x68
 8005fe2:	464b      	mov	r3, r9
 8005fe4:	460a      	mov	r2, r1
 8005fe6:	eb42 0303 	adc.w	r3, r2, r3
 8005fea:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8005fec:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005ff0:	685b      	ldr	r3, [r3, #4]
 8005ff2:	2200      	movs	r2, #0
 8005ff4:	663b      	str	r3, [r7, #96]	@ 0x60
 8005ff6:	667a      	str	r2, [r7, #100]	@ 0x64
 8005ff8:	f04f 0200 	mov.w	r2, #0
 8005ffc:	f04f 0300 	mov.w	r3, #0
 8006000:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8006004:	4649      	mov	r1, r9
 8006006:	008b      	lsls	r3, r1, #2
 8006008:	4641      	mov	r1, r8
 800600a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800600e:	4641      	mov	r1, r8
 8006010:	008a      	lsls	r2, r1, #2
 8006012:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8006016:	f7fa fde7 	bl	8000be8 <__aeabi_uldivmod>
 800601a:	4602      	mov	r2, r0
 800601c:	460b      	mov	r3, r1
 800601e:	4b0d      	ldr	r3, [pc, #52]	@ (8006054 <_ZL14UART_SetConfigP20__UART_HandleTypeDef+0x4e8>)
 8006020:	fba3 1302 	umull	r1, r3, r3, r2
 8006024:	095b      	lsrs	r3, r3, #5
 8006026:	2164      	movs	r1, #100	@ 0x64
 8006028:	fb01 f303 	mul.w	r3, r1, r3
 800602c:	1ad3      	subs	r3, r2, r3
 800602e:	011b      	lsls	r3, r3, #4
 8006030:	3332      	adds	r3, #50	@ 0x32
 8006032:	4a08      	ldr	r2, [pc, #32]	@ (8006054 <_ZL14UART_SetConfigP20__UART_HandleTypeDef+0x4e8>)
 8006034:	fba2 2303 	umull	r2, r3, r2, r3
 8006038:	095b      	lsrs	r3, r3, #5
 800603a:	f003 020f 	and.w	r2, r3, #15
 800603e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006042:	681b      	ldr	r3, [r3, #0]
 8006044:	4422      	add	r2, r4
 8006046:	609a      	str	r2, [r3, #8]
}
 8006048:	bf00      	nop
 800604a:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 800604e:	46bd      	mov	sp, r7
 8006050:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8006054:	51eb851f 	.word	0x51eb851f

08006058 <abort>:
 8006058:	b508      	push	{r3, lr}
 800605a:	2006      	movs	r0, #6
 800605c:	f000 fe68 	bl	8006d30 <raise>
 8006060:	2001      	movs	r0, #1
 8006062:	f002 fe89 	bl	8008d78 <_exit>
	...

08006068 <malloc>:
 8006068:	4b02      	ldr	r3, [pc, #8]	@ (8006074 <malloc+0xc>)
 800606a:	4601      	mov	r1, r0
 800606c:	6818      	ldr	r0, [r3, #0]
 800606e:	f000 b825 	b.w	80060bc <_malloc_r>
 8006072:	bf00      	nop
 8006074:	20000018 	.word	0x20000018

08006078 <sbrk_aligned>:
 8006078:	b570      	push	{r4, r5, r6, lr}
 800607a:	4e0f      	ldr	r6, [pc, #60]	@ (80060b8 <sbrk_aligned+0x40>)
 800607c:	460c      	mov	r4, r1
 800607e:	6831      	ldr	r1, [r6, #0]
 8006080:	4605      	mov	r5, r0
 8006082:	b911      	cbnz	r1, 800608a <sbrk_aligned+0x12>
 8006084:	f000 fea8 	bl	8006dd8 <_sbrk_r>
 8006088:	6030      	str	r0, [r6, #0]
 800608a:	4621      	mov	r1, r4
 800608c:	4628      	mov	r0, r5
 800608e:	f000 fea3 	bl	8006dd8 <_sbrk_r>
 8006092:	1c43      	adds	r3, r0, #1
 8006094:	d103      	bne.n	800609e <sbrk_aligned+0x26>
 8006096:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 800609a:	4620      	mov	r0, r4
 800609c:	bd70      	pop	{r4, r5, r6, pc}
 800609e:	1cc4      	adds	r4, r0, #3
 80060a0:	f024 0403 	bic.w	r4, r4, #3
 80060a4:	42a0      	cmp	r0, r4
 80060a6:	d0f8      	beq.n	800609a <sbrk_aligned+0x22>
 80060a8:	1a21      	subs	r1, r4, r0
 80060aa:	4628      	mov	r0, r5
 80060ac:	f000 fe94 	bl	8006dd8 <_sbrk_r>
 80060b0:	3001      	adds	r0, #1
 80060b2:	d1f2      	bne.n	800609a <sbrk_aligned+0x22>
 80060b4:	e7ef      	b.n	8006096 <sbrk_aligned+0x1e>
 80060b6:	bf00      	nop
 80060b8:	2000036c 	.word	0x2000036c

080060bc <_malloc_r>:
 80060bc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80060c0:	1ccd      	adds	r5, r1, #3
 80060c2:	f025 0503 	bic.w	r5, r5, #3
 80060c6:	3508      	adds	r5, #8
 80060c8:	2d0c      	cmp	r5, #12
 80060ca:	bf38      	it	cc
 80060cc:	250c      	movcc	r5, #12
 80060ce:	2d00      	cmp	r5, #0
 80060d0:	4606      	mov	r6, r0
 80060d2:	db01      	blt.n	80060d8 <_malloc_r+0x1c>
 80060d4:	42a9      	cmp	r1, r5
 80060d6:	d904      	bls.n	80060e2 <_malloc_r+0x26>
 80060d8:	230c      	movs	r3, #12
 80060da:	6033      	str	r3, [r6, #0]
 80060dc:	2000      	movs	r0, #0
 80060de:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80060e2:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 80061b8 <_malloc_r+0xfc>
 80060e6:	f000 f869 	bl	80061bc <__malloc_lock>
 80060ea:	f8d8 3000 	ldr.w	r3, [r8]
 80060ee:	461c      	mov	r4, r3
 80060f0:	bb44      	cbnz	r4, 8006144 <_malloc_r+0x88>
 80060f2:	4629      	mov	r1, r5
 80060f4:	4630      	mov	r0, r6
 80060f6:	f7ff ffbf 	bl	8006078 <sbrk_aligned>
 80060fa:	1c43      	adds	r3, r0, #1
 80060fc:	4604      	mov	r4, r0
 80060fe:	d158      	bne.n	80061b2 <_malloc_r+0xf6>
 8006100:	f8d8 4000 	ldr.w	r4, [r8]
 8006104:	4627      	mov	r7, r4
 8006106:	2f00      	cmp	r7, #0
 8006108:	d143      	bne.n	8006192 <_malloc_r+0xd6>
 800610a:	2c00      	cmp	r4, #0
 800610c:	d04b      	beq.n	80061a6 <_malloc_r+0xea>
 800610e:	6823      	ldr	r3, [r4, #0]
 8006110:	4639      	mov	r1, r7
 8006112:	4630      	mov	r0, r6
 8006114:	eb04 0903 	add.w	r9, r4, r3
 8006118:	f000 fe5e 	bl	8006dd8 <_sbrk_r>
 800611c:	4581      	cmp	r9, r0
 800611e:	d142      	bne.n	80061a6 <_malloc_r+0xea>
 8006120:	6821      	ldr	r1, [r4, #0]
 8006122:	1a6d      	subs	r5, r5, r1
 8006124:	4629      	mov	r1, r5
 8006126:	4630      	mov	r0, r6
 8006128:	f7ff ffa6 	bl	8006078 <sbrk_aligned>
 800612c:	3001      	adds	r0, #1
 800612e:	d03a      	beq.n	80061a6 <_malloc_r+0xea>
 8006130:	6823      	ldr	r3, [r4, #0]
 8006132:	442b      	add	r3, r5
 8006134:	6023      	str	r3, [r4, #0]
 8006136:	f8d8 3000 	ldr.w	r3, [r8]
 800613a:	685a      	ldr	r2, [r3, #4]
 800613c:	bb62      	cbnz	r2, 8006198 <_malloc_r+0xdc>
 800613e:	f8c8 7000 	str.w	r7, [r8]
 8006142:	e00f      	b.n	8006164 <_malloc_r+0xa8>
 8006144:	6822      	ldr	r2, [r4, #0]
 8006146:	1b52      	subs	r2, r2, r5
 8006148:	d420      	bmi.n	800618c <_malloc_r+0xd0>
 800614a:	2a0b      	cmp	r2, #11
 800614c:	d917      	bls.n	800617e <_malloc_r+0xc2>
 800614e:	1961      	adds	r1, r4, r5
 8006150:	42a3      	cmp	r3, r4
 8006152:	6025      	str	r5, [r4, #0]
 8006154:	bf18      	it	ne
 8006156:	6059      	strne	r1, [r3, #4]
 8006158:	6863      	ldr	r3, [r4, #4]
 800615a:	bf08      	it	eq
 800615c:	f8c8 1000 	streq.w	r1, [r8]
 8006160:	5162      	str	r2, [r4, r5]
 8006162:	604b      	str	r3, [r1, #4]
 8006164:	4630      	mov	r0, r6
 8006166:	f000 f82f 	bl	80061c8 <__malloc_unlock>
 800616a:	f104 000b 	add.w	r0, r4, #11
 800616e:	1d23      	adds	r3, r4, #4
 8006170:	f020 0007 	bic.w	r0, r0, #7
 8006174:	1ac2      	subs	r2, r0, r3
 8006176:	bf1c      	itt	ne
 8006178:	1a1b      	subne	r3, r3, r0
 800617a:	50a3      	strne	r3, [r4, r2]
 800617c:	e7af      	b.n	80060de <_malloc_r+0x22>
 800617e:	6862      	ldr	r2, [r4, #4]
 8006180:	42a3      	cmp	r3, r4
 8006182:	bf0c      	ite	eq
 8006184:	f8c8 2000 	streq.w	r2, [r8]
 8006188:	605a      	strne	r2, [r3, #4]
 800618a:	e7eb      	b.n	8006164 <_malloc_r+0xa8>
 800618c:	4623      	mov	r3, r4
 800618e:	6864      	ldr	r4, [r4, #4]
 8006190:	e7ae      	b.n	80060f0 <_malloc_r+0x34>
 8006192:	463c      	mov	r4, r7
 8006194:	687f      	ldr	r7, [r7, #4]
 8006196:	e7b6      	b.n	8006106 <_malloc_r+0x4a>
 8006198:	461a      	mov	r2, r3
 800619a:	685b      	ldr	r3, [r3, #4]
 800619c:	42a3      	cmp	r3, r4
 800619e:	d1fb      	bne.n	8006198 <_malloc_r+0xdc>
 80061a0:	2300      	movs	r3, #0
 80061a2:	6053      	str	r3, [r2, #4]
 80061a4:	e7de      	b.n	8006164 <_malloc_r+0xa8>
 80061a6:	230c      	movs	r3, #12
 80061a8:	6033      	str	r3, [r6, #0]
 80061aa:	4630      	mov	r0, r6
 80061ac:	f000 f80c 	bl	80061c8 <__malloc_unlock>
 80061b0:	e794      	b.n	80060dc <_malloc_r+0x20>
 80061b2:	6005      	str	r5, [r0, #0]
 80061b4:	e7d6      	b.n	8006164 <_malloc_r+0xa8>
 80061b6:	bf00      	nop
 80061b8:	20000370 	.word	0x20000370

080061bc <__malloc_lock>:
 80061bc:	4801      	ldr	r0, [pc, #4]	@ (80061c4 <__malloc_lock+0x8>)
 80061be:	f000 be52 	b.w	8006e66 <__retarget_lock_acquire_recursive>
 80061c2:	bf00      	nop
 80061c4:	200004b4 	.word	0x200004b4

080061c8 <__malloc_unlock>:
 80061c8:	4801      	ldr	r0, [pc, #4]	@ (80061d0 <__malloc_unlock+0x8>)
 80061ca:	f000 be4d 	b.w	8006e68 <__retarget_lock_release_recursive>
 80061ce:	bf00      	nop
 80061d0:	200004b4 	.word	0x200004b4

080061d4 <__cvt>:
 80061d4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80061d8:	ec57 6b10 	vmov	r6, r7, d0
 80061dc:	2f00      	cmp	r7, #0
 80061de:	460c      	mov	r4, r1
 80061e0:	4619      	mov	r1, r3
 80061e2:	463b      	mov	r3, r7
 80061e4:	bfbb      	ittet	lt
 80061e6:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 80061ea:	461f      	movlt	r7, r3
 80061ec:	2300      	movge	r3, #0
 80061ee:	232d      	movlt	r3, #45	@ 0x2d
 80061f0:	700b      	strb	r3, [r1, #0]
 80061f2:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80061f4:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 80061f8:	4691      	mov	r9, r2
 80061fa:	f023 0820 	bic.w	r8, r3, #32
 80061fe:	bfbc      	itt	lt
 8006200:	4632      	movlt	r2, r6
 8006202:	4616      	movlt	r6, r2
 8006204:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8006208:	d005      	beq.n	8006216 <__cvt+0x42>
 800620a:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 800620e:	d100      	bne.n	8006212 <__cvt+0x3e>
 8006210:	3401      	adds	r4, #1
 8006212:	2102      	movs	r1, #2
 8006214:	e000      	b.n	8006218 <__cvt+0x44>
 8006216:	2103      	movs	r1, #3
 8006218:	ab03      	add	r3, sp, #12
 800621a:	9301      	str	r3, [sp, #4]
 800621c:	ab02      	add	r3, sp, #8
 800621e:	9300      	str	r3, [sp, #0]
 8006220:	ec47 6b10 	vmov	d0, r6, r7
 8006224:	4653      	mov	r3, sl
 8006226:	4622      	mov	r2, r4
 8006228:	f000 feb6 	bl	8006f98 <_dtoa_r>
 800622c:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 8006230:	4605      	mov	r5, r0
 8006232:	d119      	bne.n	8006268 <__cvt+0x94>
 8006234:	f019 0f01 	tst.w	r9, #1
 8006238:	d00e      	beq.n	8006258 <__cvt+0x84>
 800623a:	eb00 0904 	add.w	r9, r0, r4
 800623e:	2200      	movs	r2, #0
 8006240:	2300      	movs	r3, #0
 8006242:	4630      	mov	r0, r6
 8006244:	4639      	mov	r1, r7
 8006246:	f7fa fc5f 	bl	8000b08 <__aeabi_dcmpeq>
 800624a:	b108      	cbz	r0, 8006250 <__cvt+0x7c>
 800624c:	f8cd 900c 	str.w	r9, [sp, #12]
 8006250:	2230      	movs	r2, #48	@ 0x30
 8006252:	9b03      	ldr	r3, [sp, #12]
 8006254:	454b      	cmp	r3, r9
 8006256:	d31e      	bcc.n	8006296 <__cvt+0xc2>
 8006258:	9b03      	ldr	r3, [sp, #12]
 800625a:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800625c:	1b5b      	subs	r3, r3, r5
 800625e:	4628      	mov	r0, r5
 8006260:	6013      	str	r3, [r2, #0]
 8006262:	b004      	add	sp, #16
 8006264:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006268:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 800626c:	eb00 0904 	add.w	r9, r0, r4
 8006270:	d1e5      	bne.n	800623e <__cvt+0x6a>
 8006272:	7803      	ldrb	r3, [r0, #0]
 8006274:	2b30      	cmp	r3, #48	@ 0x30
 8006276:	d10a      	bne.n	800628e <__cvt+0xba>
 8006278:	2200      	movs	r2, #0
 800627a:	2300      	movs	r3, #0
 800627c:	4630      	mov	r0, r6
 800627e:	4639      	mov	r1, r7
 8006280:	f7fa fc42 	bl	8000b08 <__aeabi_dcmpeq>
 8006284:	b918      	cbnz	r0, 800628e <__cvt+0xba>
 8006286:	f1c4 0401 	rsb	r4, r4, #1
 800628a:	f8ca 4000 	str.w	r4, [sl]
 800628e:	f8da 3000 	ldr.w	r3, [sl]
 8006292:	4499      	add	r9, r3
 8006294:	e7d3      	b.n	800623e <__cvt+0x6a>
 8006296:	1c59      	adds	r1, r3, #1
 8006298:	9103      	str	r1, [sp, #12]
 800629a:	701a      	strb	r2, [r3, #0]
 800629c:	e7d9      	b.n	8006252 <__cvt+0x7e>

0800629e <__exponent>:
 800629e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80062a0:	2900      	cmp	r1, #0
 80062a2:	bfba      	itte	lt
 80062a4:	4249      	neglt	r1, r1
 80062a6:	232d      	movlt	r3, #45	@ 0x2d
 80062a8:	232b      	movge	r3, #43	@ 0x2b
 80062aa:	2909      	cmp	r1, #9
 80062ac:	7002      	strb	r2, [r0, #0]
 80062ae:	7043      	strb	r3, [r0, #1]
 80062b0:	dd29      	ble.n	8006306 <__exponent+0x68>
 80062b2:	f10d 0307 	add.w	r3, sp, #7
 80062b6:	461d      	mov	r5, r3
 80062b8:	270a      	movs	r7, #10
 80062ba:	461a      	mov	r2, r3
 80062bc:	fbb1 f6f7 	udiv	r6, r1, r7
 80062c0:	fb07 1416 	mls	r4, r7, r6, r1
 80062c4:	3430      	adds	r4, #48	@ 0x30
 80062c6:	f802 4c01 	strb.w	r4, [r2, #-1]
 80062ca:	460c      	mov	r4, r1
 80062cc:	2c63      	cmp	r4, #99	@ 0x63
 80062ce:	f103 33ff 	add.w	r3, r3, #4294967295	@ 0xffffffff
 80062d2:	4631      	mov	r1, r6
 80062d4:	dcf1      	bgt.n	80062ba <__exponent+0x1c>
 80062d6:	3130      	adds	r1, #48	@ 0x30
 80062d8:	1e94      	subs	r4, r2, #2
 80062da:	f803 1c01 	strb.w	r1, [r3, #-1]
 80062de:	1c41      	adds	r1, r0, #1
 80062e0:	4623      	mov	r3, r4
 80062e2:	42ab      	cmp	r3, r5
 80062e4:	d30a      	bcc.n	80062fc <__exponent+0x5e>
 80062e6:	f10d 0309 	add.w	r3, sp, #9
 80062ea:	1a9b      	subs	r3, r3, r2
 80062ec:	42ac      	cmp	r4, r5
 80062ee:	bf88      	it	hi
 80062f0:	2300      	movhi	r3, #0
 80062f2:	3302      	adds	r3, #2
 80062f4:	4403      	add	r3, r0
 80062f6:	1a18      	subs	r0, r3, r0
 80062f8:	b003      	add	sp, #12
 80062fa:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80062fc:	f813 6b01 	ldrb.w	r6, [r3], #1
 8006300:	f801 6f01 	strb.w	r6, [r1, #1]!
 8006304:	e7ed      	b.n	80062e2 <__exponent+0x44>
 8006306:	2330      	movs	r3, #48	@ 0x30
 8006308:	3130      	adds	r1, #48	@ 0x30
 800630a:	7083      	strb	r3, [r0, #2]
 800630c:	70c1      	strb	r1, [r0, #3]
 800630e:	1d03      	adds	r3, r0, #4
 8006310:	e7f1      	b.n	80062f6 <__exponent+0x58>
	...

08006314 <_printf_float>:
 8006314:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006318:	b08d      	sub	sp, #52	@ 0x34
 800631a:	460c      	mov	r4, r1
 800631c:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 8006320:	4616      	mov	r6, r2
 8006322:	461f      	mov	r7, r3
 8006324:	4605      	mov	r5, r0
 8006326:	f000 fd0b 	bl	8006d40 <_localeconv_r>
 800632a:	6803      	ldr	r3, [r0, #0]
 800632c:	9304      	str	r3, [sp, #16]
 800632e:	4618      	mov	r0, r3
 8006330:	f7f9 ffbe 	bl	80002b0 <strlen>
 8006334:	2300      	movs	r3, #0
 8006336:	930a      	str	r3, [sp, #40]	@ 0x28
 8006338:	f8d8 3000 	ldr.w	r3, [r8]
 800633c:	9005      	str	r0, [sp, #20]
 800633e:	3307      	adds	r3, #7
 8006340:	f023 0307 	bic.w	r3, r3, #7
 8006344:	f103 0208 	add.w	r2, r3, #8
 8006348:	f894 a018 	ldrb.w	sl, [r4, #24]
 800634c:	f8d4 b000 	ldr.w	fp, [r4]
 8006350:	f8c8 2000 	str.w	r2, [r8]
 8006354:	e9d3 8900 	ldrd	r8, r9, [r3]
 8006358:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 800635c:	9307      	str	r3, [sp, #28]
 800635e:	f8cd 8018 	str.w	r8, [sp, #24]
 8006362:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 8006366:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800636a:	4b9c      	ldr	r3, [pc, #624]	@ (80065dc <_printf_float+0x2c8>)
 800636c:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8006370:	f7fa fbfc 	bl	8000b6c <__aeabi_dcmpun>
 8006374:	bb70      	cbnz	r0, 80063d4 <_printf_float+0xc0>
 8006376:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800637a:	4b98      	ldr	r3, [pc, #608]	@ (80065dc <_printf_float+0x2c8>)
 800637c:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8006380:	f7fa fbd6 	bl	8000b30 <__aeabi_dcmple>
 8006384:	bb30      	cbnz	r0, 80063d4 <_printf_float+0xc0>
 8006386:	2200      	movs	r2, #0
 8006388:	2300      	movs	r3, #0
 800638a:	4640      	mov	r0, r8
 800638c:	4649      	mov	r1, r9
 800638e:	f7fa fbc5 	bl	8000b1c <__aeabi_dcmplt>
 8006392:	b110      	cbz	r0, 800639a <_printf_float+0x86>
 8006394:	232d      	movs	r3, #45	@ 0x2d
 8006396:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800639a:	4a91      	ldr	r2, [pc, #580]	@ (80065e0 <_printf_float+0x2cc>)
 800639c:	4b91      	ldr	r3, [pc, #580]	@ (80065e4 <_printf_float+0x2d0>)
 800639e:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 80063a2:	bf94      	ite	ls
 80063a4:	4690      	movls	r8, r2
 80063a6:	4698      	movhi	r8, r3
 80063a8:	2303      	movs	r3, #3
 80063aa:	6123      	str	r3, [r4, #16]
 80063ac:	f02b 0304 	bic.w	r3, fp, #4
 80063b0:	6023      	str	r3, [r4, #0]
 80063b2:	f04f 0900 	mov.w	r9, #0
 80063b6:	9700      	str	r7, [sp, #0]
 80063b8:	4633      	mov	r3, r6
 80063ba:	aa0b      	add	r2, sp, #44	@ 0x2c
 80063bc:	4621      	mov	r1, r4
 80063be:	4628      	mov	r0, r5
 80063c0:	f000 f9d2 	bl	8006768 <_printf_common>
 80063c4:	3001      	adds	r0, #1
 80063c6:	f040 808d 	bne.w	80064e4 <_printf_float+0x1d0>
 80063ca:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80063ce:	b00d      	add	sp, #52	@ 0x34
 80063d0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80063d4:	4642      	mov	r2, r8
 80063d6:	464b      	mov	r3, r9
 80063d8:	4640      	mov	r0, r8
 80063da:	4649      	mov	r1, r9
 80063dc:	f7fa fbc6 	bl	8000b6c <__aeabi_dcmpun>
 80063e0:	b140      	cbz	r0, 80063f4 <_printf_float+0xe0>
 80063e2:	464b      	mov	r3, r9
 80063e4:	2b00      	cmp	r3, #0
 80063e6:	bfbc      	itt	lt
 80063e8:	232d      	movlt	r3, #45	@ 0x2d
 80063ea:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 80063ee:	4a7e      	ldr	r2, [pc, #504]	@ (80065e8 <_printf_float+0x2d4>)
 80063f0:	4b7e      	ldr	r3, [pc, #504]	@ (80065ec <_printf_float+0x2d8>)
 80063f2:	e7d4      	b.n	800639e <_printf_float+0x8a>
 80063f4:	6863      	ldr	r3, [r4, #4]
 80063f6:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 80063fa:	9206      	str	r2, [sp, #24]
 80063fc:	1c5a      	adds	r2, r3, #1
 80063fe:	d13b      	bne.n	8006478 <_printf_float+0x164>
 8006400:	2306      	movs	r3, #6
 8006402:	6063      	str	r3, [r4, #4]
 8006404:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 8006408:	2300      	movs	r3, #0
 800640a:	6022      	str	r2, [r4, #0]
 800640c:	9303      	str	r3, [sp, #12]
 800640e:	ab0a      	add	r3, sp, #40	@ 0x28
 8006410:	e9cd a301 	strd	sl, r3, [sp, #4]
 8006414:	ab09      	add	r3, sp, #36	@ 0x24
 8006416:	9300      	str	r3, [sp, #0]
 8006418:	6861      	ldr	r1, [r4, #4]
 800641a:	ec49 8b10 	vmov	d0, r8, r9
 800641e:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 8006422:	4628      	mov	r0, r5
 8006424:	f7ff fed6 	bl	80061d4 <__cvt>
 8006428:	9b06      	ldr	r3, [sp, #24]
 800642a:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800642c:	2b47      	cmp	r3, #71	@ 0x47
 800642e:	4680      	mov	r8, r0
 8006430:	d129      	bne.n	8006486 <_printf_float+0x172>
 8006432:	1cc8      	adds	r0, r1, #3
 8006434:	db02      	blt.n	800643c <_printf_float+0x128>
 8006436:	6863      	ldr	r3, [r4, #4]
 8006438:	4299      	cmp	r1, r3
 800643a:	dd41      	ble.n	80064c0 <_printf_float+0x1ac>
 800643c:	f1aa 0a02 	sub.w	sl, sl, #2
 8006440:	fa5f fa8a 	uxtb.w	sl, sl
 8006444:	3901      	subs	r1, #1
 8006446:	4652      	mov	r2, sl
 8006448:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 800644c:	9109      	str	r1, [sp, #36]	@ 0x24
 800644e:	f7ff ff26 	bl	800629e <__exponent>
 8006452:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8006454:	1813      	adds	r3, r2, r0
 8006456:	2a01      	cmp	r2, #1
 8006458:	4681      	mov	r9, r0
 800645a:	6123      	str	r3, [r4, #16]
 800645c:	dc02      	bgt.n	8006464 <_printf_float+0x150>
 800645e:	6822      	ldr	r2, [r4, #0]
 8006460:	07d2      	lsls	r2, r2, #31
 8006462:	d501      	bpl.n	8006468 <_printf_float+0x154>
 8006464:	3301      	adds	r3, #1
 8006466:	6123      	str	r3, [r4, #16]
 8006468:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 800646c:	2b00      	cmp	r3, #0
 800646e:	d0a2      	beq.n	80063b6 <_printf_float+0xa2>
 8006470:	232d      	movs	r3, #45	@ 0x2d
 8006472:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8006476:	e79e      	b.n	80063b6 <_printf_float+0xa2>
 8006478:	9a06      	ldr	r2, [sp, #24]
 800647a:	2a47      	cmp	r2, #71	@ 0x47
 800647c:	d1c2      	bne.n	8006404 <_printf_float+0xf0>
 800647e:	2b00      	cmp	r3, #0
 8006480:	d1c0      	bne.n	8006404 <_printf_float+0xf0>
 8006482:	2301      	movs	r3, #1
 8006484:	e7bd      	b.n	8006402 <_printf_float+0xee>
 8006486:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800648a:	d9db      	bls.n	8006444 <_printf_float+0x130>
 800648c:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 8006490:	d118      	bne.n	80064c4 <_printf_float+0x1b0>
 8006492:	2900      	cmp	r1, #0
 8006494:	6863      	ldr	r3, [r4, #4]
 8006496:	dd0b      	ble.n	80064b0 <_printf_float+0x19c>
 8006498:	6121      	str	r1, [r4, #16]
 800649a:	b913      	cbnz	r3, 80064a2 <_printf_float+0x18e>
 800649c:	6822      	ldr	r2, [r4, #0]
 800649e:	07d0      	lsls	r0, r2, #31
 80064a0:	d502      	bpl.n	80064a8 <_printf_float+0x194>
 80064a2:	3301      	adds	r3, #1
 80064a4:	440b      	add	r3, r1
 80064a6:	6123      	str	r3, [r4, #16]
 80064a8:	65a1      	str	r1, [r4, #88]	@ 0x58
 80064aa:	f04f 0900 	mov.w	r9, #0
 80064ae:	e7db      	b.n	8006468 <_printf_float+0x154>
 80064b0:	b913      	cbnz	r3, 80064b8 <_printf_float+0x1a4>
 80064b2:	6822      	ldr	r2, [r4, #0]
 80064b4:	07d2      	lsls	r2, r2, #31
 80064b6:	d501      	bpl.n	80064bc <_printf_float+0x1a8>
 80064b8:	3302      	adds	r3, #2
 80064ba:	e7f4      	b.n	80064a6 <_printf_float+0x192>
 80064bc:	2301      	movs	r3, #1
 80064be:	e7f2      	b.n	80064a6 <_printf_float+0x192>
 80064c0:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 80064c4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80064c6:	4299      	cmp	r1, r3
 80064c8:	db05      	blt.n	80064d6 <_printf_float+0x1c2>
 80064ca:	6823      	ldr	r3, [r4, #0]
 80064cc:	6121      	str	r1, [r4, #16]
 80064ce:	07d8      	lsls	r0, r3, #31
 80064d0:	d5ea      	bpl.n	80064a8 <_printf_float+0x194>
 80064d2:	1c4b      	adds	r3, r1, #1
 80064d4:	e7e7      	b.n	80064a6 <_printf_float+0x192>
 80064d6:	2900      	cmp	r1, #0
 80064d8:	bfd4      	ite	le
 80064da:	f1c1 0202 	rsble	r2, r1, #2
 80064de:	2201      	movgt	r2, #1
 80064e0:	4413      	add	r3, r2
 80064e2:	e7e0      	b.n	80064a6 <_printf_float+0x192>
 80064e4:	6823      	ldr	r3, [r4, #0]
 80064e6:	055a      	lsls	r2, r3, #21
 80064e8:	d407      	bmi.n	80064fa <_printf_float+0x1e6>
 80064ea:	6923      	ldr	r3, [r4, #16]
 80064ec:	4642      	mov	r2, r8
 80064ee:	4631      	mov	r1, r6
 80064f0:	4628      	mov	r0, r5
 80064f2:	47b8      	blx	r7
 80064f4:	3001      	adds	r0, #1
 80064f6:	d12b      	bne.n	8006550 <_printf_float+0x23c>
 80064f8:	e767      	b.n	80063ca <_printf_float+0xb6>
 80064fa:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 80064fe:	f240 80dd 	bls.w	80066bc <_printf_float+0x3a8>
 8006502:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8006506:	2200      	movs	r2, #0
 8006508:	2300      	movs	r3, #0
 800650a:	f7fa fafd 	bl	8000b08 <__aeabi_dcmpeq>
 800650e:	2800      	cmp	r0, #0
 8006510:	d033      	beq.n	800657a <_printf_float+0x266>
 8006512:	4a37      	ldr	r2, [pc, #220]	@ (80065f0 <_printf_float+0x2dc>)
 8006514:	2301      	movs	r3, #1
 8006516:	4631      	mov	r1, r6
 8006518:	4628      	mov	r0, r5
 800651a:	47b8      	blx	r7
 800651c:	3001      	adds	r0, #1
 800651e:	f43f af54 	beq.w	80063ca <_printf_float+0xb6>
 8006522:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 8006526:	4543      	cmp	r3, r8
 8006528:	db02      	blt.n	8006530 <_printf_float+0x21c>
 800652a:	6823      	ldr	r3, [r4, #0]
 800652c:	07d8      	lsls	r0, r3, #31
 800652e:	d50f      	bpl.n	8006550 <_printf_float+0x23c>
 8006530:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8006534:	4631      	mov	r1, r6
 8006536:	4628      	mov	r0, r5
 8006538:	47b8      	blx	r7
 800653a:	3001      	adds	r0, #1
 800653c:	f43f af45 	beq.w	80063ca <_printf_float+0xb6>
 8006540:	f04f 0900 	mov.w	r9, #0
 8006544:	f108 38ff 	add.w	r8, r8, #4294967295	@ 0xffffffff
 8006548:	f104 0a1a 	add.w	sl, r4, #26
 800654c:	45c8      	cmp	r8, r9
 800654e:	dc09      	bgt.n	8006564 <_printf_float+0x250>
 8006550:	6823      	ldr	r3, [r4, #0]
 8006552:	079b      	lsls	r3, r3, #30
 8006554:	f100 8103 	bmi.w	800675e <_printf_float+0x44a>
 8006558:	68e0      	ldr	r0, [r4, #12]
 800655a:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800655c:	4298      	cmp	r0, r3
 800655e:	bfb8      	it	lt
 8006560:	4618      	movlt	r0, r3
 8006562:	e734      	b.n	80063ce <_printf_float+0xba>
 8006564:	2301      	movs	r3, #1
 8006566:	4652      	mov	r2, sl
 8006568:	4631      	mov	r1, r6
 800656a:	4628      	mov	r0, r5
 800656c:	47b8      	blx	r7
 800656e:	3001      	adds	r0, #1
 8006570:	f43f af2b 	beq.w	80063ca <_printf_float+0xb6>
 8006574:	f109 0901 	add.w	r9, r9, #1
 8006578:	e7e8      	b.n	800654c <_printf_float+0x238>
 800657a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800657c:	2b00      	cmp	r3, #0
 800657e:	dc39      	bgt.n	80065f4 <_printf_float+0x2e0>
 8006580:	4a1b      	ldr	r2, [pc, #108]	@ (80065f0 <_printf_float+0x2dc>)
 8006582:	2301      	movs	r3, #1
 8006584:	4631      	mov	r1, r6
 8006586:	4628      	mov	r0, r5
 8006588:	47b8      	blx	r7
 800658a:	3001      	adds	r0, #1
 800658c:	f43f af1d 	beq.w	80063ca <_printf_float+0xb6>
 8006590:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 8006594:	ea59 0303 	orrs.w	r3, r9, r3
 8006598:	d102      	bne.n	80065a0 <_printf_float+0x28c>
 800659a:	6823      	ldr	r3, [r4, #0]
 800659c:	07d9      	lsls	r1, r3, #31
 800659e:	d5d7      	bpl.n	8006550 <_printf_float+0x23c>
 80065a0:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80065a4:	4631      	mov	r1, r6
 80065a6:	4628      	mov	r0, r5
 80065a8:	47b8      	blx	r7
 80065aa:	3001      	adds	r0, #1
 80065ac:	f43f af0d 	beq.w	80063ca <_printf_float+0xb6>
 80065b0:	f04f 0a00 	mov.w	sl, #0
 80065b4:	f104 0b1a 	add.w	fp, r4, #26
 80065b8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80065ba:	425b      	negs	r3, r3
 80065bc:	4553      	cmp	r3, sl
 80065be:	dc01      	bgt.n	80065c4 <_printf_float+0x2b0>
 80065c0:	464b      	mov	r3, r9
 80065c2:	e793      	b.n	80064ec <_printf_float+0x1d8>
 80065c4:	2301      	movs	r3, #1
 80065c6:	465a      	mov	r2, fp
 80065c8:	4631      	mov	r1, r6
 80065ca:	4628      	mov	r0, r5
 80065cc:	47b8      	blx	r7
 80065ce:	3001      	adds	r0, #1
 80065d0:	f43f aefb 	beq.w	80063ca <_printf_float+0xb6>
 80065d4:	f10a 0a01 	add.w	sl, sl, #1
 80065d8:	e7ee      	b.n	80065b8 <_printf_float+0x2a4>
 80065da:	bf00      	nop
 80065dc:	7fefffff 	.word	0x7fefffff
 80065e0:	08008de4 	.word	0x08008de4
 80065e4:	08008de8 	.word	0x08008de8
 80065e8:	08008dec 	.word	0x08008dec
 80065ec:	08008df0 	.word	0x08008df0
 80065f0:	08008df4 	.word	0x08008df4
 80065f4:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 80065f6:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 80065fa:	4553      	cmp	r3, sl
 80065fc:	bfa8      	it	ge
 80065fe:	4653      	movge	r3, sl
 8006600:	2b00      	cmp	r3, #0
 8006602:	4699      	mov	r9, r3
 8006604:	dc36      	bgt.n	8006674 <_printf_float+0x360>
 8006606:	f04f 0b00 	mov.w	fp, #0
 800660a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800660e:	f104 021a 	add.w	r2, r4, #26
 8006612:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8006614:	9306      	str	r3, [sp, #24]
 8006616:	eba3 0309 	sub.w	r3, r3, r9
 800661a:	455b      	cmp	r3, fp
 800661c:	dc31      	bgt.n	8006682 <_printf_float+0x36e>
 800661e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006620:	459a      	cmp	sl, r3
 8006622:	dc3a      	bgt.n	800669a <_printf_float+0x386>
 8006624:	6823      	ldr	r3, [r4, #0]
 8006626:	07da      	lsls	r2, r3, #31
 8006628:	d437      	bmi.n	800669a <_printf_float+0x386>
 800662a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800662c:	ebaa 0903 	sub.w	r9, sl, r3
 8006630:	9b06      	ldr	r3, [sp, #24]
 8006632:	ebaa 0303 	sub.w	r3, sl, r3
 8006636:	4599      	cmp	r9, r3
 8006638:	bfa8      	it	ge
 800663a:	4699      	movge	r9, r3
 800663c:	f1b9 0f00 	cmp.w	r9, #0
 8006640:	dc33      	bgt.n	80066aa <_printf_float+0x396>
 8006642:	f04f 0800 	mov.w	r8, #0
 8006646:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800664a:	f104 0b1a 	add.w	fp, r4, #26
 800664e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006650:	ebaa 0303 	sub.w	r3, sl, r3
 8006654:	eba3 0309 	sub.w	r3, r3, r9
 8006658:	4543      	cmp	r3, r8
 800665a:	f77f af79 	ble.w	8006550 <_printf_float+0x23c>
 800665e:	2301      	movs	r3, #1
 8006660:	465a      	mov	r2, fp
 8006662:	4631      	mov	r1, r6
 8006664:	4628      	mov	r0, r5
 8006666:	47b8      	blx	r7
 8006668:	3001      	adds	r0, #1
 800666a:	f43f aeae 	beq.w	80063ca <_printf_float+0xb6>
 800666e:	f108 0801 	add.w	r8, r8, #1
 8006672:	e7ec      	b.n	800664e <_printf_float+0x33a>
 8006674:	4642      	mov	r2, r8
 8006676:	4631      	mov	r1, r6
 8006678:	4628      	mov	r0, r5
 800667a:	47b8      	blx	r7
 800667c:	3001      	adds	r0, #1
 800667e:	d1c2      	bne.n	8006606 <_printf_float+0x2f2>
 8006680:	e6a3      	b.n	80063ca <_printf_float+0xb6>
 8006682:	2301      	movs	r3, #1
 8006684:	4631      	mov	r1, r6
 8006686:	4628      	mov	r0, r5
 8006688:	9206      	str	r2, [sp, #24]
 800668a:	47b8      	blx	r7
 800668c:	3001      	adds	r0, #1
 800668e:	f43f ae9c 	beq.w	80063ca <_printf_float+0xb6>
 8006692:	9a06      	ldr	r2, [sp, #24]
 8006694:	f10b 0b01 	add.w	fp, fp, #1
 8006698:	e7bb      	b.n	8006612 <_printf_float+0x2fe>
 800669a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800669e:	4631      	mov	r1, r6
 80066a0:	4628      	mov	r0, r5
 80066a2:	47b8      	blx	r7
 80066a4:	3001      	adds	r0, #1
 80066a6:	d1c0      	bne.n	800662a <_printf_float+0x316>
 80066a8:	e68f      	b.n	80063ca <_printf_float+0xb6>
 80066aa:	9a06      	ldr	r2, [sp, #24]
 80066ac:	464b      	mov	r3, r9
 80066ae:	4442      	add	r2, r8
 80066b0:	4631      	mov	r1, r6
 80066b2:	4628      	mov	r0, r5
 80066b4:	47b8      	blx	r7
 80066b6:	3001      	adds	r0, #1
 80066b8:	d1c3      	bne.n	8006642 <_printf_float+0x32e>
 80066ba:	e686      	b.n	80063ca <_printf_float+0xb6>
 80066bc:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 80066c0:	f1ba 0f01 	cmp.w	sl, #1
 80066c4:	dc01      	bgt.n	80066ca <_printf_float+0x3b6>
 80066c6:	07db      	lsls	r3, r3, #31
 80066c8:	d536      	bpl.n	8006738 <_printf_float+0x424>
 80066ca:	2301      	movs	r3, #1
 80066cc:	4642      	mov	r2, r8
 80066ce:	4631      	mov	r1, r6
 80066d0:	4628      	mov	r0, r5
 80066d2:	47b8      	blx	r7
 80066d4:	3001      	adds	r0, #1
 80066d6:	f43f ae78 	beq.w	80063ca <_printf_float+0xb6>
 80066da:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80066de:	4631      	mov	r1, r6
 80066e0:	4628      	mov	r0, r5
 80066e2:	47b8      	blx	r7
 80066e4:	3001      	adds	r0, #1
 80066e6:	f43f ae70 	beq.w	80063ca <_printf_float+0xb6>
 80066ea:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 80066ee:	2200      	movs	r2, #0
 80066f0:	2300      	movs	r3, #0
 80066f2:	f10a 3aff 	add.w	sl, sl, #4294967295	@ 0xffffffff
 80066f6:	f7fa fa07 	bl	8000b08 <__aeabi_dcmpeq>
 80066fa:	b9c0      	cbnz	r0, 800672e <_printf_float+0x41a>
 80066fc:	4653      	mov	r3, sl
 80066fe:	f108 0201 	add.w	r2, r8, #1
 8006702:	4631      	mov	r1, r6
 8006704:	4628      	mov	r0, r5
 8006706:	47b8      	blx	r7
 8006708:	3001      	adds	r0, #1
 800670a:	d10c      	bne.n	8006726 <_printf_float+0x412>
 800670c:	e65d      	b.n	80063ca <_printf_float+0xb6>
 800670e:	2301      	movs	r3, #1
 8006710:	465a      	mov	r2, fp
 8006712:	4631      	mov	r1, r6
 8006714:	4628      	mov	r0, r5
 8006716:	47b8      	blx	r7
 8006718:	3001      	adds	r0, #1
 800671a:	f43f ae56 	beq.w	80063ca <_printf_float+0xb6>
 800671e:	f108 0801 	add.w	r8, r8, #1
 8006722:	45d0      	cmp	r8, sl
 8006724:	dbf3      	blt.n	800670e <_printf_float+0x3fa>
 8006726:	464b      	mov	r3, r9
 8006728:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 800672c:	e6df      	b.n	80064ee <_printf_float+0x1da>
 800672e:	f04f 0800 	mov.w	r8, #0
 8006732:	f104 0b1a 	add.w	fp, r4, #26
 8006736:	e7f4      	b.n	8006722 <_printf_float+0x40e>
 8006738:	2301      	movs	r3, #1
 800673a:	4642      	mov	r2, r8
 800673c:	e7e1      	b.n	8006702 <_printf_float+0x3ee>
 800673e:	2301      	movs	r3, #1
 8006740:	464a      	mov	r2, r9
 8006742:	4631      	mov	r1, r6
 8006744:	4628      	mov	r0, r5
 8006746:	47b8      	blx	r7
 8006748:	3001      	adds	r0, #1
 800674a:	f43f ae3e 	beq.w	80063ca <_printf_float+0xb6>
 800674e:	f108 0801 	add.w	r8, r8, #1
 8006752:	68e3      	ldr	r3, [r4, #12]
 8006754:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8006756:	1a5b      	subs	r3, r3, r1
 8006758:	4543      	cmp	r3, r8
 800675a:	dcf0      	bgt.n	800673e <_printf_float+0x42a>
 800675c:	e6fc      	b.n	8006558 <_printf_float+0x244>
 800675e:	f04f 0800 	mov.w	r8, #0
 8006762:	f104 0919 	add.w	r9, r4, #25
 8006766:	e7f4      	b.n	8006752 <_printf_float+0x43e>

08006768 <_printf_common>:
 8006768:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800676c:	4616      	mov	r6, r2
 800676e:	4698      	mov	r8, r3
 8006770:	688a      	ldr	r2, [r1, #8]
 8006772:	690b      	ldr	r3, [r1, #16]
 8006774:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8006778:	4293      	cmp	r3, r2
 800677a:	bfb8      	it	lt
 800677c:	4613      	movlt	r3, r2
 800677e:	6033      	str	r3, [r6, #0]
 8006780:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8006784:	4607      	mov	r7, r0
 8006786:	460c      	mov	r4, r1
 8006788:	b10a      	cbz	r2, 800678e <_printf_common+0x26>
 800678a:	3301      	adds	r3, #1
 800678c:	6033      	str	r3, [r6, #0]
 800678e:	6823      	ldr	r3, [r4, #0]
 8006790:	0699      	lsls	r1, r3, #26
 8006792:	bf42      	ittt	mi
 8006794:	6833      	ldrmi	r3, [r6, #0]
 8006796:	3302      	addmi	r3, #2
 8006798:	6033      	strmi	r3, [r6, #0]
 800679a:	6825      	ldr	r5, [r4, #0]
 800679c:	f015 0506 	ands.w	r5, r5, #6
 80067a0:	d106      	bne.n	80067b0 <_printf_common+0x48>
 80067a2:	f104 0a19 	add.w	sl, r4, #25
 80067a6:	68e3      	ldr	r3, [r4, #12]
 80067a8:	6832      	ldr	r2, [r6, #0]
 80067aa:	1a9b      	subs	r3, r3, r2
 80067ac:	42ab      	cmp	r3, r5
 80067ae:	dc26      	bgt.n	80067fe <_printf_common+0x96>
 80067b0:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 80067b4:	6822      	ldr	r2, [r4, #0]
 80067b6:	3b00      	subs	r3, #0
 80067b8:	bf18      	it	ne
 80067ba:	2301      	movne	r3, #1
 80067bc:	0692      	lsls	r2, r2, #26
 80067be:	d42b      	bmi.n	8006818 <_printf_common+0xb0>
 80067c0:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 80067c4:	4641      	mov	r1, r8
 80067c6:	4638      	mov	r0, r7
 80067c8:	47c8      	blx	r9
 80067ca:	3001      	adds	r0, #1
 80067cc:	d01e      	beq.n	800680c <_printf_common+0xa4>
 80067ce:	6823      	ldr	r3, [r4, #0]
 80067d0:	6922      	ldr	r2, [r4, #16]
 80067d2:	f003 0306 	and.w	r3, r3, #6
 80067d6:	2b04      	cmp	r3, #4
 80067d8:	bf02      	ittt	eq
 80067da:	68e5      	ldreq	r5, [r4, #12]
 80067dc:	6833      	ldreq	r3, [r6, #0]
 80067de:	1aed      	subeq	r5, r5, r3
 80067e0:	68a3      	ldr	r3, [r4, #8]
 80067e2:	bf0c      	ite	eq
 80067e4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80067e8:	2500      	movne	r5, #0
 80067ea:	4293      	cmp	r3, r2
 80067ec:	bfc4      	itt	gt
 80067ee:	1a9b      	subgt	r3, r3, r2
 80067f0:	18ed      	addgt	r5, r5, r3
 80067f2:	2600      	movs	r6, #0
 80067f4:	341a      	adds	r4, #26
 80067f6:	42b5      	cmp	r5, r6
 80067f8:	d11a      	bne.n	8006830 <_printf_common+0xc8>
 80067fa:	2000      	movs	r0, #0
 80067fc:	e008      	b.n	8006810 <_printf_common+0xa8>
 80067fe:	2301      	movs	r3, #1
 8006800:	4652      	mov	r2, sl
 8006802:	4641      	mov	r1, r8
 8006804:	4638      	mov	r0, r7
 8006806:	47c8      	blx	r9
 8006808:	3001      	adds	r0, #1
 800680a:	d103      	bne.n	8006814 <_printf_common+0xac>
 800680c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8006810:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006814:	3501      	adds	r5, #1
 8006816:	e7c6      	b.n	80067a6 <_printf_common+0x3e>
 8006818:	18e1      	adds	r1, r4, r3
 800681a:	1c5a      	adds	r2, r3, #1
 800681c:	2030      	movs	r0, #48	@ 0x30
 800681e:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8006822:	4422      	add	r2, r4
 8006824:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8006828:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800682c:	3302      	adds	r3, #2
 800682e:	e7c7      	b.n	80067c0 <_printf_common+0x58>
 8006830:	2301      	movs	r3, #1
 8006832:	4622      	mov	r2, r4
 8006834:	4641      	mov	r1, r8
 8006836:	4638      	mov	r0, r7
 8006838:	47c8      	blx	r9
 800683a:	3001      	adds	r0, #1
 800683c:	d0e6      	beq.n	800680c <_printf_common+0xa4>
 800683e:	3601      	adds	r6, #1
 8006840:	e7d9      	b.n	80067f6 <_printf_common+0x8e>
	...

08006844 <_printf_i>:
 8006844:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006848:	7e0f      	ldrb	r7, [r1, #24]
 800684a:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800684c:	2f78      	cmp	r7, #120	@ 0x78
 800684e:	4691      	mov	r9, r2
 8006850:	4680      	mov	r8, r0
 8006852:	460c      	mov	r4, r1
 8006854:	469a      	mov	sl, r3
 8006856:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800685a:	d807      	bhi.n	800686c <_printf_i+0x28>
 800685c:	2f62      	cmp	r7, #98	@ 0x62
 800685e:	d80a      	bhi.n	8006876 <_printf_i+0x32>
 8006860:	2f00      	cmp	r7, #0
 8006862:	f000 80d2 	beq.w	8006a0a <_printf_i+0x1c6>
 8006866:	2f58      	cmp	r7, #88	@ 0x58
 8006868:	f000 80b9 	beq.w	80069de <_printf_i+0x19a>
 800686c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8006870:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8006874:	e03a      	b.n	80068ec <_printf_i+0xa8>
 8006876:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800687a:	2b15      	cmp	r3, #21
 800687c:	d8f6      	bhi.n	800686c <_printf_i+0x28>
 800687e:	a101      	add	r1, pc, #4	@ (adr r1, 8006884 <_printf_i+0x40>)
 8006880:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8006884:	080068dd 	.word	0x080068dd
 8006888:	080068f1 	.word	0x080068f1
 800688c:	0800686d 	.word	0x0800686d
 8006890:	0800686d 	.word	0x0800686d
 8006894:	0800686d 	.word	0x0800686d
 8006898:	0800686d 	.word	0x0800686d
 800689c:	080068f1 	.word	0x080068f1
 80068a0:	0800686d 	.word	0x0800686d
 80068a4:	0800686d 	.word	0x0800686d
 80068a8:	0800686d 	.word	0x0800686d
 80068ac:	0800686d 	.word	0x0800686d
 80068b0:	080069f1 	.word	0x080069f1
 80068b4:	0800691b 	.word	0x0800691b
 80068b8:	080069ab 	.word	0x080069ab
 80068bc:	0800686d 	.word	0x0800686d
 80068c0:	0800686d 	.word	0x0800686d
 80068c4:	08006a13 	.word	0x08006a13
 80068c8:	0800686d 	.word	0x0800686d
 80068cc:	0800691b 	.word	0x0800691b
 80068d0:	0800686d 	.word	0x0800686d
 80068d4:	0800686d 	.word	0x0800686d
 80068d8:	080069b3 	.word	0x080069b3
 80068dc:	6833      	ldr	r3, [r6, #0]
 80068de:	1d1a      	adds	r2, r3, #4
 80068e0:	681b      	ldr	r3, [r3, #0]
 80068e2:	6032      	str	r2, [r6, #0]
 80068e4:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80068e8:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 80068ec:	2301      	movs	r3, #1
 80068ee:	e09d      	b.n	8006a2c <_printf_i+0x1e8>
 80068f0:	6833      	ldr	r3, [r6, #0]
 80068f2:	6820      	ldr	r0, [r4, #0]
 80068f4:	1d19      	adds	r1, r3, #4
 80068f6:	6031      	str	r1, [r6, #0]
 80068f8:	0606      	lsls	r6, r0, #24
 80068fa:	d501      	bpl.n	8006900 <_printf_i+0xbc>
 80068fc:	681d      	ldr	r5, [r3, #0]
 80068fe:	e003      	b.n	8006908 <_printf_i+0xc4>
 8006900:	0645      	lsls	r5, r0, #25
 8006902:	d5fb      	bpl.n	80068fc <_printf_i+0xb8>
 8006904:	f9b3 5000 	ldrsh.w	r5, [r3]
 8006908:	2d00      	cmp	r5, #0
 800690a:	da03      	bge.n	8006914 <_printf_i+0xd0>
 800690c:	232d      	movs	r3, #45	@ 0x2d
 800690e:	426d      	negs	r5, r5
 8006910:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8006914:	4859      	ldr	r0, [pc, #356]	@ (8006a7c <_printf_i+0x238>)
 8006916:	230a      	movs	r3, #10
 8006918:	e011      	b.n	800693e <_printf_i+0xfa>
 800691a:	6821      	ldr	r1, [r4, #0]
 800691c:	6833      	ldr	r3, [r6, #0]
 800691e:	0608      	lsls	r0, r1, #24
 8006920:	f853 5b04 	ldr.w	r5, [r3], #4
 8006924:	d402      	bmi.n	800692c <_printf_i+0xe8>
 8006926:	0649      	lsls	r1, r1, #25
 8006928:	bf48      	it	mi
 800692a:	b2ad      	uxthmi	r5, r5
 800692c:	2f6f      	cmp	r7, #111	@ 0x6f
 800692e:	4853      	ldr	r0, [pc, #332]	@ (8006a7c <_printf_i+0x238>)
 8006930:	6033      	str	r3, [r6, #0]
 8006932:	bf14      	ite	ne
 8006934:	230a      	movne	r3, #10
 8006936:	2308      	moveq	r3, #8
 8006938:	2100      	movs	r1, #0
 800693a:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800693e:	6866      	ldr	r6, [r4, #4]
 8006940:	60a6      	str	r6, [r4, #8]
 8006942:	2e00      	cmp	r6, #0
 8006944:	bfa2      	ittt	ge
 8006946:	6821      	ldrge	r1, [r4, #0]
 8006948:	f021 0104 	bicge.w	r1, r1, #4
 800694c:	6021      	strge	r1, [r4, #0]
 800694e:	b90d      	cbnz	r5, 8006954 <_printf_i+0x110>
 8006950:	2e00      	cmp	r6, #0
 8006952:	d04b      	beq.n	80069ec <_printf_i+0x1a8>
 8006954:	4616      	mov	r6, r2
 8006956:	fbb5 f1f3 	udiv	r1, r5, r3
 800695a:	fb03 5711 	mls	r7, r3, r1, r5
 800695e:	5dc7      	ldrb	r7, [r0, r7]
 8006960:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8006964:	462f      	mov	r7, r5
 8006966:	42bb      	cmp	r3, r7
 8006968:	460d      	mov	r5, r1
 800696a:	d9f4      	bls.n	8006956 <_printf_i+0x112>
 800696c:	2b08      	cmp	r3, #8
 800696e:	d10b      	bne.n	8006988 <_printf_i+0x144>
 8006970:	6823      	ldr	r3, [r4, #0]
 8006972:	07df      	lsls	r7, r3, #31
 8006974:	d508      	bpl.n	8006988 <_printf_i+0x144>
 8006976:	6923      	ldr	r3, [r4, #16]
 8006978:	6861      	ldr	r1, [r4, #4]
 800697a:	4299      	cmp	r1, r3
 800697c:	bfde      	ittt	le
 800697e:	2330      	movle	r3, #48	@ 0x30
 8006980:	f806 3c01 	strble.w	r3, [r6, #-1]
 8006984:	f106 36ff 	addle.w	r6, r6, #4294967295	@ 0xffffffff
 8006988:	1b92      	subs	r2, r2, r6
 800698a:	6122      	str	r2, [r4, #16]
 800698c:	f8cd a000 	str.w	sl, [sp]
 8006990:	464b      	mov	r3, r9
 8006992:	aa03      	add	r2, sp, #12
 8006994:	4621      	mov	r1, r4
 8006996:	4640      	mov	r0, r8
 8006998:	f7ff fee6 	bl	8006768 <_printf_common>
 800699c:	3001      	adds	r0, #1
 800699e:	d14a      	bne.n	8006a36 <_printf_i+0x1f2>
 80069a0:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80069a4:	b004      	add	sp, #16
 80069a6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80069aa:	6823      	ldr	r3, [r4, #0]
 80069ac:	f043 0320 	orr.w	r3, r3, #32
 80069b0:	6023      	str	r3, [r4, #0]
 80069b2:	4833      	ldr	r0, [pc, #204]	@ (8006a80 <_printf_i+0x23c>)
 80069b4:	2778      	movs	r7, #120	@ 0x78
 80069b6:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 80069ba:	6823      	ldr	r3, [r4, #0]
 80069bc:	6831      	ldr	r1, [r6, #0]
 80069be:	061f      	lsls	r7, r3, #24
 80069c0:	f851 5b04 	ldr.w	r5, [r1], #4
 80069c4:	d402      	bmi.n	80069cc <_printf_i+0x188>
 80069c6:	065f      	lsls	r7, r3, #25
 80069c8:	bf48      	it	mi
 80069ca:	b2ad      	uxthmi	r5, r5
 80069cc:	6031      	str	r1, [r6, #0]
 80069ce:	07d9      	lsls	r1, r3, #31
 80069d0:	bf44      	itt	mi
 80069d2:	f043 0320 	orrmi.w	r3, r3, #32
 80069d6:	6023      	strmi	r3, [r4, #0]
 80069d8:	b11d      	cbz	r5, 80069e2 <_printf_i+0x19e>
 80069da:	2310      	movs	r3, #16
 80069dc:	e7ac      	b.n	8006938 <_printf_i+0xf4>
 80069de:	4827      	ldr	r0, [pc, #156]	@ (8006a7c <_printf_i+0x238>)
 80069e0:	e7e9      	b.n	80069b6 <_printf_i+0x172>
 80069e2:	6823      	ldr	r3, [r4, #0]
 80069e4:	f023 0320 	bic.w	r3, r3, #32
 80069e8:	6023      	str	r3, [r4, #0]
 80069ea:	e7f6      	b.n	80069da <_printf_i+0x196>
 80069ec:	4616      	mov	r6, r2
 80069ee:	e7bd      	b.n	800696c <_printf_i+0x128>
 80069f0:	6833      	ldr	r3, [r6, #0]
 80069f2:	6825      	ldr	r5, [r4, #0]
 80069f4:	6961      	ldr	r1, [r4, #20]
 80069f6:	1d18      	adds	r0, r3, #4
 80069f8:	6030      	str	r0, [r6, #0]
 80069fa:	062e      	lsls	r6, r5, #24
 80069fc:	681b      	ldr	r3, [r3, #0]
 80069fe:	d501      	bpl.n	8006a04 <_printf_i+0x1c0>
 8006a00:	6019      	str	r1, [r3, #0]
 8006a02:	e002      	b.n	8006a0a <_printf_i+0x1c6>
 8006a04:	0668      	lsls	r0, r5, #25
 8006a06:	d5fb      	bpl.n	8006a00 <_printf_i+0x1bc>
 8006a08:	8019      	strh	r1, [r3, #0]
 8006a0a:	2300      	movs	r3, #0
 8006a0c:	6123      	str	r3, [r4, #16]
 8006a0e:	4616      	mov	r6, r2
 8006a10:	e7bc      	b.n	800698c <_printf_i+0x148>
 8006a12:	6833      	ldr	r3, [r6, #0]
 8006a14:	1d1a      	adds	r2, r3, #4
 8006a16:	6032      	str	r2, [r6, #0]
 8006a18:	681e      	ldr	r6, [r3, #0]
 8006a1a:	6862      	ldr	r2, [r4, #4]
 8006a1c:	2100      	movs	r1, #0
 8006a1e:	4630      	mov	r0, r6
 8006a20:	f7f9 fbf6 	bl	8000210 <memchr>
 8006a24:	b108      	cbz	r0, 8006a2a <_printf_i+0x1e6>
 8006a26:	1b80      	subs	r0, r0, r6
 8006a28:	6060      	str	r0, [r4, #4]
 8006a2a:	6863      	ldr	r3, [r4, #4]
 8006a2c:	6123      	str	r3, [r4, #16]
 8006a2e:	2300      	movs	r3, #0
 8006a30:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8006a34:	e7aa      	b.n	800698c <_printf_i+0x148>
 8006a36:	6923      	ldr	r3, [r4, #16]
 8006a38:	4632      	mov	r2, r6
 8006a3a:	4649      	mov	r1, r9
 8006a3c:	4640      	mov	r0, r8
 8006a3e:	47d0      	blx	sl
 8006a40:	3001      	adds	r0, #1
 8006a42:	d0ad      	beq.n	80069a0 <_printf_i+0x15c>
 8006a44:	6823      	ldr	r3, [r4, #0]
 8006a46:	079b      	lsls	r3, r3, #30
 8006a48:	d413      	bmi.n	8006a72 <_printf_i+0x22e>
 8006a4a:	68e0      	ldr	r0, [r4, #12]
 8006a4c:	9b03      	ldr	r3, [sp, #12]
 8006a4e:	4298      	cmp	r0, r3
 8006a50:	bfb8      	it	lt
 8006a52:	4618      	movlt	r0, r3
 8006a54:	e7a6      	b.n	80069a4 <_printf_i+0x160>
 8006a56:	2301      	movs	r3, #1
 8006a58:	4632      	mov	r2, r6
 8006a5a:	4649      	mov	r1, r9
 8006a5c:	4640      	mov	r0, r8
 8006a5e:	47d0      	blx	sl
 8006a60:	3001      	adds	r0, #1
 8006a62:	d09d      	beq.n	80069a0 <_printf_i+0x15c>
 8006a64:	3501      	adds	r5, #1
 8006a66:	68e3      	ldr	r3, [r4, #12]
 8006a68:	9903      	ldr	r1, [sp, #12]
 8006a6a:	1a5b      	subs	r3, r3, r1
 8006a6c:	42ab      	cmp	r3, r5
 8006a6e:	dcf2      	bgt.n	8006a56 <_printf_i+0x212>
 8006a70:	e7eb      	b.n	8006a4a <_printf_i+0x206>
 8006a72:	2500      	movs	r5, #0
 8006a74:	f104 0619 	add.w	r6, r4, #25
 8006a78:	e7f5      	b.n	8006a66 <_printf_i+0x222>
 8006a7a:	bf00      	nop
 8006a7c:	08008df6 	.word	0x08008df6
 8006a80:	08008e07 	.word	0x08008e07

08006a84 <std>:
 8006a84:	2300      	movs	r3, #0
 8006a86:	b510      	push	{r4, lr}
 8006a88:	4604      	mov	r4, r0
 8006a8a:	e9c0 3300 	strd	r3, r3, [r0]
 8006a8e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8006a92:	6083      	str	r3, [r0, #8]
 8006a94:	8181      	strh	r1, [r0, #12]
 8006a96:	6643      	str	r3, [r0, #100]	@ 0x64
 8006a98:	81c2      	strh	r2, [r0, #14]
 8006a9a:	6183      	str	r3, [r0, #24]
 8006a9c:	4619      	mov	r1, r3
 8006a9e:	2208      	movs	r2, #8
 8006aa0:	305c      	adds	r0, #92	@ 0x5c
 8006aa2:	f000 f914 	bl	8006cce <memset>
 8006aa6:	4b0d      	ldr	r3, [pc, #52]	@ (8006adc <std+0x58>)
 8006aa8:	6263      	str	r3, [r4, #36]	@ 0x24
 8006aaa:	4b0d      	ldr	r3, [pc, #52]	@ (8006ae0 <std+0x5c>)
 8006aac:	62a3      	str	r3, [r4, #40]	@ 0x28
 8006aae:	4b0d      	ldr	r3, [pc, #52]	@ (8006ae4 <std+0x60>)
 8006ab0:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8006ab2:	4b0d      	ldr	r3, [pc, #52]	@ (8006ae8 <std+0x64>)
 8006ab4:	6323      	str	r3, [r4, #48]	@ 0x30
 8006ab6:	4b0d      	ldr	r3, [pc, #52]	@ (8006aec <std+0x68>)
 8006ab8:	6224      	str	r4, [r4, #32]
 8006aba:	429c      	cmp	r4, r3
 8006abc:	d006      	beq.n	8006acc <std+0x48>
 8006abe:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8006ac2:	4294      	cmp	r4, r2
 8006ac4:	d002      	beq.n	8006acc <std+0x48>
 8006ac6:	33d0      	adds	r3, #208	@ 0xd0
 8006ac8:	429c      	cmp	r4, r3
 8006aca:	d105      	bne.n	8006ad8 <std+0x54>
 8006acc:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8006ad0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006ad4:	f000 b9c6 	b.w	8006e64 <__retarget_lock_init_recursive>
 8006ad8:	bd10      	pop	{r4, pc}
 8006ada:	bf00      	nop
 8006adc:	08006c49 	.word	0x08006c49
 8006ae0:	08006c6b 	.word	0x08006c6b
 8006ae4:	08006ca3 	.word	0x08006ca3
 8006ae8:	08006cc7 	.word	0x08006cc7
 8006aec:	20000374 	.word	0x20000374

08006af0 <stdio_exit_handler>:
 8006af0:	4a02      	ldr	r2, [pc, #8]	@ (8006afc <stdio_exit_handler+0xc>)
 8006af2:	4903      	ldr	r1, [pc, #12]	@ (8006b00 <stdio_exit_handler+0x10>)
 8006af4:	4803      	ldr	r0, [pc, #12]	@ (8006b04 <stdio_exit_handler+0x14>)
 8006af6:	f000 b869 	b.w	8006bcc <_fwalk_sglue>
 8006afa:	bf00      	nop
 8006afc:	2000000c 	.word	0x2000000c
 8006b00:	08008671 	.word	0x08008671
 8006b04:	2000001c 	.word	0x2000001c

08006b08 <cleanup_stdio>:
 8006b08:	6841      	ldr	r1, [r0, #4]
 8006b0a:	4b0c      	ldr	r3, [pc, #48]	@ (8006b3c <cleanup_stdio+0x34>)
 8006b0c:	4299      	cmp	r1, r3
 8006b0e:	b510      	push	{r4, lr}
 8006b10:	4604      	mov	r4, r0
 8006b12:	d001      	beq.n	8006b18 <cleanup_stdio+0x10>
 8006b14:	f001 fdac 	bl	8008670 <_fflush_r>
 8006b18:	68a1      	ldr	r1, [r4, #8]
 8006b1a:	4b09      	ldr	r3, [pc, #36]	@ (8006b40 <cleanup_stdio+0x38>)
 8006b1c:	4299      	cmp	r1, r3
 8006b1e:	d002      	beq.n	8006b26 <cleanup_stdio+0x1e>
 8006b20:	4620      	mov	r0, r4
 8006b22:	f001 fda5 	bl	8008670 <_fflush_r>
 8006b26:	68e1      	ldr	r1, [r4, #12]
 8006b28:	4b06      	ldr	r3, [pc, #24]	@ (8006b44 <cleanup_stdio+0x3c>)
 8006b2a:	4299      	cmp	r1, r3
 8006b2c:	d004      	beq.n	8006b38 <cleanup_stdio+0x30>
 8006b2e:	4620      	mov	r0, r4
 8006b30:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006b34:	f001 bd9c 	b.w	8008670 <_fflush_r>
 8006b38:	bd10      	pop	{r4, pc}
 8006b3a:	bf00      	nop
 8006b3c:	20000374 	.word	0x20000374
 8006b40:	200003dc 	.word	0x200003dc
 8006b44:	20000444 	.word	0x20000444

08006b48 <global_stdio_init.part.0>:
 8006b48:	b510      	push	{r4, lr}
 8006b4a:	4b0b      	ldr	r3, [pc, #44]	@ (8006b78 <global_stdio_init.part.0+0x30>)
 8006b4c:	4c0b      	ldr	r4, [pc, #44]	@ (8006b7c <global_stdio_init.part.0+0x34>)
 8006b4e:	4a0c      	ldr	r2, [pc, #48]	@ (8006b80 <global_stdio_init.part.0+0x38>)
 8006b50:	601a      	str	r2, [r3, #0]
 8006b52:	4620      	mov	r0, r4
 8006b54:	2200      	movs	r2, #0
 8006b56:	2104      	movs	r1, #4
 8006b58:	f7ff ff94 	bl	8006a84 <std>
 8006b5c:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8006b60:	2201      	movs	r2, #1
 8006b62:	2109      	movs	r1, #9
 8006b64:	f7ff ff8e 	bl	8006a84 <std>
 8006b68:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8006b6c:	2202      	movs	r2, #2
 8006b6e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006b72:	2112      	movs	r1, #18
 8006b74:	f7ff bf86 	b.w	8006a84 <std>
 8006b78:	200004ac 	.word	0x200004ac
 8006b7c:	20000374 	.word	0x20000374
 8006b80:	08006af1 	.word	0x08006af1

08006b84 <__sfp_lock_acquire>:
 8006b84:	4801      	ldr	r0, [pc, #4]	@ (8006b8c <__sfp_lock_acquire+0x8>)
 8006b86:	f000 b96e 	b.w	8006e66 <__retarget_lock_acquire_recursive>
 8006b8a:	bf00      	nop
 8006b8c:	200004b5 	.word	0x200004b5

08006b90 <__sfp_lock_release>:
 8006b90:	4801      	ldr	r0, [pc, #4]	@ (8006b98 <__sfp_lock_release+0x8>)
 8006b92:	f000 b969 	b.w	8006e68 <__retarget_lock_release_recursive>
 8006b96:	bf00      	nop
 8006b98:	200004b5 	.word	0x200004b5

08006b9c <__sinit>:
 8006b9c:	b510      	push	{r4, lr}
 8006b9e:	4604      	mov	r4, r0
 8006ba0:	f7ff fff0 	bl	8006b84 <__sfp_lock_acquire>
 8006ba4:	6a23      	ldr	r3, [r4, #32]
 8006ba6:	b11b      	cbz	r3, 8006bb0 <__sinit+0x14>
 8006ba8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006bac:	f7ff bff0 	b.w	8006b90 <__sfp_lock_release>
 8006bb0:	4b04      	ldr	r3, [pc, #16]	@ (8006bc4 <__sinit+0x28>)
 8006bb2:	6223      	str	r3, [r4, #32]
 8006bb4:	4b04      	ldr	r3, [pc, #16]	@ (8006bc8 <__sinit+0x2c>)
 8006bb6:	681b      	ldr	r3, [r3, #0]
 8006bb8:	2b00      	cmp	r3, #0
 8006bba:	d1f5      	bne.n	8006ba8 <__sinit+0xc>
 8006bbc:	f7ff ffc4 	bl	8006b48 <global_stdio_init.part.0>
 8006bc0:	e7f2      	b.n	8006ba8 <__sinit+0xc>
 8006bc2:	bf00      	nop
 8006bc4:	08006b09 	.word	0x08006b09
 8006bc8:	200004ac 	.word	0x200004ac

08006bcc <_fwalk_sglue>:
 8006bcc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006bd0:	4607      	mov	r7, r0
 8006bd2:	4688      	mov	r8, r1
 8006bd4:	4614      	mov	r4, r2
 8006bd6:	2600      	movs	r6, #0
 8006bd8:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8006bdc:	f1b9 0901 	subs.w	r9, r9, #1
 8006be0:	d505      	bpl.n	8006bee <_fwalk_sglue+0x22>
 8006be2:	6824      	ldr	r4, [r4, #0]
 8006be4:	2c00      	cmp	r4, #0
 8006be6:	d1f7      	bne.n	8006bd8 <_fwalk_sglue+0xc>
 8006be8:	4630      	mov	r0, r6
 8006bea:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006bee:	89ab      	ldrh	r3, [r5, #12]
 8006bf0:	2b01      	cmp	r3, #1
 8006bf2:	d907      	bls.n	8006c04 <_fwalk_sglue+0x38>
 8006bf4:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8006bf8:	3301      	adds	r3, #1
 8006bfa:	d003      	beq.n	8006c04 <_fwalk_sglue+0x38>
 8006bfc:	4629      	mov	r1, r5
 8006bfe:	4638      	mov	r0, r7
 8006c00:	47c0      	blx	r8
 8006c02:	4306      	orrs	r6, r0
 8006c04:	3568      	adds	r5, #104	@ 0x68
 8006c06:	e7e9      	b.n	8006bdc <_fwalk_sglue+0x10>

08006c08 <siprintf>:
 8006c08:	b40e      	push	{r1, r2, r3}
 8006c0a:	b500      	push	{lr}
 8006c0c:	b09c      	sub	sp, #112	@ 0x70
 8006c0e:	ab1d      	add	r3, sp, #116	@ 0x74
 8006c10:	9002      	str	r0, [sp, #8]
 8006c12:	9006      	str	r0, [sp, #24]
 8006c14:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8006c18:	4809      	ldr	r0, [pc, #36]	@ (8006c40 <siprintf+0x38>)
 8006c1a:	9107      	str	r1, [sp, #28]
 8006c1c:	9104      	str	r1, [sp, #16]
 8006c1e:	4909      	ldr	r1, [pc, #36]	@ (8006c44 <siprintf+0x3c>)
 8006c20:	f853 2b04 	ldr.w	r2, [r3], #4
 8006c24:	9105      	str	r1, [sp, #20]
 8006c26:	6800      	ldr	r0, [r0, #0]
 8006c28:	9301      	str	r3, [sp, #4]
 8006c2a:	a902      	add	r1, sp, #8
 8006c2c:	f001 fba0 	bl	8008370 <_svfiprintf_r>
 8006c30:	9b02      	ldr	r3, [sp, #8]
 8006c32:	2200      	movs	r2, #0
 8006c34:	701a      	strb	r2, [r3, #0]
 8006c36:	b01c      	add	sp, #112	@ 0x70
 8006c38:	f85d eb04 	ldr.w	lr, [sp], #4
 8006c3c:	b003      	add	sp, #12
 8006c3e:	4770      	bx	lr
 8006c40:	20000018 	.word	0x20000018
 8006c44:	ffff0208 	.word	0xffff0208

08006c48 <__sread>:
 8006c48:	b510      	push	{r4, lr}
 8006c4a:	460c      	mov	r4, r1
 8006c4c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006c50:	f000 f89c 	bl	8006d8c <_read_r>
 8006c54:	2800      	cmp	r0, #0
 8006c56:	bfab      	itete	ge
 8006c58:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8006c5a:	89a3      	ldrhlt	r3, [r4, #12]
 8006c5c:	181b      	addge	r3, r3, r0
 8006c5e:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8006c62:	bfac      	ite	ge
 8006c64:	6563      	strge	r3, [r4, #84]	@ 0x54
 8006c66:	81a3      	strhlt	r3, [r4, #12]
 8006c68:	bd10      	pop	{r4, pc}

08006c6a <__swrite>:
 8006c6a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006c6e:	461f      	mov	r7, r3
 8006c70:	898b      	ldrh	r3, [r1, #12]
 8006c72:	05db      	lsls	r3, r3, #23
 8006c74:	4605      	mov	r5, r0
 8006c76:	460c      	mov	r4, r1
 8006c78:	4616      	mov	r6, r2
 8006c7a:	d505      	bpl.n	8006c88 <__swrite+0x1e>
 8006c7c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006c80:	2302      	movs	r3, #2
 8006c82:	2200      	movs	r2, #0
 8006c84:	f000 f870 	bl	8006d68 <_lseek_r>
 8006c88:	89a3      	ldrh	r3, [r4, #12]
 8006c8a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8006c8e:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8006c92:	81a3      	strh	r3, [r4, #12]
 8006c94:	4632      	mov	r2, r6
 8006c96:	463b      	mov	r3, r7
 8006c98:	4628      	mov	r0, r5
 8006c9a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8006c9e:	f000 b8ab 	b.w	8006df8 <_write_r>

08006ca2 <__sseek>:
 8006ca2:	b510      	push	{r4, lr}
 8006ca4:	460c      	mov	r4, r1
 8006ca6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006caa:	f000 f85d 	bl	8006d68 <_lseek_r>
 8006cae:	1c43      	adds	r3, r0, #1
 8006cb0:	89a3      	ldrh	r3, [r4, #12]
 8006cb2:	bf15      	itete	ne
 8006cb4:	6560      	strne	r0, [r4, #84]	@ 0x54
 8006cb6:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8006cba:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8006cbe:	81a3      	strheq	r3, [r4, #12]
 8006cc0:	bf18      	it	ne
 8006cc2:	81a3      	strhne	r3, [r4, #12]
 8006cc4:	bd10      	pop	{r4, pc}

08006cc6 <__sclose>:
 8006cc6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006cca:	f000 b83d 	b.w	8006d48 <_close_r>

08006cce <memset>:
 8006cce:	4402      	add	r2, r0
 8006cd0:	4603      	mov	r3, r0
 8006cd2:	4293      	cmp	r3, r2
 8006cd4:	d100      	bne.n	8006cd8 <memset+0xa>
 8006cd6:	4770      	bx	lr
 8006cd8:	f803 1b01 	strb.w	r1, [r3], #1
 8006cdc:	e7f9      	b.n	8006cd2 <memset+0x4>

08006cde <_raise_r>:
 8006cde:	291f      	cmp	r1, #31
 8006ce0:	b538      	push	{r3, r4, r5, lr}
 8006ce2:	4605      	mov	r5, r0
 8006ce4:	460c      	mov	r4, r1
 8006ce6:	d904      	bls.n	8006cf2 <_raise_r+0x14>
 8006ce8:	2316      	movs	r3, #22
 8006cea:	6003      	str	r3, [r0, #0]
 8006cec:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8006cf0:	bd38      	pop	{r3, r4, r5, pc}
 8006cf2:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 8006cf4:	b112      	cbz	r2, 8006cfc <_raise_r+0x1e>
 8006cf6:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8006cfa:	b94b      	cbnz	r3, 8006d10 <_raise_r+0x32>
 8006cfc:	4628      	mov	r0, r5
 8006cfe:	f000 f869 	bl	8006dd4 <_getpid_r>
 8006d02:	4622      	mov	r2, r4
 8006d04:	4601      	mov	r1, r0
 8006d06:	4628      	mov	r0, r5
 8006d08:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8006d0c:	f000 b850 	b.w	8006db0 <_kill_r>
 8006d10:	2b01      	cmp	r3, #1
 8006d12:	d00a      	beq.n	8006d2a <_raise_r+0x4c>
 8006d14:	1c59      	adds	r1, r3, #1
 8006d16:	d103      	bne.n	8006d20 <_raise_r+0x42>
 8006d18:	2316      	movs	r3, #22
 8006d1a:	6003      	str	r3, [r0, #0]
 8006d1c:	2001      	movs	r0, #1
 8006d1e:	e7e7      	b.n	8006cf0 <_raise_r+0x12>
 8006d20:	2100      	movs	r1, #0
 8006d22:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 8006d26:	4620      	mov	r0, r4
 8006d28:	4798      	blx	r3
 8006d2a:	2000      	movs	r0, #0
 8006d2c:	e7e0      	b.n	8006cf0 <_raise_r+0x12>
	...

08006d30 <raise>:
 8006d30:	4b02      	ldr	r3, [pc, #8]	@ (8006d3c <raise+0xc>)
 8006d32:	4601      	mov	r1, r0
 8006d34:	6818      	ldr	r0, [r3, #0]
 8006d36:	f7ff bfd2 	b.w	8006cde <_raise_r>
 8006d3a:	bf00      	nop
 8006d3c:	20000018 	.word	0x20000018

08006d40 <_localeconv_r>:
 8006d40:	4800      	ldr	r0, [pc, #0]	@ (8006d44 <_localeconv_r+0x4>)
 8006d42:	4770      	bx	lr
 8006d44:	20000158 	.word	0x20000158

08006d48 <_close_r>:
 8006d48:	b538      	push	{r3, r4, r5, lr}
 8006d4a:	4d06      	ldr	r5, [pc, #24]	@ (8006d64 <_close_r+0x1c>)
 8006d4c:	2300      	movs	r3, #0
 8006d4e:	4604      	mov	r4, r0
 8006d50:	4608      	mov	r0, r1
 8006d52:	602b      	str	r3, [r5, #0]
 8006d54:	f001 ffc2 	bl	8008cdc <_close>
 8006d58:	1c43      	adds	r3, r0, #1
 8006d5a:	d102      	bne.n	8006d62 <_close_r+0x1a>
 8006d5c:	682b      	ldr	r3, [r5, #0]
 8006d5e:	b103      	cbz	r3, 8006d62 <_close_r+0x1a>
 8006d60:	6023      	str	r3, [r4, #0]
 8006d62:	bd38      	pop	{r3, r4, r5, pc}
 8006d64:	200004b0 	.word	0x200004b0

08006d68 <_lseek_r>:
 8006d68:	b538      	push	{r3, r4, r5, lr}
 8006d6a:	4d07      	ldr	r5, [pc, #28]	@ (8006d88 <_lseek_r+0x20>)
 8006d6c:	4604      	mov	r4, r0
 8006d6e:	4608      	mov	r0, r1
 8006d70:	4611      	mov	r1, r2
 8006d72:	2200      	movs	r2, #0
 8006d74:	602a      	str	r2, [r5, #0]
 8006d76:	461a      	mov	r2, r3
 8006d78:	f001 ffd8 	bl	8008d2c <_lseek>
 8006d7c:	1c43      	adds	r3, r0, #1
 8006d7e:	d102      	bne.n	8006d86 <_lseek_r+0x1e>
 8006d80:	682b      	ldr	r3, [r5, #0]
 8006d82:	b103      	cbz	r3, 8006d86 <_lseek_r+0x1e>
 8006d84:	6023      	str	r3, [r4, #0]
 8006d86:	bd38      	pop	{r3, r4, r5, pc}
 8006d88:	200004b0 	.word	0x200004b0

08006d8c <_read_r>:
 8006d8c:	b538      	push	{r3, r4, r5, lr}
 8006d8e:	4d07      	ldr	r5, [pc, #28]	@ (8006dac <_read_r+0x20>)
 8006d90:	4604      	mov	r4, r0
 8006d92:	4608      	mov	r0, r1
 8006d94:	4611      	mov	r1, r2
 8006d96:	2200      	movs	r2, #0
 8006d98:	602a      	str	r2, [r5, #0]
 8006d9a:	461a      	mov	r2, r3
 8006d9c:	f001 ffce 	bl	8008d3c <_read>
 8006da0:	1c43      	adds	r3, r0, #1
 8006da2:	d102      	bne.n	8006daa <_read_r+0x1e>
 8006da4:	682b      	ldr	r3, [r5, #0]
 8006da6:	b103      	cbz	r3, 8006daa <_read_r+0x1e>
 8006da8:	6023      	str	r3, [r4, #0]
 8006daa:	bd38      	pop	{r3, r4, r5, pc}
 8006dac:	200004b0 	.word	0x200004b0

08006db0 <_kill_r>:
 8006db0:	b538      	push	{r3, r4, r5, lr}
 8006db2:	4d07      	ldr	r5, [pc, #28]	@ (8006dd0 <_kill_r+0x20>)
 8006db4:	2300      	movs	r3, #0
 8006db6:	4604      	mov	r4, r0
 8006db8:	4608      	mov	r0, r1
 8006dba:	4611      	mov	r1, r2
 8006dbc:	602b      	str	r3, [r5, #0]
 8006dbe:	f001 ffad 	bl	8008d1c <_kill>
 8006dc2:	1c43      	adds	r3, r0, #1
 8006dc4:	d102      	bne.n	8006dcc <_kill_r+0x1c>
 8006dc6:	682b      	ldr	r3, [r5, #0]
 8006dc8:	b103      	cbz	r3, 8006dcc <_kill_r+0x1c>
 8006dca:	6023      	str	r3, [r4, #0]
 8006dcc:	bd38      	pop	{r3, r4, r5, pc}
 8006dce:	bf00      	nop
 8006dd0:	200004b0 	.word	0x200004b0

08006dd4 <_getpid_r>:
 8006dd4:	f001 bf92 	b.w	8008cfc <_getpid>

08006dd8 <_sbrk_r>:
 8006dd8:	b538      	push	{r3, r4, r5, lr}
 8006dda:	4d06      	ldr	r5, [pc, #24]	@ (8006df4 <_sbrk_r+0x1c>)
 8006ddc:	2300      	movs	r3, #0
 8006dde:	4604      	mov	r4, r0
 8006de0:	4608      	mov	r0, r1
 8006de2:	602b      	str	r3, [r5, #0]
 8006de4:	f001 ffb2 	bl	8008d4c <_sbrk>
 8006de8:	1c43      	adds	r3, r0, #1
 8006dea:	d102      	bne.n	8006df2 <_sbrk_r+0x1a>
 8006dec:	682b      	ldr	r3, [r5, #0]
 8006dee:	b103      	cbz	r3, 8006df2 <_sbrk_r+0x1a>
 8006df0:	6023      	str	r3, [r4, #0]
 8006df2:	bd38      	pop	{r3, r4, r5, pc}
 8006df4:	200004b0 	.word	0x200004b0

08006df8 <_write_r>:
 8006df8:	b538      	push	{r3, r4, r5, lr}
 8006dfa:	4d07      	ldr	r5, [pc, #28]	@ (8006e18 <_write_r+0x20>)
 8006dfc:	4604      	mov	r4, r0
 8006dfe:	4608      	mov	r0, r1
 8006e00:	4611      	mov	r1, r2
 8006e02:	2200      	movs	r2, #0
 8006e04:	602a      	str	r2, [r5, #0]
 8006e06:	461a      	mov	r2, r3
 8006e08:	f001 ffae 	bl	8008d68 <_write>
 8006e0c:	1c43      	adds	r3, r0, #1
 8006e0e:	d102      	bne.n	8006e16 <_write_r+0x1e>
 8006e10:	682b      	ldr	r3, [r5, #0]
 8006e12:	b103      	cbz	r3, 8006e16 <_write_r+0x1e>
 8006e14:	6023      	str	r3, [r4, #0]
 8006e16:	bd38      	pop	{r3, r4, r5, pc}
 8006e18:	200004b0 	.word	0x200004b0

08006e1c <__libc_init_array>:
 8006e1c:	b570      	push	{r4, r5, r6, lr}
 8006e1e:	4d0d      	ldr	r5, [pc, #52]	@ (8006e54 <__libc_init_array+0x38>)
 8006e20:	4c0d      	ldr	r4, [pc, #52]	@ (8006e58 <__libc_init_array+0x3c>)
 8006e22:	1b64      	subs	r4, r4, r5
 8006e24:	10a4      	asrs	r4, r4, #2
 8006e26:	2600      	movs	r6, #0
 8006e28:	42a6      	cmp	r6, r4
 8006e2a:	d109      	bne.n	8006e40 <__libc_init_array+0x24>
 8006e2c:	4d0b      	ldr	r5, [pc, #44]	@ (8006e5c <__libc_init_array+0x40>)
 8006e2e:	4c0c      	ldr	r4, [pc, #48]	@ (8006e60 <__libc_init_array+0x44>)
 8006e30:	f001 ffa4 	bl	8008d7c <_init>
 8006e34:	1b64      	subs	r4, r4, r5
 8006e36:	10a4      	asrs	r4, r4, #2
 8006e38:	2600      	movs	r6, #0
 8006e3a:	42a6      	cmp	r6, r4
 8006e3c:	d105      	bne.n	8006e4a <__libc_init_array+0x2e>
 8006e3e:	bd70      	pop	{r4, r5, r6, pc}
 8006e40:	f855 3b04 	ldr.w	r3, [r5], #4
 8006e44:	4798      	blx	r3
 8006e46:	3601      	adds	r6, #1
 8006e48:	e7ee      	b.n	8006e28 <__libc_init_array+0xc>
 8006e4a:	f855 3b04 	ldr.w	r3, [r5], #4
 8006e4e:	4798      	blx	r3
 8006e50:	3601      	adds	r6, #1
 8006e52:	e7f2      	b.n	8006e3a <__libc_init_array+0x1e>
 8006e54:	080094e0 	.word	0x080094e0
 8006e58:	080094e0 	.word	0x080094e0
 8006e5c:	080094e0 	.word	0x080094e0
 8006e60:	080094e4 	.word	0x080094e4

08006e64 <__retarget_lock_init_recursive>:
 8006e64:	4770      	bx	lr

08006e66 <__retarget_lock_acquire_recursive>:
 8006e66:	4770      	bx	lr

08006e68 <__retarget_lock_release_recursive>:
 8006e68:	4770      	bx	lr

08006e6a <memcpy>:
 8006e6a:	440a      	add	r2, r1
 8006e6c:	4291      	cmp	r1, r2
 8006e6e:	f100 33ff 	add.w	r3, r0, #4294967295	@ 0xffffffff
 8006e72:	d100      	bne.n	8006e76 <memcpy+0xc>
 8006e74:	4770      	bx	lr
 8006e76:	b510      	push	{r4, lr}
 8006e78:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006e7c:	f803 4f01 	strb.w	r4, [r3, #1]!
 8006e80:	4291      	cmp	r1, r2
 8006e82:	d1f9      	bne.n	8006e78 <memcpy+0xe>
 8006e84:	bd10      	pop	{r4, pc}

08006e86 <quorem>:
 8006e86:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006e8a:	6903      	ldr	r3, [r0, #16]
 8006e8c:	690c      	ldr	r4, [r1, #16]
 8006e8e:	42a3      	cmp	r3, r4
 8006e90:	4607      	mov	r7, r0
 8006e92:	db7e      	blt.n	8006f92 <quorem+0x10c>
 8006e94:	3c01      	subs	r4, #1
 8006e96:	f101 0814 	add.w	r8, r1, #20
 8006e9a:	00a3      	lsls	r3, r4, #2
 8006e9c:	f100 0514 	add.w	r5, r0, #20
 8006ea0:	9300      	str	r3, [sp, #0]
 8006ea2:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8006ea6:	9301      	str	r3, [sp, #4]
 8006ea8:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8006eac:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8006eb0:	3301      	adds	r3, #1
 8006eb2:	429a      	cmp	r2, r3
 8006eb4:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8006eb8:	fbb2 f6f3 	udiv	r6, r2, r3
 8006ebc:	d32e      	bcc.n	8006f1c <quorem+0x96>
 8006ebe:	f04f 0a00 	mov.w	sl, #0
 8006ec2:	46c4      	mov	ip, r8
 8006ec4:	46ae      	mov	lr, r5
 8006ec6:	46d3      	mov	fp, sl
 8006ec8:	f85c 3b04 	ldr.w	r3, [ip], #4
 8006ecc:	b298      	uxth	r0, r3
 8006ece:	fb06 a000 	mla	r0, r6, r0, sl
 8006ed2:	0c02      	lsrs	r2, r0, #16
 8006ed4:	0c1b      	lsrs	r3, r3, #16
 8006ed6:	fb06 2303 	mla	r3, r6, r3, r2
 8006eda:	f8de 2000 	ldr.w	r2, [lr]
 8006ede:	b280      	uxth	r0, r0
 8006ee0:	b292      	uxth	r2, r2
 8006ee2:	1a12      	subs	r2, r2, r0
 8006ee4:	445a      	add	r2, fp
 8006ee6:	f8de 0000 	ldr.w	r0, [lr]
 8006eea:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8006eee:	b29b      	uxth	r3, r3
 8006ef0:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 8006ef4:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 8006ef8:	b292      	uxth	r2, r2
 8006efa:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 8006efe:	45e1      	cmp	r9, ip
 8006f00:	f84e 2b04 	str.w	r2, [lr], #4
 8006f04:	ea4f 4b23 	mov.w	fp, r3, asr #16
 8006f08:	d2de      	bcs.n	8006ec8 <quorem+0x42>
 8006f0a:	9b00      	ldr	r3, [sp, #0]
 8006f0c:	58eb      	ldr	r3, [r5, r3]
 8006f0e:	b92b      	cbnz	r3, 8006f1c <quorem+0x96>
 8006f10:	9b01      	ldr	r3, [sp, #4]
 8006f12:	3b04      	subs	r3, #4
 8006f14:	429d      	cmp	r5, r3
 8006f16:	461a      	mov	r2, r3
 8006f18:	d32f      	bcc.n	8006f7a <quorem+0xf4>
 8006f1a:	613c      	str	r4, [r7, #16]
 8006f1c:	4638      	mov	r0, r7
 8006f1e:	f001 f8c3 	bl	80080a8 <__mcmp>
 8006f22:	2800      	cmp	r0, #0
 8006f24:	db25      	blt.n	8006f72 <quorem+0xec>
 8006f26:	4629      	mov	r1, r5
 8006f28:	2000      	movs	r0, #0
 8006f2a:	f858 2b04 	ldr.w	r2, [r8], #4
 8006f2e:	f8d1 c000 	ldr.w	ip, [r1]
 8006f32:	fa1f fe82 	uxth.w	lr, r2
 8006f36:	fa1f f38c 	uxth.w	r3, ip
 8006f3a:	eba3 030e 	sub.w	r3, r3, lr
 8006f3e:	4403      	add	r3, r0
 8006f40:	0c12      	lsrs	r2, r2, #16
 8006f42:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 8006f46:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 8006f4a:	b29b      	uxth	r3, r3
 8006f4c:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8006f50:	45c1      	cmp	r9, r8
 8006f52:	f841 3b04 	str.w	r3, [r1], #4
 8006f56:	ea4f 4022 	mov.w	r0, r2, asr #16
 8006f5a:	d2e6      	bcs.n	8006f2a <quorem+0xa4>
 8006f5c:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8006f60:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8006f64:	b922      	cbnz	r2, 8006f70 <quorem+0xea>
 8006f66:	3b04      	subs	r3, #4
 8006f68:	429d      	cmp	r5, r3
 8006f6a:	461a      	mov	r2, r3
 8006f6c:	d30b      	bcc.n	8006f86 <quorem+0x100>
 8006f6e:	613c      	str	r4, [r7, #16]
 8006f70:	3601      	adds	r6, #1
 8006f72:	4630      	mov	r0, r6
 8006f74:	b003      	add	sp, #12
 8006f76:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006f7a:	6812      	ldr	r2, [r2, #0]
 8006f7c:	3b04      	subs	r3, #4
 8006f7e:	2a00      	cmp	r2, #0
 8006f80:	d1cb      	bne.n	8006f1a <quorem+0x94>
 8006f82:	3c01      	subs	r4, #1
 8006f84:	e7c6      	b.n	8006f14 <quorem+0x8e>
 8006f86:	6812      	ldr	r2, [r2, #0]
 8006f88:	3b04      	subs	r3, #4
 8006f8a:	2a00      	cmp	r2, #0
 8006f8c:	d1ef      	bne.n	8006f6e <quorem+0xe8>
 8006f8e:	3c01      	subs	r4, #1
 8006f90:	e7ea      	b.n	8006f68 <quorem+0xe2>
 8006f92:	2000      	movs	r0, #0
 8006f94:	e7ee      	b.n	8006f74 <quorem+0xee>
	...

08006f98 <_dtoa_r>:
 8006f98:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006f9c:	69c7      	ldr	r7, [r0, #28]
 8006f9e:	b099      	sub	sp, #100	@ 0x64
 8006fa0:	ed8d 0b02 	vstr	d0, [sp, #8]
 8006fa4:	ec55 4b10 	vmov	r4, r5, d0
 8006fa8:	9e22      	ldr	r6, [sp, #136]	@ 0x88
 8006faa:	9109      	str	r1, [sp, #36]	@ 0x24
 8006fac:	4683      	mov	fp, r0
 8006fae:	920e      	str	r2, [sp, #56]	@ 0x38
 8006fb0:	9313      	str	r3, [sp, #76]	@ 0x4c
 8006fb2:	b97f      	cbnz	r7, 8006fd4 <_dtoa_r+0x3c>
 8006fb4:	2010      	movs	r0, #16
 8006fb6:	f7ff f857 	bl	8006068 <malloc>
 8006fba:	4602      	mov	r2, r0
 8006fbc:	f8cb 001c 	str.w	r0, [fp, #28]
 8006fc0:	b920      	cbnz	r0, 8006fcc <_dtoa_r+0x34>
 8006fc2:	4ba7      	ldr	r3, [pc, #668]	@ (8007260 <_dtoa_r+0x2c8>)
 8006fc4:	21ef      	movs	r1, #239	@ 0xef
 8006fc6:	48a7      	ldr	r0, [pc, #668]	@ (8007264 <_dtoa_r+0x2cc>)
 8006fc8:	f001 fb94 	bl	80086f4 <__assert_func>
 8006fcc:	e9c0 7701 	strd	r7, r7, [r0, #4]
 8006fd0:	6007      	str	r7, [r0, #0]
 8006fd2:	60c7      	str	r7, [r0, #12]
 8006fd4:	f8db 301c 	ldr.w	r3, [fp, #28]
 8006fd8:	6819      	ldr	r1, [r3, #0]
 8006fda:	b159      	cbz	r1, 8006ff4 <_dtoa_r+0x5c>
 8006fdc:	685a      	ldr	r2, [r3, #4]
 8006fde:	604a      	str	r2, [r1, #4]
 8006fe0:	2301      	movs	r3, #1
 8006fe2:	4093      	lsls	r3, r2
 8006fe4:	608b      	str	r3, [r1, #8]
 8006fe6:	4658      	mov	r0, fp
 8006fe8:	f000 fe24 	bl	8007c34 <_Bfree>
 8006fec:	f8db 301c 	ldr.w	r3, [fp, #28]
 8006ff0:	2200      	movs	r2, #0
 8006ff2:	601a      	str	r2, [r3, #0]
 8006ff4:	1e2b      	subs	r3, r5, #0
 8006ff6:	bfb9      	ittee	lt
 8006ff8:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 8006ffc:	9303      	strlt	r3, [sp, #12]
 8006ffe:	2300      	movge	r3, #0
 8007000:	6033      	strge	r3, [r6, #0]
 8007002:	9f03      	ldr	r7, [sp, #12]
 8007004:	4b98      	ldr	r3, [pc, #608]	@ (8007268 <_dtoa_r+0x2d0>)
 8007006:	bfbc      	itt	lt
 8007008:	2201      	movlt	r2, #1
 800700a:	6032      	strlt	r2, [r6, #0]
 800700c:	43bb      	bics	r3, r7
 800700e:	d112      	bne.n	8007036 <_dtoa_r+0x9e>
 8007010:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 8007012:	f242 730f 	movw	r3, #9999	@ 0x270f
 8007016:	6013      	str	r3, [r2, #0]
 8007018:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800701c:	4323      	orrs	r3, r4
 800701e:	f000 854d 	beq.w	8007abc <_dtoa_r+0xb24>
 8007022:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8007024:	f8df a254 	ldr.w	sl, [pc, #596]	@ 800727c <_dtoa_r+0x2e4>
 8007028:	2b00      	cmp	r3, #0
 800702a:	f000 854f 	beq.w	8007acc <_dtoa_r+0xb34>
 800702e:	f10a 0303 	add.w	r3, sl, #3
 8007032:	f000 bd49 	b.w	8007ac8 <_dtoa_r+0xb30>
 8007036:	ed9d 7b02 	vldr	d7, [sp, #8]
 800703a:	2200      	movs	r2, #0
 800703c:	ec51 0b17 	vmov	r0, r1, d7
 8007040:	2300      	movs	r3, #0
 8007042:	ed8d 7b0c 	vstr	d7, [sp, #48]	@ 0x30
 8007046:	f7f9 fd5f 	bl	8000b08 <__aeabi_dcmpeq>
 800704a:	4680      	mov	r8, r0
 800704c:	b158      	cbz	r0, 8007066 <_dtoa_r+0xce>
 800704e:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 8007050:	2301      	movs	r3, #1
 8007052:	6013      	str	r3, [r2, #0]
 8007054:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8007056:	b113      	cbz	r3, 800705e <_dtoa_r+0xc6>
 8007058:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 800705a:	4b84      	ldr	r3, [pc, #528]	@ (800726c <_dtoa_r+0x2d4>)
 800705c:	6013      	str	r3, [r2, #0]
 800705e:	f8df a220 	ldr.w	sl, [pc, #544]	@ 8007280 <_dtoa_r+0x2e8>
 8007062:	f000 bd33 	b.w	8007acc <_dtoa_r+0xb34>
 8007066:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 800706a:	aa16      	add	r2, sp, #88	@ 0x58
 800706c:	a917      	add	r1, sp, #92	@ 0x5c
 800706e:	4658      	mov	r0, fp
 8007070:	f001 f8ca 	bl	8008208 <__d2b>
 8007074:	f3c7 560a 	ubfx	r6, r7, #20, #11
 8007078:	4681      	mov	r9, r0
 800707a:	2e00      	cmp	r6, #0
 800707c:	d077      	beq.n	800716e <_dtoa_r+0x1d6>
 800707e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8007080:	f8cd 8050 	str.w	r8, [sp, #80]	@ 0x50
 8007084:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8007088:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800708c:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 8007090:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 8007094:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 8007098:	4619      	mov	r1, r3
 800709a:	2200      	movs	r2, #0
 800709c:	4b74      	ldr	r3, [pc, #464]	@ (8007270 <_dtoa_r+0x2d8>)
 800709e:	f7f9 f913 	bl	80002c8 <__aeabi_dsub>
 80070a2:	a369      	add	r3, pc, #420	@ (adr r3, 8007248 <_dtoa_r+0x2b0>)
 80070a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80070a8:	f7f9 fac6 	bl	8000638 <__aeabi_dmul>
 80070ac:	a368      	add	r3, pc, #416	@ (adr r3, 8007250 <_dtoa_r+0x2b8>)
 80070ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 80070b2:	f7f9 f90b 	bl	80002cc <__adddf3>
 80070b6:	4604      	mov	r4, r0
 80070b8:	4630      	mov	r0, r6
 80070ba:	460d      	mov	r5, r1
 80070bc:	f7f9 fa52 	bl	8000564 <__aeabi_i2d>
 80070c0:	a365      	add	r3, pc, #404	@ (adr r3, 8007258 <_dtoa_r+0x2c0>)
 80070c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80070c6:	f7f9 fab7 	bl	8000638 <__aeabi_dmul>
 80070ca:	4602      	mov	r2, r0
 80070cc:	460b      	mov	r3, r1
 80070ce:	4620      	mov	r0, r4
 80070d0:	4629      	mov	r1, r5
 80070d2:	f7f9 f8fb 	bl	80002cc <__adddf3>
 80070d6:	4604      	mov	r4, r0
 80070d8:	460d      	mov	r5, r1
 80070da:	f7f9 fd5d 	bl	8000b98 <__aeabi_d2iz>
 80070de:	2200      	movs	r2, #0
 80070e0:	4607      	mov	r7, r0
 80070e2:	2300      	movs	r3, #0
 80070e4:	4620      	mov	r0, r4
 80070e6:	4629      	mov	r1, r5
 80070e8:	f7f9 fd18 	bl	8000b1c <__aeabi_dcmplt>
 80070ec:	b140      	cbz	r0, 8007100 <_dtoa_r+0x168>
 80070ee:	4638      	mov	r0, r7
 80070f0:	f7f9 fa38 	bl	8000564 <__aeabi_i2d>
 80070f4:	4622      	mov	r2, r4
 80070f6:	462b      	mov	r3, r5
 80070f8:	f7f9 fd06 	bl	8000b08 <__aeabi_dcmpeq>
 80070fc:	b900      	cbnz	r0, 8007100 <_dtoa_r+0x168>
 80070fe:	3f01      	subs	r7, #1
 8007100:	2f16      	cmp	r7, #22
 8007102:	d851      	bhi.n	80071a8 <_dtoa_r+0x210>
 8007104:	4b5b      	ldr	r3, [pc, #364]	@ (8007274 <_dtoa_r+0x2dc>)
 8007106:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800710a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800710e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8007112:	f7f9 fd03 	bl	8000b1c <__aeabi_dcmplt>
 8007116:	2800      	cmp	r0, #0
 8007118:	d048      	beq.n	80071ac <_dtoa_r+0x214>
 800711a:	3f01      	subs	r7, #1
 800711c:	2300      	movs	r3, #0
 800711e:	9312      	str	r3, [sp, #72]	@ 0x48
 8007120:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 8007122:	1b9b      	subs	r3, r3, r6
 8007124:	1e5a      	subs	r2, r3, #1
 8007126:	bf44      	itt	mi
 8007128:	f1c3 0801 	rsbmi	r8, r3, #1
 800712c:	2300      	movmi	r3, #0
 800712e:	9208      	str	r2, [sp, #32]
 8007130:	bf54      	ite	pl
 8007132:	f04f 0800 	movpl.w	r8, #0
 8007136:	9308      	strmi	r3, [sp, #32]
 8007138:	2f00      	cmp	r7, #0
 800713a:	db39      	blt.n	80071b0 <_dtoa_r+0x218>
 800713c:	9b08      	ldr	r3, [sp, #32]
 800713e:	970f      	str	r7, [sp, #60]	@ 0x3c
 8007140:	443b      	add	r3, r7
 8007142:	9308      	str	r3, [sp, #32]
 8007144:	2300      	movs	r3, #0
 8007146:	930a      	str	r3, [sp, #40]	@ 0x28
 8007148:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800714a:	2b09      	cmp	r3, #9
 800714c:	d864      	bhi.n	8007218 <_dtoa_r+0x280>
 800714e:	2b05      	cmp	r3, #5
 8007150:	bfc4      	itt	gt
 8007152:	3b04      	subgt	r3, #4
 8007154:	9309      	strgt	r3, [sp, #36]	@ 0x24
 8007156:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007158:	f1a3 0302 	sub.w	r3, r3, #2
 800715c:	bfcc      	ite	gt
 800715e:	2400      	movgt	r4, #0
 8007160:	2401      	movle	r4, #1
 8007162:	2b03      	cmp	r3, #3
 8007164:	d863      	bhi.n	800722e <_dtoa_r+0x296>
 8007166:	e8df f003 	tbb	[pc, r3]
 800716a:	372a      	.short	0x372a
 800716c:	5535      	.short	0x5535
 800716e:	e9dd 6316 	ldrd	r6, r3, [sp, #88]	@ 0x58
 8007172:	441e      	add	r6, r3
 8007174:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 8007178:	2b20      	cmp	r3, #32
 800717a:	bfc1      	itttt	gt
 800717c:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 8007180:	409f      	lslgt	r7, r3
 8007182:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 8007186:	fa24 f303 	lsrgt.w	r3, r4, r3
 800718a:	bfd6      	itet	le
 800718c:	f1c3 0320 	rsble	r3, r3, #32
 8007190:	ea47 0003 	orrgt.w	r0, r7, r3
 8007194:	fa04 f003 	lslle.w	r0, r4, r3
 8007198:	f7f9 f9d4 	bl	8000544 <__aeabi_ui2d>
 800719c:	2201      	movs	r2, #1
 800719e:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 80071a2:	3e01      	subs	r6, #1
 80071a4:	9214      	str	r2, [sp, #80]	@ 0x50
 80071a6:	e777      	b.n	8007098 <_dtoa_r+0x100>
 80071a8:	2301      	movs	r3, #1
 80071aa:	e7b8      	b.n	800711e <_dtoa_r+0x186>
 80071ac:	9012      	str	r0, [sp, #72]	@ 0x48
 80071ae:	e7b7      	b.n	8007120 <_dtoa_r+0x188>
 80071b0:	427b      	negs	r3, r7
 80071b2:	930a      	str	r3, [sp, #40]	@ 0x28
 80071b4:	2300      	movs	r3, #0
 80071b6:	eba8 0807 	sub.w	r8, r8, r7
 80071ba:	930f      	str	r3, [sp, #60]	@ 0x3c
 80071bc:	e7c4      	b.n	8007148 <_dtoa_r+0x1b0>
 80071be:	2300      	movs	r3, #0
 80071c0:	930b      	str	r3, [sp, #44]	@ 0x2c
 80071c2:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80071c4:	2b00      	cmp	r3, #0
 80071c6:	dc35      	bgt.n	8007234 <_dtoa_r+0x29c>
 80071c8:	2301      	movs	r3, #1
 80071ca:	9300      	str	r3, [sp, #0]
 80071cc:	9307      	str	r3, [sp, #28]
 80071ce:	461a      	mov	r2, r3
 80071d0:	920e      	str	r2, [sp, #56]	@ 0x38
 80071d2:	e00b      	b.n	80071ec <_dtoa_r+0x254>
 80071d4:	2301      	movs	r3, #1
 80071d6:	e7f3      	b.n	80071c0 <_dtoa_r+0x228>
 80071d8:	2300      	movs	r3, #0
 80071da:	930b      	str	r3, [sp, #44]	@ 0x2c
 80071dc:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80071de:	18fb      	adds	r3, r7, r3
 80071e0:	9300      	str	r3, [sp, #0]
 80071e2:	3301      	adds	r3, #1
 80071e4:	2b01      	cmp	r3, #1
 80071e6:	9307      	str	r3, [sp, #28]
 80071e8:	bfb8      	it	lt
 80071ea:	2301      	movlt	r3, #1
 80071ec:	f8db 001c 	ldr.w	r0, [fp, #28]
 80071f0:	2100      	movs	r1, #0
 80071f2:	2204      	movs	r2, #4
 80071f4:	f102 0514 	add.w	r5, r2, #20
 80071f8:	429d      	cmp	r5, r3
 80071fa:	d91f      	bls.n	800723c <_dtoa_r+0x2a4>
 80071fc:	6041      	str	r1, [r0, #4]
 80071fe:	4658      	mov	r0, fp
 8007200:	f000 fcd8 	bl	8007bb4 <_Balloc>
 8007204:	4682      	mov	sl, r0
 8007206:	2800      	cmp	r0, #0
 8007208:	d13c      	bne.n	8007284 <_dtoa_r+0x2ec>
 800720a:	4b1b      	ldr	r3, [pc, #108]	@ (8007278 <_dtoa_r+0x2e0>)
 800720c:	4602      	mov	r2, r0
 800720e:	f240 11af 	movw	r1, #431	@ 0x1af
 8007212:	e6d8      	b.n	8006fc6 <_dtoa_r+0x2e>
 8007214:	2301      	movs	r3, #1
 8007216:	e7e0      	b.n	80071da <_dtoa_r+0x242>
 8007218:	2401      	movs	r4, #1
 800721a:	2300      	movs	r3, #0
 800721c:	9309      	str	r3, [sp, #36]	@ 0x24
 800721e:	940b      	str	r4, [sp, #44]	@ 0x2c
 8007220:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8007224:	9300      	str	r3, [sp, #0]
 8007226:	9307      	str	r3, [sp, #28]
 8007228:	2200      	movs	r2, #0
 800722a:	2312      	movs	r3, #18
 800722c:	e7d0      	b.n	80071d0 <_dtoa_r+0x238>
 800722e:	2301      	movs	r3, #1
 8007230:	930b      	str	r3, [sp, #44]	@ 0x2c
 8007232:	e7f5      	b.n	8007220 <_dtoa_r+0x288>
 8007234:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8007236:	9300      	str	r3, [sp, #0]
 8007238:	9307      	str	r3, [sp, #28]
 800723a:	e7d7      	b.n	80071ec <_dtoa_r+0x254>
 800723c:	3101      	adds	r1, #1
 800723e:	0052      	lsls	r2, r2, #1
 8007240:	e7d8      	b.n	80071f4 <_dtoa_r+0x25c>
 8007242:	bf00      	nop
 8007244:	f3af 8000 	nop.w
 8007248:	636f4361 	.word	0x636f4361
 800724c:	3fd287a7 	.word	0x3fd287a7
 8007250:	8b60c8b3 	.word	0x8b60c8b3
 8007254:	3fc68a28 	.word	0x3fc68a28
 8007258:	509f79fb 	.word	0x509f79fb
 800725c:	3fd34413 	.word	0x3fd34413
 8007260:	08008e25 	.word	0x08008e25
 8007264:	08008e3c 	.word	0x08008e3c
 8007268:	7ff00000 	.word	0x7ff00000
 800726c:	08008df5 	.word	0x08008df5
 8007270:	3ff80000 	.word	0x3ff80000
 8007274:	08008f38 	.word	0x08008f38
 8007278:	08008e94 	.word	0x08008e94
 800727c:	08008e21 	.word	0x08008e21
 8007280:	08008df4 	.word	0x08008df4
 8007284:	f8db 301c 	ldr.w	r3, [fp, #28]
 8007288:	6018      	str	r0, [r3, #0]
 800728a:	9b07      	ldr	r3, [sp, #28]
 800728c:	2b0e      	cmp	r3, #14
 800728e:	f200 80a4 	bhi.w	80073da <_dtoa_r+0x442>
 8007292:	2c00      	cmp	r4, #0
 8007294:	f000 80a1 	beq.w	80073da <_dtoa_r+0x442>
 8007298:	2f00      	cmp	r7, #0
 800729a:	dd33      	ble.n	8007304 <_dtoa_r+0x36c>
 800729c:	4bad      	ldr	r3, [pc, #692]	@ (8007554 <_dtoa_r+0x5bc>)
 800729e:	f007 020f 	and.w	r2, r7, #15
 80072a2:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80072a6:	ed93 7b00 	vldr	d7, [r3]
 80072aa:	05f8      	lsls	r0, r7, #23
 80072ac:	ed8d 7b04 	vstr	d7, [sp, #16]
 80072b0:	ea4f 1427 	mov.w	r4, r7, asr #4
 80072b4:	d516      	bpl.n	80072e4 <_dtoa_r+0x34c>
 80072b6:	4ba8      	ldr	r3, [pc, #672]	@ (8007558 <_dtoa_r+0x5c0>)
 80072b8:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80072bc:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 80072c0:	f7f9 fae4 	bl	800088c <__aeabi_ddiv>
 80072c4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80072c8:	f004 040f 	and.w	r4, r4, #15
 80072cc:	2603      	movs	r6, #3
 80072ce:	4da2      	ldr	r5, [pc, #648]	@ (8007558 <_dtoa_r+0x5c0>)
 80072d0:	b954      	cbnz	r4, 80072e8 <_dtoa_r+0x350>
 80072d2:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80072d6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80072da:	f7f9 fad7 	bl	800088c <__aeabi_ddiv>
 80072de:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80072e2:	e028      	b.n	8007336 <_dtoa_r+0x39e>
 80072e4:	2602      	movs	r6, #2
 80072e6:	e7f2      	b.n	80072ce <_dtoa_r+0x336>
 80072e8:	07e1      	lsls	r1, r4, #31
 80072ea:	d508      	bpl.n	80072fe <_dtoa_r+0x366>
 80072ec:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80072f0:	e9d5 2300 	ldrd	r2, r3, [r5]
 80072f4:	f7f9 f9a0 	bl	8000638 <__aeabi_dmul>
 80072f8:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80072fc:	3601      	adds	r6, #1
 80072fe:	1064      	asrs	r4, r4, #1
 8007300:	3508      	adds	r5, #8
 8007302:	e7e5      	b.n	80072d0 <_dtoa_r+0x338>
 8007304:	f000 80d2 	beq.w	80074ac <_dtoa_r+0x514>
 8007308:	427c      	negs	r4, r7
 800730a:	4b92      	ldr	r3, [pc, #584]	@ (8007554 <_dtoa_r+0x5bc>)
 800730c:	4d92      	ldr	r5, [pc, #584]	@ (8007558 <_dtoa_r+0x5c0>)
 800730e:	f004 020f 	and.w	r2, r4, #15
 8007312:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8007316:	e9d3 2300 	ldrd	r2, r3, [r3]
 800731a:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800731e:	f7f9 f98b 	bl	8000638 <__aeabi_dmul>
 8007322:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007326:	1124      	asrs	r4, r4, #4
 8007328:	2300      	movs	r3, #0
 800732a:	2602      	movs	r6, #2
 800732c:	2c00      	cmp	r4, #0
 800732e:	f040 80b2 	bne.w	8007496 <_dtoa_r+0x4fe>
 8007332:	2b00      	cmp	r3, #0
 8007334:	d1d3      	bne.n	80072de <_dtoa_r+0x346>
 8007336:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8007338:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 800733c:	2b00      	cmp	r3, #0
 800733e:	f000 80b7 	beq.w	80074b0 <_dtoa_r+0x518>
 8007342:	4b86      	ldr	r3, [pc, #536]	@ (800755c <_dtoa_r+0x5c4>)
 8007344:	2200      	movs	r2, #0
 8007346:	4620      	mov	r0, r4
 8007348:	4629      	mov	r1, r5
 800734a:	f7f9 fbe7 	bl	8000b1c <__aeabi_dcmplt>
 800734e:	2800      	cmp	r0, #0
 8007350:	f000 80ae 	beq.w	80074b0 <_dtoa_r+0x518>
 8007354:	9b07      	ldr	r3, [sp, #28]
 8007356:	2b00      	cmp	r3, #0
 8007358:	f000 80aa 	beq.w	80074b0 <_dtoa_r+0x518>
 800735c:	9b00      	ldr	r3, [sp, #0]
 800735e:	2b00      	cmp	r3, #0
 8007360:	dd37      	ble.n	80073d2 <_dtoa_r+0x43a>
 8007362:	1e7b      	subs	r3, r7, #1
 8007364:	9304      	str	r3, [sp, #16]
 8007366:	4620      	mov	r0, r4
 8007368:	4b7d      	ldr	r3, [pc, #500]	@ (8007560 <_dtoa_r+0x5c8>)
 800736a:	2200      	movs	r2, #0
 800736c:	4629      	mov	r1, r5
 800736e:	f7f9 f963 	bl	8000638 <__aeabi_dmul>
 8007372:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007376:	9c00      	ldr	r4, [sp, #0]
 8007378:	3601      	adds	r6, #1
 800737a:	4630      	mov	r0, r6
 800737c:	f7f9 f8f2 	bl	8000564 <__aeabi_i2d>
 8007380:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8007384:	f7f9 f958 	bl	8000638 <__aeabi_dmul>
 8007388:	4b76      	ldr	r3, [pc, #472]	@ (8007564 <_dtoa_r+0x5cc>)
 800738a:	2200      	movs	r2, #0
 800738c:	f7f8 ff9e 	bl	80002cc <__adddf3>
 8007390:	4605      	mov	r5, r0
 8007392:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 8007396:	2c00      	cmp	r4, #0
 8007398:	f040 808d 	bne.w	80074b6 <_dtoa_r+0x51e>
 800739c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80073a0:	4b71      	ldr	r3, [pc, #452]	@ (8007568 <_dtoa_r+0x5d0>)
 80073a2:	2200      	movs	r2, #0
 80073a4:	f7f8 ff90 	bl	80002c8 <__aeabi_dsub>
 80073a8:	4602      	mov	r2, r0
 80073aa:	460b      	mov	r3, r1
 80073ac:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80073b0:	462a      	mov	r2, r5
 80073b2:	4633      	mov	r3, r6
 80073b4:	f7f9 fbd0 	bl	8000b58 <__aeabi_dcmpgt>
 80073b8:	2800      	cmp	r0, #0
 80073ba:	f040 828b 	bne.w	80078d4 <_dtoa_r+0x93c>
 80073be:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80073c2:	462a      	mov	r2, r5
 80073c4:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 80073c8:	f7f9 fba8 	bl	8000b1c <__aeabi_dcmplt>
 80073cc:	2800      	cmp	r0, #0
 80073ce:	f040 8128 	bne.w	8007622 <_dtoa_r+0x68a>
 80073d2:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 80073d6:	e9cd 3402 	strd	r3, r4, [sp, #8]
 80073da:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 80073dc:	2b00      	cmp	r3, #0
 80073de:	f2c0 815a 	blt.w	8007696 <_dtoa_r+0x6fe>
 80073e2:	2f0e      	cmp	r7, #14
 80073e4:	f300 8157 	bgt.w	8007696 <_dtoa_r+0x6fe>
 80073e8:	4b5a      	ldr	r3, [pc, #360]	@ (8007554 <_dtoa_r+0x5bc>)
 80073ea:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 80073ee:	ed93 7b00 	vldr	d7, [r3]
 80073f2:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80073f4:	2b00      	cmp	r3, #0
 80073f6:	ed8d 7b00 	vstr	d7, [sp]
 80073fa:	da03      	bge.n	8007404 <_dtoa_r+0x46c>
 80073fc:	9b07      	ldr	r3, [sp, #28]
 80073fe:	2b00      	cmp	r3, #0
 8007400:	f340 8101 	ble.w	8007606 <_dtoa_r+0x66e>
 8007404:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 8007408:	4656      	mov	r6, sl
 800740a:	e9dd 2300 	ldrd	r2, r3, [sp]
 800740e:	4620      	mov	r0, r4
 8007410:	4629      	mov	r1, r5
 8007412:	f7f9 fa3b 	bl	800088c <__aeabi_ddiv>
 8007416:	f7f9 fbbf 	bl	8000b98 <__aeabi_d2iz>
 800741a:	4680      	mov	r8, r0
 800741c:	f7f9 f8a2 	bl	8000564 <__aeabi_i2d>
 8007420:	e9dd 2300 	ldrd	r2, r3, [sp]
 8007424:	f7f9 f908 	bl	8000638 <__aeabi_dmul>
 8007428:	4602      	mov	r2, r0
 800742a:	460b      	mov	r3, r1
 800742c:	4620      	mov	r0, r4
 800742e:	4629      	mov	r1, r5
 8007430:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 8007434:	f7f8 ff48 	bl	80002c8 <__aeabi_dsub>
 8007438:	f806 4b01 	strb.w	r4, [r6], #1
 800743c:	9d07      	ldr	r5, [sp, #28]
 800743e:	eba6 040a 	sub.w	r4, r6, sl
 8007442:	42a5      	cmp	r5, r4
 8007444:	4602      	mov	r2, r0
 8007446:	460b      	mov	r3, r1
 8007448:	f040 8117 	bne.w	800767a <_dtoa_r+0x6e2>
 800744c:	f7f8 ff3e 	bl	80002cc <__adddf3>
 8007450:	e9dd 2300 	ldrd	r2, r3, [sp]
 8007454:	4604      	mov	r4, r0
 8007456:	460d      	mov	r5, r1
 8007458:	f7f9 fb7e 	bl	8000b58 <__aeabi_dcmpgt>
 800745c:	2800      	cmp	r0, #0
 800745e:	f040 80f9 	bne.w	8007654 <_dtoa_r+0x6bc>
 8007462:	e9dd 2300 	ldrd	r2, r3, [sp]
 8007466:	4620      	mov	r0, r4
 8007468:	4629      	mov	r1, r5
 800746a:	f7f9 fb4d 	bl	8000b08 <__aeabi_dcmpeq>
 800746e:	b118      	cbz	r0, 8007478 <_dtoa_r+0x4e0>
 8007470:	f018 0f01 	tst.w	r8, #1
 8007474:	f040 80ee 	bne.w	8007654 <_dtoa_r+0x6bc>
 8007478:	4649      	mov	r1, r9
 800747a:	4658      	mov	r0, fp
 800747c:	f000 fbda 	bl	8007c34 <_Bfree>
 8007480:	2300      	movs	r3, #0
 8007482:	7033      	strb	r3, [r6, #0]
 8007484:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8007486:	3701      	adds	r7, #1
 8007488:	601f      	str	r7, [r3, #0]
 800748a:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800748c:	2b00      	cmp	r3, #0
 800748e:	f000 831d 	beq.w	8007acc <_dtoa_r+0xb34>
 8007492:	601e      	str	r6, [r3, #0]
 8007494:	e31a      	b.n	8007acc <_dtoa_r+0xb34>
 8007496:	07e2      	lsls	r2, r4, #31
 8007498:	d505      	bpl.n	80074a6 <_dtoa_r+0x50e>
 800749a:	e9d5 2300 	ldrd	r2, r3, [r5]
 800749e:	f7f9 f8cb 	bl	8000638 <__aeabi_dmul>
 80074a2:	3601      	adds	r6, #1
 80074a4:	2301      	movs	r3, #1
 80074a6:	1064      	asrs	r4, r4, #1
 80074a8:	3508      	adds	r5, #8
 80074aa:	e73f      	b.n	800732c <_dtoa_r+0x394>
 80074ac:	2602      	movs	r6, #2
 80074ae:	e742      	b.n	8007336 <_dtoa_r+0x39e>
 80074b0:	9c07      	ldr	r4, [sp, #28]
 80074b2:	9704      	str	r7, [sp, #16]
 80074b4:	e761      	b.n	800737a <_dtoa_r+0x3e2>
 80074b6:	4b27      	ldr	r3, [pc, #156]	@ (8007554 <_dtoa_r+0x5bc>)
 80074b8:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 80074ba:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 80074be:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 80074c2:	4454      	add	r4, sl
 80074c4:	2900      	cmp	r1, #0
 80074c6:	d053      	beq.n	8007570 <_dtoa_r+0x5d8>
 80074c8:	4928      	ldr	r1, [pc, #160]	@ (800756c <_dtoa_r+0x5d4>)
 80074ca:	2000      	movs	r0, #0
 80074cc:	f7f9 f9de 	bl	800088c <__aeabi_ddiv>
 80074d0:	4633      	mov	r3, r6
 80074d2:	462a      	mov	r2, r5
 80074d4:	f7f8 fef8 	bl	80002c8 <__aeabi_dsub>
 80074d8:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 80074dc:	4656      	mov	r6, sl
 80074de:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80074e2:	f7f9 fb59 	bl	8000b98 <__aeabi_d2iz>
 80074e6:	4605      	mov	r5, r0
 80074e8:	f7f9 f83c 	bl	8000564 <__aeabi_i2d>
 80074ec:	4602      	mov	r2, r0
 80074ee:	460b      	mov	r3, r1
 80074f0:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80074f4:	f7f8 fee8 	bl	80002c8 <__aeabi_dsub>
 80074f8:	3530      	adds	r5, #48	@ 0x30
 80074fa:	4602      	mov	r2, r0
 80074fc:	460b      	mov	r3, r1
 80074fe:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8007502:	f806 5b01 	strb.w	r5, [r6], #1
 8007506:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800750a:	f7f9 fb07 	bl	8000b1c <__aeabi_dcmplt>
 800750e:	2800      	cmp	r0, #0
 8007510:	d171      	bne.n	80075f6 <_dtoa_r+0x65e>
 8007512:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8007516:	4911      	ldr	r1, [pc, #68]	@ (800755c <_dtoa_r+0x5c4>)
 8007518:	2000      	movs	r0, #0
 800751a:	f7f8 fed5 	bl	80002c8 <__aeabi_dsub>
 800751e:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8007522:	f7f9 fafb 	bl	8000b1c <__aeabi_dcmplt>
 8007526:	2800      	cmp	r0, #0
 8007528:	f040 8095 	bne.w	8007656 <_dtoa_r+0x6be>
 800752c:	42a6      	cmp	r6, r4
 800752e:	f43f af50 	beq.w	80073d2 <_dtoa_r+0x43a>
 8007532:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 8007536:	4b0a      	ldr	r3, [pc, #40]	@ (8007560 <_dtoa_r+0x5c8>)
 8007538:	2200      	movs	r2, #0
 800753a:	f7f9 f87d 	bl	8000638 <__aeabi_dmul>
 800753e:	4b08      	ldr	r3, [pc, #32]	@ (8007560 <_dtoa_r+0x5c8>)
 8007540:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8007544:	2200      	movs	r2, #0
 8007546:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800754a:	f7f9 f875 	bl	8000638 <__aeabi_dmul>
 800754e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007552:	e7c4      	b.n	80074de <_dtoa_r+0x546>
 8007554:	08008f38 	.word	0x08008f38
 8007558:	08008f10 	.word	0x08008f10
 800755c:	3ff00000 	.word	0x3ff00000
 8007560:	40240000 	.word	0x40240000
 8007564:	401c0000 	.word	0x401c0000
 8007568:	40140000 	.word	0x40140000
 800756c:	3fe00000 	.word	0x3fe00000
 8007570:	4631      	mov	r1, r6
 8007572:	4628      	mov	r0, r5
 8007574:	f7f9 f860 	bl	8000638 <__aeabi_dmul>
 8007578:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800757c:	9415      	str	r4, [sp, #84]	@ 0x54
 800757e:	4656      	mov	r6, sl
 8007580:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007584:	f7f9 fb08 	bl	8000b98 <__aeabi_d2iz>
 8007588:	4605      	mov	r5, r0
 800758a:	f7f8 ffeb 	bl	8000564 <__aeabi_i2d>
 800758e:	4602      	mov	r2, r0
 8007590:	460b      	mov	r3, r1
 8007592:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007596:	f7f8 fe97 	bl	80002c8 <__aeabi_dsub>
 800759a:	3530      	adds	r5, #48	@ 0x30
 800759c:	f806 5b01 	strb.w	r5, [r6], #1
 80075a0:	4602      	mov	r2, r0
 80075a2:	460b      	mov	r3, r1
 80075a4:	42a6      	cmp	r6, r4
 80075a6:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80075aa:	f04f 0200 	mov.w	r2, #0
 80075ae:	d124      	bne.n	80075fa <_dtoa_r+0x662>
 80075b0:	4bac      	ldr	r3, [pc, #688]	@ (8007864 <_dtoa_r+0x8cc>)
 80075b2:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 80075b6:	f7f8 fe89 	bl	80002cc <__adddf3>
 80075ba:	4602      	mov	r2, r0
 80075bc:	460b      	mov	r3, r1
 80075be:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80075c2:	f7f9 fac9 	bl	8000b58 <__aeabi_dcmpgt>
 80075c6:	2800      	cmp	r0, #0
 80075c8:	d145      	bne.n	8007656 <_dtoa_r+0x6be>
 80075ca:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 80075ce:	49a5      	ldr	r1, [pc, #660]	@ (8007864 <_dtoa_r+0x8cc>)
 80075d0:	2000      	movs	r0, #0
 80075d2:	f7f8 fe79 	bl	80002c8 <__aeabi_dsub>
 80075d6:	4602      	mov	r2, r0
 80075d8:	460b      	mov	r3, r1
 80075da:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80075de:	f7f9 fa9d 	bl	8000b1c <__aeabi_dcmplt>
 80075e2:	2800      	cmp	r0, #0
 80075e4:	f43f aef5 	beq.w	80073d2 <_dtoa_r+0x43a>
 80075e8:	9e15      	ldr	r6, [sp, #84]	@ 0x54
 80075ea:	1e73      	subs	r3, r6, #1
 80075ec:	9315      	str	r3, [sp, #84]	@ 0x54
 80075ee:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 80075f2:	2b30      	cmp	r3, #48	@ 0x30
 80075f4:	d0f8      	beq.n	80075e8 <_dtoa_r+0x650>
 80075f6:	9f04      	ldr	r7, [sp, #16]
 80075f8:	e73e      	b.n	8007478 <_dtoa_r+0x4e0>
 80075fa:	4b9b      	ldr	r3, [pc, #620]	@ (8007868 <_dtoa_r+0x8d0>)
 80075fc:	f7f9 f81c 	bl	8000638 <__aeabi_dmul>
 8007600:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007604:	e7bc      	b.n	8007580 <_dtoa_r+0x5e8>
 8007606:	d10c      	bne.n	8007622 <_dtoa_r+0x68a>
 8007608:	4b98      	ldr	r3, [pc, #608]	@ (800786c <_dtoa_r+0x8d4>)
 800760a:	2200      	movs	r2, #0
 800760c:	e9dd 0100 	ldrd	r0, r1, [sp]
 8007610:	f7f9 f812 	bl	8000638 <__aeabi_dmul>
 8007614:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8007618:	f7f9 fa94 	bl	8000b44 <__aeabi_dcmpge>
 800761c:	2800      	cmp	r0, #0
 800761e:	f000 8157 	beq.w	80078d0 <_dtoa_r+0x938>
 8007622:	2400      	movs	r4, #0
 8007624:	4625      	mov	r5, r4
 8007626:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8007628:	43db      	mvns	r3, r3
 800762a:	9304      	str	r3, [sp, #16]
 800762c:	4656      	mov	r6, sl
 800762e:	2700      	movs	r7, #0
 8007630:	4621      	mov	r1, r4
 8007632:	4658      	mov	r0, fp
 8007634:	f000 fafe 	bl	8007c34 <_Bfree>
 8007638:	2d00      	cmp	r5, #0
 800763a:	d0dc      	beq.n	80075f6 <_dtoa_r+0x65e>
 800763c:	b12f      	cbz	r7, 800764a <_dtoa_r+0x6b2>
 800763e:	42af      	cmp	r7, r5
 8007640:	d003      	beq.n	800764a <_dtoa_r+0x6b2>
 8007642:	4639      	mov	r1, r7
 8007644:	4658      	mov	r0, fp
 8007646:	f000 faf5 	bl	8007c34 <_Bfree>
 800764a:	4629      	mov	r1, r5
 800764c:	4658      	mov	r0, fp
 800764e:	f000 faf1 	bl	8007c34 <_Bfree>
 8007652:	e7d0      	b.n	80075f6 <_dtoa_r+0x65e>
 8007654:	9704      	str	r7, [sp, #16]
 8007656:	4633      	mov	r3, r6
 8007658:	461e      	mov	r6, r3
 800765a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800765e:	2a39      	cmp	r2, #57	@ 0x39
 8007660:	d107      	bne.n	8007672 <_dtoa_r+0x6da>
 8007662:	459a      	cmp	sl, r3
 8007664:	d1f8      	bne.n	8007658 <_dtoa_r+0x6c0>
 8007666:	9a04      	ldr	r2, [sp, #16]
 8007668:	3201      	adds	r2, #1
 800766a:	9204      	str	r2, [sp, #16]
 800766c:	2230      	movs	r2, #48	@ 0x30
 800766e:	f88a 2000 	strb.w	r2, [sl]
 8007672:	781a      	ldrb	r2, [r3, #0]
 8007674:	3201      	adds	r2, #1
 8007676:	701a      	strb	r2, [r3, #0]
 8007678:	e7bd      	b.n	80075f6 <_dtoa_r+0x65e>
 800767a:	4b7b      	ldr	r3, [pc, #492]	@ (8007868 <_dtoa_r+0x8d0>)
 800767c:	2200      	movs	r2, #0
 800767e:	f7f8 ffdb 	bl	8000638 <__aeabi_dmul>
 8007682:	2200      	movs	r2, #0
 8007684:	2300      	movs	r3, #0
 8007686:	4604      	mov	r4, r0
 8007688:	460d      	mov	r5, r1
 800768a:	f7f9 fa3d 	bl	8000b08 <__aeabi_dcmpeq>
 800768e:	2800      	cmp	r0, #0
 8007690:	f43f aebb 	beq.w	800740a <_dtoa_r+0x472>
 8007694:	e6f0      	b.n	8007478 <_dtoa_r+0x4e0>
 8007696:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8007698:	2a00      	cmp	r2, #0
 800769a:	f000 80db 	beq.w	8007854 <_dtoa_r+0x8bc>
 800769e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80076a0:	2a01      	cmp	r2, #1
 80076a2:	f300 80bf 	bgt.w	8007824 <_dtoa_r+0x88c>
 80076a6:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 80076a8:	2a00      	cmp	r2, #0
 80076aa:	f000 80b7 	beq.w	800781c <_dtoa_r+0x884>
 80076ae:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 80076b2:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 80076b4:	4646      	mov	r6, r8
 80076b6:	9a08      	ldr	r2, [sp, #32]
 80076b8:	2101      	movs	r1, #1
 80076ba:	441a      	add	r2, r3
 80076bc:	4658      	mov	r0, fp
 80076be:	4498      	add	r8, r3
 80076c0:	9208      	str	r2, [sp, #32]
 80076c2:	f000 fb6b 	bl	8007d9c <__i2b>
 80076c6:	4605      	mov	r5, r0
 80076c8:	b15e      	cbz	r6, 80076e2 <_dtoa_r+0x74a>
 80076ca:	9b08      	ldr	r3, [sp, #32]
 80076cc:	2b00      	cmp	r3, #0
 80076ce:	dd08      	ble.n	80076e2 <_dtoa_r+0x74a>
 80076d0:	42b3      	cmp	r3, r6
 80076d2:	9a08      	ldr	r2, [sp, #32]
 80076d4:	bfa8      	it	ge
 80076d6:	4633      	movge	r3, r6
 80076d8:	eba8 0803 	sub.w	r8, r8, r3
 80076dc:	1af6      	subs	r6, r6, r3
 80076de:	1ad3      	subs	r3, r2, r3
 80076e0:	9308      	str	r3, [sp, #32]
 80076e2:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80076e4:	b1f3      	cbz	r3, 8007724 <_dtoa_r+0x78c>
 80076e6:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80076e8:	2b00      	cmp	r3, #0
 80076ea:	f000 80b7 	beq.w	800785c <_dtoa_r+0x8c4>
 80076ee:	b18c      	cbz	r4, 8007714 <_dtoa_r+0x77c>
 80076f0:	4629      	mov	r1, r5
 80076f2:	4622      	mov	r2, r4
 80076f4:	4658      	mov	r0, fp
 80076f6:	f000 fc11 	bl	8007f1c <__pow5mult>
 80076fa:	464a      	mov	r2, r9
 80076fc:	4601      	mov	r1, r0
 80076fe:	4605      	mov	r5, r0
 8007700:	4658      	mov	r0, fp
 8007702:	f000 fb61 	bl	8007dc8 <__multiply>
 8007706:	4649      	mov	r1, r9
 8007708:	9004      	str	r0, [sp, #16]
 800770a:	4658      	mov	r0, fp
 800770c:	f000 fa92 	bl	8007c34 <_Bfree>
 8007710:	9b04      	ldr	r3, [sp, #16]
 8007712:	4699      	mov	r9, r3
 8007714:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8007716:	1b1a      	subs	r2, r3, r4
 8007718:	d004      	beq.n	8007724 <_dtoa_r+0x78c>
 800771a:	4649      	mov	r1, r9
 800771c:	4658      	mov	r0, fp
 800771e:	f000 fbfd 	bl	8007f1c <__pow5mult>
 8007722:	4681      	mov	r9, r0
 8007724:	2101      	movs	r1, #1
 8007726:	4658      	mov	r0, fp
 8007728:	f000 fb38 	bl	8007d9c <__i2b>
 800772c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800772e:	4604      	mov	r4, r0
 8007730:	2b00      	cmp	r3, #0
 8007732:	f000 81cf 	beq.w	8007ad4 <_dtoa_r+0xb3c>
 8007736:	461a      	mov	r2, r3
 8007738:	4601      	mov	r1, r0
 800773a:	4658      	mov	r0, fp
 800773c:	f000 fbee 	bl	8007f1c <__pow5mult>
 8007740:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007742:	2b01      	cmp	r3, #1
 8007744:	4604      	mov	r4, r0
 8007746:	f300 8095 	bgt.w	8007874 <_dtoa_r+0x8dc>
 800774a:	9b02      	ldr	r3, [sp, #8]
 800774c:	2b00      	cmp	r3, #0
 800774e:	f040 8087 	bne.w	8007860 <_dtoa_r+0x8c8>
 8007752:	9b03      	ldr	r3, [sp, #12]
 8007754:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8007758:	2b00      	cmp	r3, #0
 800775a:	f040 8089 	bne.w	8007870 <_dtoa_r+0x8d8>
 800775e:	9b03      	ldr	r3, [sp, #12]
 8007760:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8007764:	0d1b      	lsrs	r3, r3, #20
 8007766:	051b      	lsls	r3, r3, #20
 8007768:	b12b      	cbz	r3, 8007776 <_dtoa_r+0x7de>
 800776a:	9b08      	ldr	r3, [sp, #32]
 800776c:	3301      	adds	r3, #1
 800776e:	9308      	str	r3, [sp, #32]
 8007770:	f108 0801 	add.w	r8, r8, #1
 8007774:	2301      	movs	r3, #1
 8007776:	930a      	str	r3, [sp, #40]	@ 0x28
 8007778:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800777a:	2b00      	cmp	r3, #0
 800777c:	f000 81b0 	beq.w	8007ae0 <_dtoa_r+0xb48>
 8007780:	6923      	ldr	r3, [r4, #16]
 8007782:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8007786:	6918      	ldr	r0, [r3, #16]
 8007788:	f000 fabc 	bl	8007d04 <__hi0bits>
 800778c:	f1c0 0020 	rsb	r0, r0, #32
 8007790:	9b08      	ldr	r3, [sp, #32]
 8007792:	4418      	add	r0, r3
 8007794:	f010 001f 	ands.w	r0, r0, #31
 8007798:	d077      	beq.n	800788a <_dtoa_r+0x8f2>
 800779a:	f1c0 0320 	rsb	r3, r0, #32
 800779e:	2b04      	cmp	r3, #4
 80077a0:	dd6b      	ble.n	800787a <_dtoa_r+0x8e2>
 80077a2:	9b08      	ldr	r3, [sp, #32]
 80077a4:	f1c0 001c 	rsb	r0, r0, #28
 80077a8:	4403      	add	r3, r0
 80077aa:	4480      	add	r8, r0
 80077ac:	4406      	add	r6, r0
 80077ae:	9308      	str	r3, [sp, #32]
 80077b0:	f1b8 0f00 	cmp.w	r8, #0
 80077b4:	dd05      	ble.n	80077c2 <_dtoa_r+0x82a>
 80077b6:	4649      	mov	r1, r9
 80077b8:	4642      	mov	r2, r8
 80077ba:	4658      	mov	r0, fp
 80077bc:	f000 fc08 	bl	8007fd0 <__lshift>
 80077c0:	4681      	mov	r9, r0
 80077c2:	9b08      	ldr	r3, [sp, #32]
 80077c4:	2b00      	cmp	r3, #0
 80077c6:	dd05      	ble.n	80077d4 <_dtoa_r+0x83c>
 80077c8:	4621      	mov	r1, r4
 80077ca:	461a      	mov	r2, r3
 80077cc:	4658      	mov	r0, fp
 80077ce:	f000 fbff 	bl	8007fd0 <__lshift>
 80077d2:	4604      	mov	r4, r0
 80077d4:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 80077d6:	2b00      	cmp	r3, #0
 80077d8:	d059      	beq.n	800788e <_dtoa_r+0x8f6>
 80077da:	4621      	mov	r1, r4
 80077dc:	4648      	mov	r0, r9
 80077de:	f000 fc63 	bl	80080a8 <__mcmp>
 80077e2:	2800      	cmp	r0, #0
 80077e4:	da53      	bge.n	800788e <_dtoa_r+0x8f6>
 80077e6:	1e7b      	subs	r3, r7, #1
 80077e8:	9304      	str	r3, [sp, #16]
 80077ea:	4649      	mov	r1, r9
 80077ec:	2300      	movs	r3, #0
 80077ee:	220a      	movs	r2, #10
 80077f0:	4658      	mov	r0, fp
 80077f2:	f000 fa41 	bl	8007c78 <__multadd>
 80077f6:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80077f8:	4681      	mov	r9, r0
 80077fa:	2b00      	cmp	r3, #0
 80077fc:	f000 8172 	beq.w	8007ae4 <_dtoa_r+0xb4c>
 8007800:	2300      	movs	r3, #0
 8007802:	4629      	mov	r1, r5
 8007804:	220a      	movs	r2, #10
 8007806:	4658      	mov	r0, fp
 8007808:	f000 fa36 	bl	8007c78 <__multadd>
 800780c:	9b00      	ldr	r3, [sp, #0]
 800780e:	2b00      	cmp	r3, #0
 8007810:	4605      	mov	r5, r0
 8007812:	dc67      	bgt.n	80078e4 <_dtoa_r+0x94c>
 8007814:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007816:	2b02      	cmp	r3, #2
 8007818:	dc41      	bgt.n	800789e <_dtoa_r+0x906>
 800781a:	e063      	b.n	80078e4 <_dtoa_r+0x94c>
 800781c:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 800781e:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 8007822:	e746      	b.n	80076b2 <_dtoa_r+0x71a>
 8007824:	9b07      	ldr	r3, [sp, #28]
 8007826:	1e5c      	subs	r4, r3, #1
 8007828:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800782a:	42a3      	cmp	r3, r4
 800782c:	bfbf      	itttt	lt
 800782e:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 8007830:	9a0f      	ldrlt	r2, [sp, #60]	@ 0x3c
 8007832:	940a      	strlt	r4, [sp, #40]	@ 0x28
 8007834:	1ae3      	sublt	r3, r4, r3
 8007836:	bfb4      	ite	lt
 8007838:	18d2      	addlt	r2, r2, r3
 800783a:	1b1c      	subge	r4, r3, r4
 800783c:	9b07      	ldr	r3, [sp, #28]
 800783e:	bfbc      	itt	lt
 8007840:	920f      	strlt	r2, [sp, #60]	@ 0x3c
 8007842:	2400      	movlt	r4, #0
 8007844:	2b00      	cmp	r3, #0
 8007846:	bfb5      	itete	lt
 8007848:	eba8 0603 	sublt.w	r6, r8, r3
 800784c:	9b07      	ldrge	r3, [sp, #28]
 800784e:	2300      	movlt	r3, #0
 8007850:	4646      	movge	r6, r8
 8007852:	e730      	b.n	80076b6 <_dtoa_r+0x71e>
 8007854:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8007856:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 8007858:	4646      	mov	r6, r8
 800785a:	e735      	b.n	80076c8 <_dtoa_r+0x730>
 800785c:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800785e:	e75c      	b.n	800771a <_dtoa_r+0x782>
 8007860:	2300      	movs	r3, #0
 8007862:	e788      	b.n	8007776 <_dtoa_r+0x7de>
 8007864:	3fe00000 	.word	0x3fe00000
 8007868:	40240000 	.word	0x40240000
 800786c:	40140000 	.word	0x40140000
 8007870:	9b02      	ldr	r3, [sp, #8]
 8007872:	e780      	b.n	8007776 <_dtoa_r+0x7de>
 8007874:	2300      	movs	r3, #0
 8007876:	930a      	str	r3, [sp, #40]	@ 0x28
 8007878:	e782      	b.n	8007780 <_dtoa_r+0x7e8>
 800787a:	d099      	beq.n	80077b0 <_dtoa_r+0x818>
 800787c:	9a08      	ldr	r2, [sp, #32]
 800787e:	331c      	adds	r3, #28
 8007880:	441a      	add	r2, r3
 8007882:	4498      	add	r8, r3
 8007884:	441e      	add	r6, r3
 8007886:	9208      	str	r2, [sp, #32]
 8007888:	e792      	b.n	80077b0 <_dtoa_r+0x818>
 800788a:	4603      	mov	r3, r0
 800788c:	e7f6      	b.n	800787c <_dtoa_r+0x8e4>
 800788e:	9b07      	ldr	r3, [sp, #28]
 8007890:	9704      	str	r7, [sp, #16]
 8007892:	2b00      	cmp	r3, #0
 8007894:	dc20      	bgt.n	80078d8 <_dtoa_r+0x940>
 8007896:	9300      	str	r3, [sp, #0]
 8007898:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800789a:	2b02      	cmp	r3, #2
 800789c:	dd1e      	ble.n	80078dc <_dtoa_r+0x944>
 800789e:	9b00      	ldr	r3, [sp, #0]
 80078a0:	2b00      	cmp	r3, #0
 80078a2:	f47f aec0 	bne.w	8007626 <_dtoa_r+0x68e>
 80078a6:	4621      	mov	r1, r4
 80078a8:	2205      	movs	r2, #5
 80078aa:	4658      	mov	r0, fp
 80078ac:	f000 f9e4 	bl	8007c78 <__multadd>
 80078b0:	4601      	mov	r1, r0
 80078b2:	4604      	mov	r4, r0
 80078b4:	4648      	mov	r0, r9
 80078b6:	f000 fbf7 	bl	80080a8 <__mcmp>
 80078ba:	2800      	cmp	r0, #0
 80078bc:	f77f aeb3 	ble.w	8007626 <_dtoa_r+0x68e>
 80078c0:	4656      	mov	r6, sl
 80078c2:	2331      	movs	r3, #49	@ 0x31
 80078c4:	f806 3b01 	strb.w	r3, [r6], #1
 80078c8:	9b04      	ldr	r3, [sp, #16]
 80078ca:	3301      	adds	r3, #1
 80078cc:	9304      	str	r3, [sp, #16]
 80078ce:	e6ae      	b.n	800762e <_dtoa_r+0x696>
 80078d0:	9c07      	ldr	r4, [sp, #28]
 80078d2:	9704      	str	r7, [sp, #16]
 80078d4:	4625      	mov	r5, r4
 80078d6:	e7f3      	b.n	80078c0 <_dtoa_r+0x928>
 80078d8:	9b07      	ldr	r3, [sp, #28]
 80078da:	9300      	str	r3, [sp, #0]
 80078dc:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80078de:	2b00      	cmp	r3, #0
 80078e0:	f000 8104 	beq.w	8007aec <_dtoa_r+0xb54>
 80078e4:	2e00      	cmp	r6, #0
 80078e6:	dd05      	ble.n	80078f4 <_dtoa_r+0x95c>
 80078e8:	4629      	mov	r1, r5
 80078ea:	4632      	mov	r2, r6
 80078ec:	4658      	mov	r0, fp
 80078ee:	f000 fb6f 	bl	8007fd0 <__lshift>
 80078f2:	4605      	mov	r5, r0
 80078f4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80078f6:	2b00      	cmp	r3, #0
 80078f8:	d05a      	beq.n	80079b0 <_dtoa_r+0xa18>
 80078fa:	6869      	ldr	r1, [r5, #4]
 80078fc:	4658      	mov	r0, fp
 80078fe:	f000 f959 	bl	8007bb4 <_Balloc>
 8007902:	4606      	mov	r6, r0
 8007904:	b928      	cbnz	r0, 8007912 <_dtoa_r+0x97a>
 8007906:	4b84      	ldr	r3, [pc, #528]	@ (8007b18 <_dtoa_r+0xb80>)
 8007908:	4602      	mov	r2, r0
 800790a:	f240 21ef 	movw	r1, #751	@ 0x2ef
 800790e:	f7ff bb5a 	b.w	8006fc6 <_dtoa_r+0x2e>
 8007912:	692a      	ldr	r2, [r5, #16]
 8007914:	3202      	adds	r2, #2
 8007916:	0092      	lsls	r2, r2, #2
 8007918:	f105 010c 	add.w	r1, r5, #12
 800791c:	300c      	adds	r0, #12
 800791e:	f7ff faa4 	bl	8006e6a <memcpy>
 8007922:	2201      	movs	r2, #1
 8007924:	4631      	mov	r1, r6
 8007926:	4658      	mov	r0, fp
 8007928:	f000 fb52 	bl	8007fd0 <__lshift>
 800792c:	f10a 0301 	add.w	r3, sl, #1
 8007930:	9307      	str	r3, [sp, #28]
 8007932:	9b00      	ldr	r3, [sp, #0]
 8007934:	4453      	add	r3, sl
 8007936:	930b      	str	r3, [sp, #44]	@ 0x2c
 8007938:	9b02      	ldr	r3, [sp, #8]
 800793a:	f003 0301 	and.w	r3, r3, #1
 800793e:	462f      	mov	r7, r5
 8007940:	930a      	str	r3, [sp, #40]	@ 0x28
 8007942:	4605      	mov	r5, r0
 8007944:	9b07      	ldr	r3, [sp, #28]
 8007946:	4621      	mov	r1, r4
 8007948:	3b01      	subs	r3, #1
 800794a:	4648      	mov	r0, r9
 800794c:	9300      	str	r3, [sp, #0]
 800794e:	f7ff fa9a 	bl	8006e86 <quorem>
 8007952:	4639      	mov	r1, r7
 8007954:	9002      	str	r0, [sp, #8]
 8007956:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 800795a:	4648      	mov	r0, r9
 800795c:	f000 fba4 	bl	80080a8 <__mcmp>
 8007960:	462a      	mov	r2, r5
 8007962:	9008      	str	r0, [sp, #32]
 8007964:	4621      	mov	r1, r4
 8007966:	4658      	mov	r0, fp
 8007968:	f000 fbba 	bl	80080e0 <__mdiff>
 800796c:	68c2      	ldr	r2, [r0, #12]
 800796e:	4606      	mov	r6, r0
 8007970:	bb02      	cbnz	r2, 80079b4 <_dtoa_r+0xa1c>
 8007972:	4601      	mov	r1, r0
 8007974:	4648      	mov	r0, r9
 8007976:	f000 fb97 	bl	80080a8 <__mcmp>
 800797a:	4602      	mov	r2, r0
 800797c:	4631      	mov	r1, r6
 800797e:	4658      	mov	r0, fp
 8007980:	920e      	str	r2, [sp, #56]	@ 0x38
 8007982:	f000 f957 	bl	8007c34 <_Bfree>
 8007986:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007988:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800798a:	9e07      	ldr	r6, [sp, #28]
 800798c:	ea43 0102 	orr.w	r1, r3, r2
 8007990:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8007992:	4319      	orrs	r1, r3
 8007994:	d110      	bne.n	80079b8 <_dtoa_r+0xa20>
 8007996:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800799a:	d029      	beq.n	80079f0 <_dtoa_r+0xa58>
 800799c:	9b08      	ldr	r3, [sp, #32]
 800799e:	2b00      	cmp	r3, #0
 80079a0:	dd02      	ble.n	80079a8 <_dtoa_r+0xa10>
 80079a2:	9b02      	ldr	r3, [sp, #8]
 80079a4:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 80079a8:	9b00      	ldr	r3, [sp, #0]
 80079aa:	f883 8000 	strb.w	r8, [r3]
 80079ae:	e63f      	b.n	8007630 <_dtoa_r+0x698>
 80079b0:	4628      	mov	r0, r5
 80079b2:	e7bb      	b.n	800792c <_dtoa_r+0x994>
 80079b4:	2201      	movs	r2, #1
 80079b6:	e7e1      	b.n	800797c <_dtoa_r+0x9e4>
 80079b8:	9b08      	ldr	r3, [sp, #32]
 80079ba:	2b00      	cmp	r3, #0
 80079bc:	db04      	blt.n	80079c8 <_dtoa_r+0xa30>
 80079be:	9909      	ldr	r1, [sp, #36]	@ 0x24
 80079c0:	430b      	orrs	r3, r1
 80079c2:	990a      	ldr	r1, [sp, #40]	@ 0x28
 80079c4:	430b      	orrs	r3, r1
 80079c6:	d120      	bne.n	8007a0a <_dtoa_r+0xa72>
 80079c8:	2a00      	cmp	r2, #0
 80079ca:	dded      	ble.n	80079a8 <_dtoa_r+0xa10>
 80079cc:	4649      	mov	r1, r9
 80079ce:	2201      	movs	r2, #1
 80079d0:	4658      	mov	r0, fp
 80079d2:	f000 fafd 	bl	8007fd0 <__lshift>
 80079d6:	4621      	mov	r1, r4
 80079d8:	4681      	mov	r9, r0
 80079da:	f000 fb65 	bl	80080a8 <__mcmp>
 80079de:	2800      	cmp	r0, #0
 80079e0:	dc03      	bgt.n	80079ea <_dtoa_r+0xa52>
 80079e2:	d1e1      	bne.n	80079a8 <_dtoa_r+0xa10>
 80079e4:	f018 0f01 	tst.w	r8, #1
 80079e8:	d0de      	beq.n	80079a8 <_dtoa_r+0xa10>
 80079ea:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 80079ee:	d1d8      	bne.n	80079a2 <_dtoa_r+0xa0a>
 80079f0:	9a00      	ldr	r2, [sp, #0]
 80079f2:	2339      	movs	r3, #57	@ 0x39
 80079f4:	7013      	strb	r3, [r2, #0]
 80079f6:	4633      	mov	r3, r6
 80079f8:	461e      	mov	r6, r3
 80079fa:	3b01      	subs	r3, #1
 80079fc:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 8007a00:	2a39      	cmp	r2, #57	@ 0x39
 8007a02:	d052      	beq.n	8007aaa <_dtoa_r+0xb12>
 8007a04:	3201      	adds	r2, #1
 8007a06:	701a      	strb	r2, [r3, #0]
 8007a08:	e612      	b.n	8007630 <_dtoa_r+0x698>
 8007a0a:	2a00      	cmp	r2, #0
 8007a0c:	dd07      	ble.n	8007a1e <_dtoa_r+0xa86>
 8007a0e:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8007a12:	d0ed      	beq.n	80079f0 <_dtoa_r+0xa58>
 8007a14:	9a00      	ldr	r2, [sp, #0]
 8007a16:	f108 0301 	add.w	r3, r8, #1
 8007a1a:	7013      	strb	r3, [r2, #0]
 8007a1c:	e608      	b.n	8007630 <_dtoa_r+0x698>
 8007a1e:	9b07      	ldr	r3, [sp, #28]
 8007a20:	9a07      	ldr	r2, [sp, #28]
 8007a22:	f803 8c01 	strb.w	r8, [r3, #-1]
 8007a26:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8007a28:	4293      	cmp	r3, r2
 8007a2a:	d028      	beq.n	8007a7e <_dtoa_r+0xae6>
 8007a2c:	4649      	mov	r1, r9
 8007a2e:	2300      	movs	r3, #0
 8007a30:	220a      	movs	r2, #10
 8007a32:	4658      	mov	r0, fp
 8007a34:	f000 f920 	bl	8007c78 <__multadd>
 8007a38:	42af      	cmp	r7, r5
 8007a3a:	4681      	mov	r9, r0
 8007a3c:	f04f 0300 	mov.w	r3, #0
 8007a40:	f04f 020a 	mov.w	r2, #10
 8007a44:	4639      	mov	r1, r7
 8007a46:	4658      	mov	r0, fp
 8007a48:	d107      	bne.n	8007a5a <_dtoa_r+0xac2>
 8007a4a:	f000 f915 	bl	8007c78 <__multadd>
 8007a4e:	4607      	mov	r7, r0
 8007a50:	4605      	mov	r5, r0
 8007a52:	9b07      	ldr	r3, [sp, #28]
 8007a54:	3301      	adds	r3, #1
 8007a56:	9307      	str	r3, [sp, #28]
 8007a58:	e774      	b.n	8007944 <_dtoa_r+0x9ac>
 8007a5a:	f000 f90d 	bl	8007c78 <__multadd>
 8007a5e:	4629      	mov	r1, r5
 8007a60:	4607      	mov	r7, r0
 8007a62:	2300      	movs	r3, #0
 8007a64:	220a      	movs	r2, #10
 8007a66:	4658      	mov	r0, fp
 8007a68:	f000 f906 	bl	8007c78 <__multadd>
 8007a6c:	4605      	mov	r5, r0
 8007a6e:	e7f0      	b.n	8007a52 <_dtoa_r+0xaba>
 8007a70:	9b00      	ldr	r3, [sp, #0]
 8007a72:	2b00      	cmp	r3, #0
 8007a74:	bfcc      	ite	gt
 8007a76:	461e      	movgt	r6, r3
 8007a78:	2601      	movle	r6, #1
 8007a7a:	4456      	add	r6, sl
 8007a7c:	2700      	movs	r7, #0
 8007a7e:	4649      	mov	r1, r9
 8007a80:	2201      	movs	r2, #1
 8007a82:	4658      	mov	r0, fp
 8007a84:	f000 faa4 	bl	8007fd0 <__lshift>
 8007a88:	4621      	mov	r1, r4
 8007a8a:	4681      	mov	r9, r0
 8007a8c:	f000 fb0c 	bl	80080a8 <__mcmp>
 8007a90:	2800      	cmp	r0, #0
 8007a92:	dcb0      	bgt.n	80079f6 <_dtoa_r+0xa5e>
 8007a94:	d102      	bne.n	8007a9c <_dtoa_r+0xb04>
 8007a96:	f018 0f01 	tst.w	r8, #1
 8007a9a:	d1ac      	bne.n	80079f6 <_dtoa_r+0xa5e>
 8007a9c:	4633      	mov	r3, r6
 8007a9e:	461e      	mov	r6, r3
 8007aa0:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8007aa4:	2a30      	cmp	r2, #48	@ 0x30
 8007aa6:	d0fa      	beq.n	8007a9e <_dtoa_r+0xb06>
 8007aa8:	e5c2      	b.n	8007630 <_dtoa_r+0x698>
 8007aaa:	459a      	cmp	sl, r3
 8007aac:	d1a4      	bne.n	80079f8 <_dtoa_r+0xa60>
 8007aae:	9b04      	ldr	r3, [sp, #16]
 8007ab0:	3301      	adds	r3, #1
 8007ab2:	9304      	str	r3, [sp, #16]
 8007ab4:	2331      	movs	r3, #49	@ 0x31
 8007ab6:	f88a 3000 	strb.w	r3, [sl]
 8007aba:	e5b9      	b.n	8007630 <_dtoa_r+0x698>
 8007abc:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8007abe:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 8007b1c <_dtoa_r+0xb84>
 8007ac2:	b11b      	cbz	r3, 8007acc <_dtoa_r+0xb34>
 8007ac4:	f10a 0308 	add.w	r3, sl, #8
 8007ac8:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 8007aca:	6013      	str	r3, [r2, #0]
 8007acc:	4650      	mov	r0, sl
 8007ace:	b019      	add	sp, #100	@ 0x64
 8007ad0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007ad4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007ad6:	2b01      	cmp	r3, #1
 8007ad8:	f77f ae37 	ble.w	800774a <_dtoa_r+0x7b2>
 8007adc:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8007ade:	930a      	str	r3, [sp, #40]	@ 0x28
 8007ae0:	2001      	movs	r0, #1
 8007ae2:	e655      	b.n	8007790 <_dtoa_r+0x7f8>
 8007ae4:	9b00      	ldr	r3, [sp, #0]
 8007ae6:	2b00      	cmp	r3, #0
 8007ae8:	f77f aed6 	ble.w	8007898 <_dtoa_r+0x900>
 8007aec:	4656      	mov	r6, sl
 8007aee:	4621      	mov	r1, r4
 8007af0:	4648      	mov	r0, r9
 8007af2:	f7ff f9c8 	bl	8006e86 <quorem>
 8007af6:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 8007afa:	f806 8b01 	strb.w	r8, [r6], #1
 8007afe:	9b00      	ldr	r3, [sp, #0]
 8007b00:	eba6 020a 	sub.w	r2, r6, sl
 8007b04:	4293      	cmp	r3, r2
 8007b06:	ddb3      	ble.n	8007a70 <_dtoa_r+0xad8>
 8007b08:	4649      	mov	r1, r9
 8007b0a:	2300      	movs	r3, #0
 8007b0c:	220a      	movs	r2, #10
 8007b0e:	4658      	mov	r0, fp
 8007b10:	f000 f8b2 	bl	8007c78 <__multadd>
 8007b14:	4681      	mov	r9, r0
 8007b16:	e7ea      	b.n	8007aee <_dtoa_r+0xb56>
 8007b18:	08008e94 	.word	0x08008e94
 8007b1c:	08008e18 	.word	0x08008e18

08007b20 <_free_r>:
 8007b20:	b538      	push	{r3, r4, r5, lr}
 8007b22:	4605      	mov	r5, r0
 8007b24:	2900      	cmp	r1, #0
 8007b26:	d041      	beq.n	8007bac <_free_r+0x8c>
 8007b28:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007b2c:	1f0c      	subs	r4, r1, #4
 8007b2e:	2b00      	cmp	r3, #0
 8007b30:	bfb8      	it	lt
 8007b32:	18e4      	addlt	r4, r4, r3
 8007b34:	f7fe fb42 	bl	80061bc <__malloc_lock>
 8007b38:	4a1d      	ldr	r2, [pc, #116]	@ (8007bb0 <_free_r+0x90>)
 8007b3a:	6813      	ldr	r3, [r2, #0]
 8007b3c:	b933      	cbnz	r3, 8007b4c <_free_r+0x2c>
 8007b3e:	6063      	str	r3, [r4, #4]
 8007b40:	6014      	str	r4, [r2, #0]
 8007b42:	4628      	mov	r0, r5
 8007b44:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8007b48:	f7fe bb3e 	b.w	80061c8 <__malloc_unlock>
 8007b4c:	42a3      	cmp	r3, r4
 8007b4e:	d908      	bls.n	8007b62 <_free_r+0x42>
 8007b50:	6820      	ldr	r0, [r4, #0]
 8007b52:	1821      	adds	r1, r4, r0
 8007b54:	428b      	cmp	r3, r1
 8007b56:	bf01      	itttt	eq
 8007b58:	6819      	ldreq	r1, [r3, #0]
 8007b5a:	685b      	ldreq	r3, [r3, #4]
 8007b5c:	1809      	addeq	r1, r1, r0
 8007b5e:	6021      	streq	r1, [r4, #0]
 8007b60:	e7ed      	b.n	8007b3e <_free_r+0x1e>
 8007b62:	461a      	mov	r2, r3
 8007b64:	685b      	ldr	r3, [r3, #4]
 8007b66:	b10b      	cbz	r3, 8007b6c <_free_r+0x4c>
 8007b68:	42a3      	cmp	r3, r4
 8007b6a:	d9fa      	bls.n	8007b62 <_free_r+0x42>
 8007b6c:	6811      	ldr	r1, [r2, #0]
 8007b6e:	1850      	adds	r0, r2, r1
 8007b70:	42a0      	cmp	r0, r4
 8007b72:	d10b      	bne.n	8007b8c <_free_r+0x6c>
 8007b74:	6820      	ldr	r0, [r4, #0]
 8007b76:	4401      	add	r1, r0
 8007b78:	1850      	adds	r0, r2, r1
 8007b7a:	4283      	cmp	r3, r0
 8007b7c:	6011      	str	r1, [r2, #0]
 8007b7e:	d1e0      	bne.n	8007b42 <_free_r+0x22>
 8007b80:	6818      	ldr	r0, [r3, #0]
 8007b82:	685b      	ldr	r3, [r3, #4]
 8007b84:	6053      	str	r3, [r2, #4]
 8007b86:	4408      	add	r0, r1
 8007b88:	6010      	str	r0, [r2, #0]
 8007b8a:	e7da      	b.n	8007b42 <_free_r+0x22>
 8007b8c:	d902      	bls.n	8007b94 <_free_r+0x74>
 8007b8e:	230c      	movs	r3, #12
 8007b90:	602b      	str	r3, [r5, #0]
 8007b92:	e7d6      	b.n	8007b42 <_free_r+0x22>
 8007b94:	6820      	ldr	r0, [r4, #0]
 8007b96:	1821      	adds	r1, r4, r0
 8007b98:	428b      	cmp	r3, r1
 8007b9a:	bf04      	itt	eq
 8007b9c:	6819      	ldreq	r1, [r3, #0]
 8007b9e:	685b      	ldreq	r3, [r3, #4]
 8007ba0:	6063      	str	r3, [r4, #4]
 8007ba2:	bf04      	itt	eq
 8007ba4:	1809      	addeq	r1, r1, r0
 8007ba6:	6021      	streq	r1, [r4, #0]
 8007ba8:	6054      	str	r4, [r2, #4]
 8007baa:	e7ca      	b.n	8007b42 <_free_r+0x22>
 8007bac:	bd38      	pop	{r3, r4, r5, pc}
 8007bae:	bf00      	nop
 8007bb0:	20000370 	.word	0x20000370

08007bb4 <_Balloc>:
 8007bb4:	b570      	push	{r4, r5, r6, lr}
 8007bb6:	69c6      	ldr	r6, [r0, #28]
 8007bb8:	4604      	mov	r4, r0
 8007bba:	460d      	mov	r5, r1
 8007bbc:	b976      	cbnz	r6, 8007bdc <_Balloc+0x28>
 8007bbe:	2010      	movs	r0, #16
 8007bc0:	f7fe fa52 	bl	8006068 <malloc>
 8007bc4:	4602      	mov	r2, r0
 8007bc6:	61e0      	str	r0, [r4, #28]
 8007bc8:	b920      	cbnz	r0, 8007bd4 <_Balloc+0x20>
 8007bca:	4b18      	ldr	r3, [pc, #96]	@ (8007c2c <_Balloc+0x78>)
 8007bcc:	4818      	ldr	r0, [pc, #96]	@ (8007c30 <_Balloc+0x7c>)
 8007bce:	216b      	movs	r1, #107	@ 0x6b
 8007bd0:	f000 fd90 	bl	80086f4 <__assert_func>
 8007bd4:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8007bd8:	6006      	str	r6, [r0, #0]
 8007bda:	60c6      	str	r6, [r0, #12]
 8007bdc:	69e6      	ldr	r6, [r4, #28]
 8007bde:	68f3      	ldr	r3, [r6, #12]
 8007be0:	b183      	cbz	r3, 8007c04 <_Balloc+0x50>
 8007be2:	69e3      	ldr	r3, [r4, #28]
 8007be4:	68db      	ldr	r3, [r3, #12]
 8007be6:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8007bea:	b9b8      	cbnz	r0, 8007c1c <_Balloc+0x68>
 8007bec:	2101      	movs	r1, #1
 8007bee:	fa01 f605 	lsl.w	r6, r1, r5
 8007bf2:	1d72      	adds	r2, r6, #5
 8007bf4:	0092      	lsls	r2, r2, #2
 8007bf6:	4620      	mov	r0, r4
 8007bf8:	f000 fd9a 	bl	8008730 <_calloc_r>
 8007bfc:	b160      	cbz	r0, 8007c18 <_Balloc+0x64>
 8007bfe:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8007c02:	e00e      	b.n	8007c22 <_Balloc+0x6e>
 8007c04:	2221      	movs	r2, #33	@ 0x21
 8007c06:	2104      	movs	r1, #4
 8007c08:	4620      	mov	r0, r4
 8007c0a:	f000 fd91 	bl	8008730 <_calloc_r>
 8007c0e:	69e3      	ldr	r3, [r4, #28]
 8007c10:	60f0      	str	r0, [r6, #12]
 8007c12:	68db      	ldr	r3, [r3, #12]
 8007c14:	2b00      	cmp	r3, #0
 8007c16:	d1e4      	bne.n	8007be2 <_Balloc+0x2e>
 8007c18:	2000      	movs	r0, #0
 8007c1a:	bd70      	pop	{r4, r5, r6, pc}
 8007c1c:	6802      	ldr	r2, [r0, #0]
 8007c1e:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8007c22:	2300      	movs	r3, #0
 8007c24:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8007c28:	e7f7      	b.n	8007c1a <_Balloc+0x66>
 8007c2a:	bf00      	nop
 8007c2c:	08008e25 	.word	0x08008e25
 8007c30:	08008ea5 	.word	0x08008ea5

08007c34 <_Bfree>:
 8007c34:	b570      	push	{r4, r5, r6, lr}
 8007c36:	69c6      	ldr	r6, [r0, #28]
 8007c38:	4605      	mov	r5, r0
 8007c3a:	460c      	mov	r4, r1
 8007c3c:	b976      	cbnz	r6, 8007c5c <_Bfree+0x28>
 8007c3e:	2010      	movs	r0, #16
 8007c40:	f7fe fa12 	bl	8006068 <malloc>
 8007c44:	4602      	mov	r2, r0
 8007c46:	61e8      	str	r0, [r5, #28]
 8007c48:	b920      	cbnz	r0, 8007c54 <_Bfree+0x20>
 8007c4a:	4b09      	ldr	r3, [pc, #36]	@ (8007c70 <_Bfree+0x3c>)
 8007c4c:	4809      	ldr	r0, [pc, #36]	@ (8007c74 <_Bfree+0x40>)
 8007c4e:	218f      	movs	r1, #143	@ 0x8f
 8007c50:	f000 fd50 	bl	80086f4 <__assert_func>
 8007c54:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8007c58:	6006      	str	r6, [r0, #0]
 8007c5a:	60c6      	str	r6, [r0, #12]
 8007c5c:	b13c      	cbz	r4, 8007c6e <_Bfree+0x3a>
 8007c5e:	69eb      	ldr	r3, [r5, #28]
 8007c60:	6862      	ldr	r2, [r4, #4]
 8007c62:	68db      	ldr	r3, [r3, #12]
 8007c64:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8007c68:	6021      	str	r1, [r4, #0]
 8007c6a:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8007c6e:	bd70      	pop	{r4, r5, r6, pc}
 8007c70:	08008e25 	.word	0x08008e25
 8007c74:	08008ea5 	.word	0x08008ea5

08007c78 <__multadd>:
 8007c78:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007c7c:	690d      	ldr	r5, [r1, #16]
 8007c7e:	4607      	mov	r7, r0
 8007c80:	460c      	mov	r4, r1
 8007c82:	461e      	mov	r6, r3
 8007c84:	f101 0c14 	add.w	ip, r1, #20
 8007c88:	2000      	movs	r0, #0
 8007c8a:	f8dc 3000 	ldr.w	r3, [ip]
 8007c8e:	b299      	uxth	r1, r3
 8007c90:	fb02 6101 	mla	r1, r2, r1, r6
 8007c94:	0c1e      	lsrs	r6, r3, #16
 8007c96:	0c0b      	lsrs	r3, r1, #16
 8007c98:	fb02 3306 	mla	r3, r2, r6, r3
 8007c9c:	b289      	uxth	r1, r1
 8007c9e:	3001      	adds	r0, #1
 8007ca0:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8007ca4:	4285      	cmp	r5, r0
 8007ca6:	f84c 1b04 	str.w	r1, [ip], #4
 8007caa:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8007cae:	dcec      	bgt.n	8007c8a <__multadd+0x12>
 8007cb0:	b30e      	cbz	r6, 8007cf6 <__multadd+0x7e>
 8007cb2:	68a3      	ldr	r3, [r4, #8]
 8007cb4:	42ab      	cmp	r3, r5
 8007cb6:	dc19      	bgt.n	8007cec <__multadd+0x74>
 8007cb8:	6861      	ldr	r1, [r4, #4]
 8007cba:	4638      	mov	r0, r7
 8007cbc:	3101      	adds	r1, #1
 8007cbe:	f7ff ff79 	bl	8007bb4 <_Balloc>
 8007cc2:	4680      	mov	r8, r0
 8007cc4:	b928      	cbnz	r0, 8007cd2 <__multadd+0x5a>
 8007cc6:	4602      	mov	r2, r0
 8007cc8:	4b0c      	ldr	r3, [pc, #48]	@ (8007cfc <__multadd+0x84>)
 8007cca:	480d      	ldr	r0, [pc, #52]	@ (8007d00 <__multadd+0x88>)
 8007ccc:	21ba      	movs	r1, #186	@ 0xba
 8007cce:	f000 fd11 	bl	80086f4 <__assert_func>
 8007cd2:	6922      	ldr	r2, [r4, #16]
 8007cd4:	3202      	adds	r2, #2
 8007cd6:	f104 010c 	add.w	r1, r4, #12
 8007cda:	0092      	lsls	r2, r2, #2
 8007cdc:	300c      	adds	r0, #12
 8007cde:	f7ff f8c4 	bl	8006e6a <memcpy>
 8007ce2:	4621      	mov	r1, r4
 8007ce4:	4638      	mov	r0, r7
 8007ce6:	f7ff ffa5 	bl	8007c34 <_Bfree>
 8007cea:	4644      	mov	r4, r8
 8007cec:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8007cf0:	3501      	adds	r5, #1
 8007cf2:	615e      	str	r6, [r3, #20]
 8007cf4:	6125      	str	r5, [r4, #16]
 8007cf6:	4620      	mov	r0, r4
 8007cf8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007cfc:	08008e94 	.word	0x08008e94
 8007d00:	08008ea5 	.word	0x08008ea5

08007d04 <__hi0bits>:
 8007d04:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 8007d08:	4603      	mov	r3, r0
 8007d0a:	bf36      	itet	cc
 8007d0c:	0403      	lslcc	r3, r0, #16
 8007d0e:	2000      	movcs	r0, #0
 8007d10:	2010      	movcc	r0, #16
 8007d12:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8007d16:	bf3c      	itt	cc
 8007d18:	021b      	lslcc	r3, r3, #8
 8007d1a:	3008      	addcc	r0, #8
 8007d1c:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8007d20:	bf3c      	itt	cc
 8007d22:	011b      	lslcc	r3, r3, #4
 8007d24:	3004      	addcc	r0, #4
 8007d26:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007d2a:	bf3c      	itt	cc
 8007d2c:	009b      	lslcc	r3, r3, #2
 8007d2e:	3002      	addcc	r0, #2
 8007d30:	2b00      	cmp	r3, #0
 8007d32:	db05      	blt.n	8007d40 <__hi0bits+0x3c>
 8007d34:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 8007d38:	f100 0001 	add.w	r0, r0, #1
 8007d3c:	bf08      	it	eq
 8007d3e:	2020      	moveq	r0, #32
 8007d40:	4770      	bx	lr

08007d42 <__lo0bits>:
 8007d42:	6803      	ldr	r3, [r0, #0]
 8007d44:	4602      	mov	r2, r0
 8007d46:	f013 0007 	ands.w	r0, r3, #7
 8007d4a:	d00b      	beq.n	8007d64 <__lo0bits+0x22>
 8007d4c:	07d9      	lsls	r1, r3, #31
 8007d4e:	d421      	bmi.n	8007d94 <__lo0bits+0x52>
 8007d50:	0798      	lsls	r0, r3, #30
 8007d52:	bf49      	itett	mi
 8007d54:	085b      	lsrmi	r3, r3, #1
 8007d56:	089b      	lsrpl	r3, r3, #2
 8007d58:	2001      	movmi	r0, #1
 8007d5a:	6013      	strmi	r3, [r2, #0]
 8007d5c:	bf5c      	itt	pl
 8007d5e:	6013      	strpl	r3, [r2, #0]
 8007d60:	2002      	movpl	r0, #2
 8007d62:	4770      	bx	lr
 8007d64:	b299      	uxth	r1, r3
 8007d66:	b909      	cbnz	r1, 8007d6c <__lo0bits+0x2a>
 8007d68:	0c1b      	lsrs	r3, r3, #16
 8007d6a:	2010      	movs	r0, #16
 8007d6c:	b2d9      	uxtb	r1, r3
 8007d6e:	b909      	cbnz	r1, 8007d74 <__lo0bits+0x32>
 8007d70:	3008      	adds	r0, #8
 8007d72:	0a1b      	lsrs	r3, r3, #8
 8007d74:	0719      	lsls	r1, r3, #28
 8007d76:	bf04      	itt	eq
 8007d78:	091b      	lsreq	r3, r3, #4
 8007d7a:	3004      	addeq	r0, #4
 8007d7c:	0799      	lsls	r1, r3, #30
 8007d7e:	bf04      	itt	eq
 8007d80:	089b      	lsreq	r3, r3, #2
 8007d82:	3002      	addeq	r0, #2
 8007d84:	07d9      	lsls	r1, r3, #31
 8007d86:	d403      	bmi.n	8007d90 <__lo0bits+0x4e>
 8007d88:	085b      	lsrs	r3, r3, #1
 8007d8a:	f100 0001 	add.w	r0, r0, #1
 8007d8e:	d003      	beq.n	8007d98 <__lo0bits+0x56>
 8007d90:	6013      	str	r3, [r2, #0]
 8007d92:	4770      	bx	lr
 8007d94:	2000      	movs	r0, #0
 8007d96:	4770      	bx	lr
 8007d98:	2020      	movs	r0, #32
 8007d9a:	4770      	bx	lr

08007d9c <__i2b>:
 8007d9c:	b510      	push	{r4, lr}
 8007d9e:	460c      	mov	r4, r1
 8007da0:	2101      	movs	r1, #1
 8007da2:	f7ff ff07 	bl	8007bb4 <_Balloc>
 8007da6:	4602      	mov	r2, r0
 8007da8:	b928      	cbnz	r0, 8007db6 <__i2b+0x1a>
 8007daa:	4b05      	ldr	r3, [pc, #20]	@ (8007dc0 <__i2b+0x24>)
 8007dac:	4805      	ldr	r0, [pc, #20]	@ (8007dc4 <__i2b+0x28>)
 8007dae:	f240 1145 	movw	r1, #325	@ 0x145
 8007db2:	f000 fc9f 	bl	80086f4 <__assert_func>
 8007db6:	2301      	movs	r3, #1
 8007db8:	6144      	str	r4, [r0, #20]
 8007dba:	6103      	str	r3, [r0, #16]
 8007dbc:	bd10      	pop	{r4, pc}
 8007dbe:	bf00      	nop
 8007dc0:	08008e94 	.word	0x08008e94
 8007dc4:	08008ea5 	.word	0x08008ea5

08007dc8 <__multiply>:
 8007dc8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007dcc:	4614      	mov	r4, r2
 8007dce:	690a      	ldr	r2, [r1, #16]
 8007dd0:	6923      	ldr	r3, [r4, #16]
 8007dd2:	429a      	cmp	r2, r3
 8007dd4:	bfa8      	it	ge
 8007dd6:	4623      	movge	r3, r4
 8007dd8:	460f      	mov	r7, r1
 8007dda:	bfa4      	itt	ge
 8007ddc:	460c      	movge	r4, r1
 8007dde:	461f      	movge	r7, r3
 8007de0:	f8d4 a010 	ldr.w	sl, [r4, #16]
 8007de4:	f8d7 9010 	ldr.w	r9, [r7, #16]
 8007de8:	68a3      	ldr	r3, [r4, #8]
 8007dea:	6861      	ldr	r1, [r4, #4]
 8007dec:	eb0a 0609 	add.w	r6, sl, r9
 8007df0:	42b3      	cmp	r3, r6
 8007df2:	b085      	sub	sp, #20
 8007df4:	bfb8      	it	lt
 8007df6:	3101      	addlt	r1, #1
 8007df8:	f7ff fedc 	bl	8007bb4 <_Balloc>
 8007dfc:	b930      	cbnz	r0, 8007e0c <__multiply+0x44>
 8007dfe:	4602      	mov	r2, r0
 8007e00:	4b44      	ldr	r3, [pc, #272]	@ (8007f14 <__multiply+0x14c>)
 8007e02:	4845      	ldr	r0, [pc, #276]	@ (8007f18 <__multiply+0x150>)
 8007e04:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 8007e08:	f000 fc74 	bl	80086f4 <__assert_func>
 8007e0c:	f100 0514 	add.w	r5, r0, #20
 8007e10:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8007e14:	462b      	mov	r3, r5
 8007e16:	2200      	movs	r2, #0
 8007e18:	4543      	cmp	r3, r8
 8007e1a:	d321      	bcc.n	8007e60 <__multiply+0x98>
 8007e1c:	f107 0114 	add.w	r1, r7, #20
 8007e20:	f104 0214 	add.w	r2, r4, #20
 8007e24:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 8007e28:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 8007e2c:	9302      	str	r3, [sp, #8]
 8007e2e:	1b13      	subs	r3, r2, r4
 8007e30:	3b15      	subs	r3, #21
 8007e32:	f023 0303 	bic.w	r3, r3, #3
 8007e36:	3304      	adds	r3, #4
 8007e38:	f104 0715 	add.w	r7, r4, #21
 8007e3c:	42ba      	cmp	r2, r7
 8007e3e:	bf38      	it	cc
 8007e40:	2304      	movcc	r3, #4
 8007e42:	9301      	str	r3, [sp, #4]
 8007e44:	9b02      	ldr	r3, [sp, #8]
 8007e46:	9103      	str	r1, [sp, #12]
 8007e48:	428b      	cmp	r3, r1
 8007e4a:	d80c      	bhi.n	8007e66 <__multiply+0x9e>
 8007e4c:	2e00      	cmp	r6, #0
 8007e4e:	dd03      	ble.n	8007e58 <__multiply+0x90>
 8007e50:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8007e54:	2b00      	cmp	r3, #0
 8007e56:	d05b      	beq.n	8007f10 <__multiply+0x148>
 8007e58:	6106      	str	r6, [r0, #16]
 8007e5a:	b005      	add	sp, #20
 8007e5c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007e60:	f843 2b04 	str.w	r2, [r3], #4
 8007e64:	e7d8      	b.n	8007e18 <__multiply+0x50>
 8007e66:	f8b1 a000 	ldrh.w	sl, [r1]
 8007e6a:	f1ba 0f00 	cmp.w	sl, #0
 8007e6e:	d024      	beq.n	8007eba <__multiply+0xf2>
 8007e70:	f104 0e14 	add.w	lr, r4, #20
 8007e74:	46a9      	mov	r9, r5
 8007e76:	f04f 0c00 	mov.w	ip, #0
 8007e7a:	f85e 7b04 	ldr.w	r7, [lr], #4
 8007e7e:	f8d9 3000 	ldr.w	r3, [r9]
 8007e82:	fa1f fb87 	uxth.w	fp, r7
 8007e86:	b29b      	uxth	r3, r3
 8007e88:	fb0a 330b 	mla	r3, sl, fp, r3
 8007e8c:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 8007e90:	f8d9 7000 	ldr.w	r7, [r9]
 8007e94:	4463      	add	r3, ip
 8007e96:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 8007e9a:	fb0a c70b 	mla	r7, sl, fp, ip
 8007e9e:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 8007ea2:	b29b      	uxth	r3, r3
 8007ea4:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8007ea8:	4572      	cmp	r2, lr
 8007eaa:	f849 3b04 	str.w	r3, [r9], #4
 8007eae:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 8007eb2:	d8e2      	bhi.n	8007e7a <__multiply+0xb2>
 8007eb4:	9b01      	ldr	r3, [sp, #4]
 8007eb6:	f845 c003 	str.w	ip, [r5, r3]
 8007eba:	9b03      	ldr	r3, [sp, #12]
 8007ebc:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 8007ec0:	3104      	adds	r1, #4
 8007ec2:	f1b9 0f00 	cmp.w	r9, #0
 8007ec6:	d021      	beq.n	8007f0c <__multiply+0x144>
 8007ec8:	682b      	ldr	r3, [r5, #0]
 8007eca:	f104 0c14 	add.w	ip, r4, #20
 8007ece:	46ae      	mov	lr, r5
 8007ed0:	f04f 0a00 	mov.w	sl, #0
 8007ed4:	f8bc b000 	ldrh.w	fp, [ip]
 8007ed8:	f8be 7002 	ldrh.w	r7, [lr, #2]
 8007edc:	fb09 770b 	mla	r7, r9, fp, r7
 8007ee0:	4457      	add	r7, sl
 8007ee2:	b29b      	uxth	r3, r3
 8007ee4:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8007ee8:	f84e 3b04 	str.w	r3, [lr], #4
 8007eec:	f85c 3b04 	ldr.w	r3, [ip], #4
 8007ef0:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8007ef4:	f8be 3000 	ldrh.w	r3, [lr]
 8007ef8:	fb09 330a 	mla	r3, r9, sl, r3
 8007efc:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 8007f00:	4562      	cmp	r2, ip
 8007f02:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8007f06:	d8e5      	bhi.n	8007ed4 <__multiply+0x10c>
 8007f08:	9f01      	ldr	r7, [sp, #4]
 8007f0a:	51eb      	str	r3, [r5, r7]
 8007f0c:	3504      	adds	r5, #4
 8007f0e:	e799      	b.n	8007e44 <__multiply+0x7c>
 8007f10:	3e01      	subs	r6, #1
 8007f12:	e79b      	b.n	8007e4c <__multiply+0x84>
 8007f14:	08008e94 	.word	0x08008e94
 8007f18:	08008ea5 	.word	0x08008ea5

08007f1c <__pow5mult>:
 8007f1c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007f20:	4615      	mov	r5, r2
 8007f22:	f012 0203 	ands.w	r2, r2, #3
 8007f26:	4607      	mov	r7, r0
 8007f28:	460e      	mov	r6, r1
 8007f2a:	d007      	beq.n	8007f3c <__pow5mult+0x20>
 8007f2c:	4c25      	ldr	r4, [pc, #148]	@ (8007fc4 <__pow5mult+0xa8>)
 8007f2e:	3a01      	subs	r2, #1
 8007f30:	2300      	movs	r3, #0
 8007f32:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8007f36:	f7ff fe9f 	bl	8007c78 <__multadd>
 8007f3a:	4606      	mov	r6, r0
 8007f3c:	10ad      	asrs	r5, r5, #2
 8007f3e:	d03d      	beq.n	8007fbc <__pow5mult+0xa0>
 8007f40:	69fc      	ldr	r4, [r7, #28]
 8007f42:	b97c      	cbnz	r4, 8007f64 <__pow5mult+0x48>
 8007f44:	2010      	movs	r0, #16
 8007f46:	f7fe f88f 	bl	8006068 <malloc>
 8007f4a:	4602      	mov	r2, r0
 8007f4c:	61f8      	str	r0, [r7, #28]
 8007f4e:	b928      	cbnz	r0, 8007f5c <__pow5mult+0x40>
 8007f50:	4b1d      	ldr	r3, [pc, #116]	@ (8007fc8 <__pow5mult+0xac>)
 8007f52:	481e      	ldr	r0, [pc, #120]	@ (8007fcc <__pow5mult+0xb0>)
 8007f54:	f240 11b3 	movw	r1, #435	@ 0x1b3
 8007f58:	f000 fbcc 	bl	80086f4 <__assert_func>
 8007f5c:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8007f60:	6004      	str	r4, [r0, #0]
 8007f62:	60c4      	str	r4, [r0, #12]
 8007f64:	f8d7 801c 	ldr.w	r8, [r7, #28]
 8007f68:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8007f6c:	b94c      	cbnz	r4, 8007f82 <__pow5mult+0x66>
 8007f6e:	f240 2171 	movw	r1, #625	@ 0x271
 8007f72:	4638      	mov	r0, r7
 8007f74:	f7ff ff12 	bl	8007d9c <__i2b>
 8007f78:	2300      	movs	r3, #0
 8007f7a:	f8c8 0008 	str.w	r0, [r8, #8]
 8007f7e:	4604      	mov	r4, r0
 8007f80:	6003      	str	r3, [r0, #0]
 8007f82:	f04f 0900 	mov.w	r9, #0
 8007f86:	07eb      	lsls	r3, r5, #31
 8007f88:	d50a      	bpl.n	8007fa0 <__pow5mult+0x84>
 8007f8a:	4631      	mov	r1, r6
 8007f8c:	4622      	mov	r2, r4
 8007f8e:	4638      	mov	r0, r7
 8007f90:	f7ff ff1a 	bl	8007dc8 <__multiply>
 8007f94:	4631      	mov	r1, r6
 8007f96:	4680      	mov	r8, r0
 8007f98:	4638      	mov	r0, r7
 8007f9a:	f7ff fe4b 	bl	8007c34 <_Bfree>
 8007f9e:	4646      	mov	r6, r8
 8007fa0:	106d      	asrs	r5, r5, #1
 8007fa2:	d00b      	beq.n	8007fbc <__pow5mult+0xa0>
 8007fa4:	6820      	ldr	r0, [r4, #0]
 8007fa6:	b938      	cbnz	r0, 8007fb8 <__pow5mult+0x9c>
 8007fa8:	4622      	mov	r2, r4
 8007faa:	4621      	mov	r1, r4
 8007fac:	4638      	mov	r0, r7
 8007fae:	f7ff ff0b 	bl	8007dc8 <__multiply>
 8007fb2:	6020      	str	r0, [r4, #0]
 8007fb4:	f8c0 9000 	str.w	r9, [r0]
 8007fb8:	4604      	mov	r4, r0
 8007fba:	e7e4      	b.n	8007f86 <__pow5mult+0x6a>
 8007fbc:	4630      	mov	r0, r6
 8007fbe:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007fc2:	bf00      	nop
 8007fc4:	08008f00 	.word	0x08008f00
 8007fc8:	08008e25 	.word	0x08008e25
 8007fcc:	08008ea5 	.word	0x08008ea5

08007fd0 <__lshift>:
 8007fd0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007fd4:	460c      	mov	r4, r1
 8007fd6:	6849      	ldr	r1, [r1, #4]
 8007fd8:	6923      	ldr	r3, [r4, #16]
 8007fda:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8007fde:	68a3      	ldr	r3, [r4, #8]
 8007fe0:	4607      	mov	r7, r0
 8007fe2:	4691      	mov	r9, r2
 8007fe4:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8007fe8:	f108 0601 	add.w	r6, r8, #1
 8007fec:	42b3      	cmp	r3, r6
 8007fee:	db0b      	blt.n	8008008 <__lshift+0x38>
 8007ff0:	4638      	mov	r0, r7
 8007ff2:	f7ff fddf 	bl	8007bb4 <_Balloc>
 8007ff6:	4605      	mov	r5, r0
 8007ff8:	b948      	cbnz	r0, 800800e <__lshift+0x3e>
 8007ffa:	4602      	mov	r2, r0
 8007ffc:	4b28      	ldr	r3, [pc, #160]	@ (80080a0 <__lshift+0xd0>)
 8007ffe:	4829      	ldr	r0, [pc, #164]	@ (80080a4 <__lshift+0xd4>)
 8008000:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 8008004:	f000 fb76 	bl	80086f4 <__assert_func>
 8008008:	3101      	adds	r1, #1
 800800a:	005b      	lsls	r3, r3, #1
 800800c:	e7ee      	b.n	8007fec <__lshift+0x1c>
 800800e:	2300      	movs	r3, #0
 8008010:	f100 0114 	add.w	r1, r0, #20
 8008014:	f100 0210 	add.w	r2, r0, #16
 8008018:	4618      	mov	r0, r3
 800801a:	4553      	cmp	r3, sl
 800801c:	db33      	blt.n	8008086 <__lshift+0xb6>
 800801e:	6920      	ldr	r0, [r4, #16]
 8008020:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8008024:	f104 0314 	add.w	r3, r4, #20
 8008028:	f019 091f 	ands.w	r9, r9, #31
 800802c:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8008030:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8008034:	d02b      	beq.n	800808e <__lshift+0xbe>
 8008036:	f1c9 0e20 	rsb	lr, r9, #32
 800803a:	468a      	mov	sl, r1
 800803c:	2200      	movs	r2, #0
 800803e:	6818      	ldr	r0, [r3, #0]
 8008040:	fa00 f009 	lsl.w	r0, r0, r9
 8008044:	4310      	orrs	r0, r2
 8008046:	f84a 0b04 	str.w	r0, [sl], #4
 800804a:	f853 2b04 	ldr.w	r2, [r3], #4
 800804e:	459c      	cmp	ip, r3
 8008050:	fa22 f20e 	lsr.w	r2, r2, lr
 8008054:	d8f3      	bhi.n	800803e <__lshift+0x6e>
 8008056:	ebac 0304 	sub.w	r3, ip, r4
 800805a:	3b15      	subs	r3, #21
 800805c:	f023 0303 	bic.w	r3, r3, #3
 8008060:	3304      	adds	r3, #4
 8008062:	f104 0015 	add.w	r0, r4, #21
 8008066:	4584      	cmp	ip, r0
 8008068:	bf38      	it	cc
 800806a:	2304      	movcc	r3, #4
 800806c:	50ca      	str	r2, [r1, r3]
 800806e:	b10a      	cbz	r2, 8008074 <__lshift+0xa4>
 8008070:	f108 0602 	add.w	r6, r8, #2
 8008074:	3e01      	subs	r6, #1
 8008076:	4638      	mov	r0, r7
 8008078:	612e      	str	r6, [r5, #16]
 800807a:	4621      	mov	r1, r4
 800807c:	f7ff fdda 	bl	8007c34 <_Bfree>
 8008080:	4628      	mov	r0, r5
 8008082:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008086:	f842 0f04 	str.w	r0, [r2, #4]!
 800808a:	3301      	adds	r3, #1
 800808c:	e7c5      	b.n	800801a <__lshift+0x4a>
 800808e:	3904      	subs	r1, #4
 8008090:	f853 2b04 	ldr.w	r2, [r3], #4
 8008094:	f841 2f04 	str.w	r2, [r1, #4]!
 8008098:	459c      	cmp	ip, r3
 800809a:	d8f9      	bhi.n	8008090 <__lshift+0xc0>
 800809c:	e7ea      	b.n	8008074 <__lshift+0xa4>
 800809e:	bf00      	nop
 80080a0:	08008e94 	.word	0x08008e94
 80080a4:	08008ea5 	.word	0x08008ea5

080080a8 <__mcmp>:
 80080a8:	690a      	ldr	r2, [r1, #16]
 80080aa:	4603      	mov	r3, r0
 80080ac:	6900      	ldr	r0, [r0, #16]
 80080ae:	1a80      	subs	r0, r0, r2
 80080b0:	b530      	push	{r4, r5, lr}
 80080b2:	d10e      	bne.n	80080d2 <__mcmp+0x2a>
 80080b4:	3314      	adds	r3, #20
 80080b6:	3114      	adds	r1, #20
 80080b8:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 80080bc:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 80080c0:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 80080c4:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 80080c8:	4295      	cmp	r5, r2
 80080ca:	d003      	beq.n	80080d4 <__mcmp+0x2c>
 80080cc:	d205      	bcs.n	80080da <__mcmp+0x32>
 80080ce:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80080d2:	bd30      	pop	{r4, r5, pc}
 80080d4:	42a3      	cmp	r3, r4
 80080d6:	d3f3      	bcc.n	80080c0 <__mcmp+0x18>
 80080d8:	e7fb      	b.n	80080d2 <__mcmp+0x2a>
 80080da:	2001      	movs	r0, #1
 80080dc:	e7f9      	b.n	80080d2 <__mcmp+0x2a>
	...

080080e0 <__mdiff>:
 80080e0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80080e4:	4689      	mov	r9, r1
 80080e6:	4606      	mov	r6, r0
 80080e8:	4611      	mov	r1, r2
 80080ea:	4648      	mov	r0, r9
 80080ec:	4614      	mov	r4, r2
 80080ee:	f7ff ffdb 	bl	80080a8 <__mcmp>
 80080f2:	1e05      	subs	r5, r0, #0
 80080f4:	d112      	bne.n	800811c <__mdiff+0x3c>
 80080f6:	4629      	mov	r1, r5
 80080f8:	4630      	mov	r0, r6
 80080fa:	f7ff fd5b 	bl	8007bb4 <_Balloc>
 80080fe:	4602      	mov	r2, r0
 8008100:	b928      	cbnz	r0, 800810e <__mdiff+0x2e>
 8008102:	4b3f      	ldr	r3, [pc, #252]	@ (8008200 <__mdiff+0x120>)
 8008104:	f240 2137 	movw	r1, #567	@ 0x237
 8008108:	483e      	ldr	r0, [pc, #248]	@ (8008204 <__mdiff+0x124>)
 800810a:	f000 faf3 	bl	80086f4 <__assert_func>
 800810e:	2301      	movs	r3, #1
 8008110:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8008114:	4610      	mov	r0, r2
 8008116:	b003      	add	sp, #12
 8008118:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800811c:	bfbc      	itt	lt
 800811e:	464b      	movlt	r3, r9
 8008120:	46a1      	movlt	r9, r4
 8008122:	4630      	mov	r0, r6
 8008124:	f8d9 1004 	ldr.w	r1, [r9, #4]
 8008128:	bfba      	itte	lt
 800812a:	461c      	movlt	r4, r3
 800812c:	2501      	movlt	r5, #1
 800812e:	2500      	movge	r5, #0
 8008130:	f7ff fd40 	bl	8007bb4 <_Balloc>
 8008134:	4602      	mov	r2, r0
 8008136:	b918      	cbnz	r0, 8008140 <__mdiff+0x60>
 8008138:	4b31      	ldr	r3, [pc, #196]	@ (8008200 <__mdiff+0x120>)
 800813a:	f240 2145 	movw	r1, #581	@ 0x245
 800813e:	e7e3      	b.n	8008108 <__mdiff+0x28>
 8008140:	f8d9 7010 	ldr.w	r7, [r9, #16]
 8008144:	6926      	ldr	r6, [r4, #16]
 8008146:	60c5      	str	r5, [r0, #12]
 8008148:	f109 0310 	add.w	r3, r9, #16
 800814c:	f109 0514 	add.w	r5, r9, #20
 8008150:	f104 0e14 	add.w	lr, r4, #20
 8008154:	f100 0b14 	add.w	fp, r0, #20
 8008158:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 800815c:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 8008160:	9301      	str	r3, [sp, #4]
 8008162:	46d9      	mov	r9, fp
 8008164:	f04f 0c00 	mov.w	ip, #0
 8008168:	9b01      	ldr	r3, [sp, #4]
 800816a:	f85e 0b04 	ldr.w	r0, [lr], #4
 800816e:	f853 af04 	ldr.w	sl, [r3, #4]!
 8008172:	9301      	str	r3, [sp, #4]
 8008174:	fa1f f38a 	uxth.w	r3, sl
 8008178:	4619      	mov	r1, r3
 800817a:	b283      	uxth	r3, r0
 800817c:	1acb      	subs	r3, r1, r3
 800817e:	0c00      	lsrs	r0, r0, #16
 8008180:	4463      	add	r3, ip
 8008182:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 8008186:	eb00 4023 	add.w	r0, r0, r3, asr #16
 800818a:	b29b      	uxth	r3, r3
 800818c:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 8008190:	4576      	cmp	r6, lr
 8008192:	f849 3b04 	str.w	r3, [r9], #4
 8008196:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800819a:	d8e5      	bhi.n	8008168 <__mdiff+0x88>
 800819c:	1b33      	subs	r3, r6, r4
 800819e:	3b15      	subs	r3, #21
 80081a0:	f023 0303 	bic.w	r3, r3, #3
 80081a4:	3415      	adds	r4, #21
 80081a6:	3304      	adds	r3, #4
 80081a8:	42a6      	cmp	r6, r4
 80081aa:	bf38      	it	cc
 80081ac:	2304      	movcc	r3, #4
 80081ae:	441d      	add	r5, r3
 80081b0:	445b      	add	r3, fp
 80081b2:	461e      	mov	r6, r3
 80081b4:	462c      	mov	r4, r5
 80081b6:	4544      	cmp	r4, r8
 80081b8:	d30e      	bcc.n	80081d8 <__mdiff+0xf8>
 80081ba:	f108 0103 	add.w	r1, r8, #3
 80081be:	1b49      	subs	r1, r1, r5
 80081c0:	f021 0103 	bic.w	r1, r1, #3
 80081c4:	3d03      	subs	r5, #3
 80081c6:	45a8      	cmp	r8, r5
 80081c8:	bf38      	it	cc
 80081ca:	2100      	movcc	r1, #0
 80081cc:	440b      	add	r3, r1
 80081ce:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 80081d2:	b191      	cbz	r1, 80081fa <__mdiff+0x11a>
 80081d4:	6117      	str	r7, [r2, #16]
 80081d6:	e79d      	b.n	8008114 <__mdiff+0x34>
 80081d8:	f854 1b04 	ldr.w	r1, [r4], #4
 80081dc:	46e6      	mov	lr, ip
 80081de:	0c08      	lsrs	r0, r1, #16
 80081e0:	fa1c fc81 	uxtah	ip, ip, r1
 80081e4:	4471      	add	r1, lr
 80081e6:	eb00 402c 	add.w	r0, r0, ip, asr #16
 80081ea:	b289      	uxth	r1, r1
 80081ec:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 80081f0:	f846 1b04 	str.w	r1, [r6], #4
 80081f4:	ea4f 4c20 	mov.w	ip, r0, asr #16
 80081f8:	e7dd      	b.n	80081b6 <__mdiff+0xd6>
 80081fa:	3f01      	subs	r7, #1
 80081fc:	e7e7      	b.n	80081ce <__mdiff+0xee>
 80081fe:	bf00      	nop
 8008200:	08008e94 	.word	0x08008e94
 8008204:	08008ea5 	.word	0x08008ea5

08008208 <__d2b>:
 8008208:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800820c:	460f      	mov	r7, r1
 800820e:	2101      	movs	r1, #1
 8008210:	ec59 8b10 	vmov	r8, r9, d0
 8008214:	4616      	mov	r6, r2
 8008216:	f7ff fccd 	bl	8007bb4 <_Balloc>
 800821a:	4604      	mov	r4, r0
 800821c:	b930      	cbnz	r0, 800822c <__d2b+0x24>
 800821e:	4602      	mov	r2, r0
 8008220:	4b23      	ldr	r3, [pc, #140]	@ (80082b0 <__d2b+0xa8>)
 8008222:	4824      	ldr	r0, [pc, #144]	@ (80082b4 <__d2b+0xac>)
 8008224:	f240 310f 	movw	r1, #783	@ 0x30f
 8008228:	f000 fa64 	bl	80086f4 <__assert_func>
 800822c:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8008230:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8008234:	b10d      	cbz	r5, 800823a <__d2b+0x32>
 8008236:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800823a:	9301      	str	r3, [sp, #4]
 800823c:	f1b8 0300 	subs.w	r3, r8, #0
 8008240:	d023      	beq.n	800828a <__d2b+0x82>
 8008242:	4668      	mov	r0, sp
 8008244:	9300      	str	r3, [sp, #0]
 8008246:	f7ff fd7c 	bl	8007d42 <__lo0bits>
 800824a:	e9dd 1200 	ldrd	r1, r2, [sp]
 800824e:	b1d0      	cbz	r0, 8008286 <__d2b+0x7e>
 8008250:	f1c0 0320 	rsb	r3, r0, #32
 8008254:	fa02 f303 	lsl.w	r3, r2, r3
 8008258:	430b      	orrs	r3, r1
 800825a:	40c2      	lsrs	r2, r0
 800825c:	6163      	str	r3, [r4, #20]
 800825e:	9201      	str	r2, [sp, #4]
 8008260:	9b01      	ldr	r3, [sp, #4]
 8008262:	61a3      	str	r3, [r4, #24]
 8008264:	2b00      	cmp	r3, #0
 8008266:	bf0c      	ite	eq
 8008268:	2201      	moveq	r2, #1
 800826a:	2202      	movne	r2, #2
 800826c:	6122      	str	r2, [r4, #16]
 800826e:	b1a5      	cbz	r5, 800829a <__d2b+0x92>
 8008270:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 8008274:	4405      	add	r5, r0
 8008276:	603d      	str	r5, [r7, #0]
 8008278:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 800827c:	6030      	str	r0, [r6, #0]
 800827e:	4620      	mov	r0, r4
 8008280:	b003      	add	sp, #12
 8008282:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8008286:	6161      	str	r1, [r4, #20]
 8008288:	e7ea      	b.n	8008260 <__d2b+0x58>
 800828a:	a801      	add	r0, sp, #4
 800828c:	f7ff fd59 	bl	8007d42 <__lo0bits>
 8008290:	9b01      	ldr	r3, [sp, #4]
 8008292:	6163      	str	r3, [r4, #20]
 8008294:	3020      	adds	r0, #32
 8008296:	2201      	movs	r2, #1
 8008298:	e7e8      	b.n	800826c <__d2b+0x64>
 800829a:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800829e:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 80082a2:	6038      	str	r0, [r7, #0]
 80082a4:	6918      	ldr	r0, [r3, #16]
 80082a6:	f7ff fd2d 	bl	8007d04 <__hi0bits>
 80082aa:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 80082ae:	e7e5      	b.n	800827c <__d2b+0x74>
 80082b0:	08008e94 	.word	0x08008e94
 80082b4:	08008ea5 	.word	0x08008ea5

080082b8 <__ssputs_r>:
 80082b8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80082bc:	688e      	ldr	r6, [r1, #8]
 80082be:	461f      	mov	r7, r3
 80082c0:	42be      	cmp	r6, r7
 80082c2:	680b      	ldr	r3, [r1, #0]
 80082c4:	4682      	mov	sl, r0
 80082c6:	460c      	mov	r4, r1
 80082c8:	4690      	mov	r8, r2
 80082ca:	d82d      	bhi.n	8008328 <__ssputs_r+0x70>
 80082cc:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80082d0:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 80082d4:	d026      	beq.n	8008324 <__ssputs_r+0x6c>
 80082d6:	6965      	ldr	r5, [r4, #20]
 80082d8:	6909      	ldr	r1, [r1, #16]
 80082da:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80082de:	eba3 0901 	sub.w	r9, r3, r1
 80082e2:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80082e6:	1c7b      	adds	r3, r7, #1
 80082e8:	444b      	add	r3, r9
 80082ea:	106d      	asrs	r5, r5, #1
 80082ec:	429d      	cmp	r5, r3
 80082ee:	bf38      	it	cc
 80082f0:	461d      	movcc	r5, r3
 80082f2:	0553      	lsls	r3, r2, #21
 80082f4:	d527      	bpl.n	8008346 <__ssputs_r+0x8e>
 80082f6:	4629      	mov	r1, r5
 80082f8:	f7fd fee0 	bl	80060bc <_malloc_r>
 80082fc:	4606      	mov	r6, r0
 80082fe:	b360      	cbz	r0, 800835a <__ssputs_r+0xa2>
 8008300:	6921      	ldr	r1, [r4, #16]
 8008302:	464a      	mov	r2, r9
 8008304:	f7fe fdb1 	bl	8006e6a <memcpy>
 8008308:	89a3      	ldrh	r3, [r4, #12]
 800830a:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800830e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008312:	81a3      	strh	r3, [r4, #12]
 8008314:	6126      	str	r6, [r4, #16]
 8008316:	6165      	str	r5, [r4, #20]
 8008318:	444e      	add	r6, r9
 800831a:	eba5 0509 	sub.w	r5, r5, r9
 800831e:	6026      	str	r6, [r4, #0]
 8008320:	60a5      	str	r5, [r4, #8]
 8008322:	463e      	mov	r6, r7
 8008324:	42be      	cmp	r6, r7
 8008326:	d900      	bls.n	800832a <__ssputs_r+0x72>
 8008328:	463e      	mov	r6, r7
 800832a:	6820      	ldr	r0, [r4, #0]
 800832c:	4632      	mov	r2, r6
 800832e:	4641      	mov	r1, r8
 8008330:	f000 f9c6 	bl	80086c0 <memmove>
 8008334:	68a3      	ldr	r3, [r4, #8]
 8008336:	1b9b      	subs	r3, r3, r6
 8008338:	60a3      	str	r3, [r4, #8]
 800833a:	6823      	ldr	r3, [r4, #0]
 800833c:	4433      	add	r3, r6
 800833e:	6023      	str	r3, [r4, #0]
 8008340:	2000      	movs	r0, #0
 8008342:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008346:	462a      	mov	r2, r5
 8008348:	f000 fa18 	bl	800877c <_realloc_r>
 800834c:	4606      	mov	r6, r0
 800834e:	2800      	cmp	r0, #0
 8008350:	d1e0      	bne.n	8008314 <__ssputs_r+0x5c>
 8008352:	6921      	ldr	r1, [r4, #16]
 8008354:	4650      	mov	r0, sl
 8008356:	f7ff fbe3 	bl	8007b20 <_free_r>
 800835a:	230c      	movs	r3, #12
 800835c:	f8ca 3000 	str.w	r3, [sl]
 8008360:	89a3      	ldrh	r3, [r4, #12]
 8008362:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8008366:	81a3      	strh	r3, [r4, #12]
 8008368:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800836c:	e7e9      	b.n	8008342 <__ssputs_r+0x8a>
	...

08008370 <_svfiprintf_r>:
 8008370:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008374:	4698      	mov	r8, r3
 8008376:	898b      	ldrh	r3, [r1, #12]
 8008378:	061b      	lsls	r3, r3, #24
 800837a:	b09d      	sub	sp, #116	@ 0x74
 800837c:	4607      	mov	r7, r0
 800837e:	460d      	mov	r5, r1
 8008380:	4614      	mov	r4, r2
 8008382:	d510      	bpl.n	80083a6 <_svfiprintf_r+0x36>
 8008384:	690b      	ldr	r3, [r1, #16]
 8008386:	b973      	cbnz	r3, 80083a6 <_svfiprintf_r+0x36>
 8008388:	2140      	movs	r1, #64	@ 0x40
 800838a:	f7fd fe97 	bl	80060bc <_malloc_r>
 800838e:	6028      	str	r0, [r5, #0]
 8008390:	6128      	str	r0, [r5, #16]
 8008392:	b930      	cbnz	r0, 80083a2 <_svfiprintf_r+0x32>
 8008394:	230c      	movs	r3, #12
 8008396:	603b      	str	r3, [r7, #0]
 8008398:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800839c:	b01d      	add	sp, #116	@ 0x74
 800839e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80083a2:	2340      	movs	r3, #64	@ 0x40
 80083a4:	616b      	str	r3, [r5, #20]
 80083a6:	2300      	movs	r3, #0
 80083a8:	9309      	str	r3, [sp, #36]	@ 0x24
 80083aa:	2320      	movs	r3, #32
 80083ac:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80083b0:	f8cd 800c 	str.w	r8, [sp, #12]
 80083b4:	2330      	movs	r3, #48	@ 0x30
 80083b6:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8008554 <_svfiprintf_r+0x1e4>
 80083ba:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80083be:	f04f 0901 	mov.w	r9, #1
 80083c2:	4623      	mov	r3, r4
 80083c4:	469a      	mov	sl, r3
 80083c6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80083ca:	b10a      	cbz	r2, 80083d0 <_svfiprintf_r+0x60>
 80083cc:	2a25      	cmp	r2, #37	@ 0x25
 80083ce:	d1f9      	bne.n	80083c4 <_svfiprintf_r+0x54>
 80083d0:	ebba 0b04 	subs.w	fp, sl, r4
 80083d4:	d00b      	beq.n	80083ee <_svfiprintf_r+0x7e>
 80083d6:	465b      	mov	r3, fp
 80083d8:	4622      	mov	r2, r4
 80083da:	4629      	mov	r1, r5
 80083dc:	4638      	mov	r0, r7
 80083de:	f7ff ff6b 	bl	80082b8 <__ssputs_r>
 80083e2:	3001      	adds	r0, #1
 80083e4:	f000 80a7 	beq.w	8008536 <_svfiprintf_r+0x1c6>
 80083e8:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80083ea:	445a      	add	r2, fp
 80083ec:	9209      	str	r2, [sp, #36]	@ 0x24
 80083ee:	f89a 3000 	ldrb.w	r3, [sl]
 80083f2:	2b00      	cmp	r3, #0
 80083f4:	f000 809f 	beq.w	8008536 <_svfiprintf_r+0x1c6>
 80083f8:	2300      	movs	r3, #0
 80083fa:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80083fe:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8008402:	f10a 0a01 	add.w	sl, sl, #1
 8008406:	9304      	str	r3, [sp, #16]
 8008408:	9307      	str	r3, [sp, #28]
 800840a:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800840e:	931a      	str	r3, [sp, #104]	@ 0x68
 8008410:	4654      	mov	r4, sl
 8008412:	2205      	movs	r2, #5
 8008414:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008418:	484e      	ldr	r0, [pc, #312]	@ (8008554 <_svfiprintf_r+0x1e4>)
 800841a:	f7f7 fef9 	bl	8000210 <memchr>
 800841e:	9a04      	ldr	r2, [sp, #16]
 8008420:	b9d8      	cbnz	r0, 800845a <_svfiprintf_r+0xea>
 8008422:	06d0      	lsls	r0, r2, #27
 8008424:	bf44      	itt	mi
 8008426:	2320      	movmi	r3, #32
 8008428:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800842c:	0711      	lsls	r1, r2, #28
 800842e:	bf44      	itt	mi
 8008430:	232b      	movmi	r3, #43	@ 0x2b
 8008432:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8008436:	f89a 3000 	ldrb.w	r3, [sl]
 800843a:	2b2a      	cmp	r3, #42	@ 0x2a
 800843c:	d015      	beq.n	800846a <_svfiprintf_r+0xfa>
 800843e:	9a07      	ldr	r2, [sp, #28]
 8008440:	4654      	mov	r4, sl
 8008442:	2000      	movs	r0, #0
 8008444:	f04f 0c0a 	mov.w	ip, #10
 8008448:	4621      	mov	r1, r4
 800844a:	f811 3b01 	ldrb.w	r3, [r1], #1
 800844e:	3b30      	subs	r3, #48	@ 0x30
 8008450:	2b09      	cmp	r3, #9
 8008452:	d94b      	bls.n	80084ec <_svfiprintf_r+0x17c>
 8008454:	b1b0      	cbz	r0, 8008484 <_svfiprintf_r+0x114>
 8008456:	9207      	str	r2, [sp, #28]
 8008458:	e014      	b.n	8008484 <_svfiprintf_r+0x114>
 800845a:	eba0 0308 	sub.w	r3, r0, r8
 800845e:	fa09 f303 	lsl.w	r3, r9, r3
 8008462:	4313      	orrs	r3, r2
 8008464:	9304      	str	r3, [sp, #16]
 8008466:	46a2      	mov	sl, r4
 8008468:	e7d2      	b.n	8008410 <_svfiprintf_r+0xa0>
 800846a:	9b03      	ldr	r3, [sp, #12]
 800846c:	1d19      	adds	r1, r3, #4
 800846e:	681b      	ldr	r3, [r3, #0]
 8008470:	9103      	str	r1, [sp, #12]
 8008472:	2b00      	cmp	r3, #0
 8008474:	bfbb      	ittet	lt
 8008476:	425b      	neglt	r3, r3
 8008478:	f042 0202 	orrlt.w	r2, r2, #2
 800847c:	9307      	strge	r3, [sp, #28]
 800847e:	9307      	strlt	r3, [sp, #28]
 8008480:	bfb8      	it	lt
 8008482:	9204      	strlt	r2, [sp, #16]
 8008484:	7823      	ldrb	r3, [r4, #0]
 8008486:	2b2e      	cmp	r3, #46	@ 0x2e
 8008488:	d10a      	bne.n	80084a0 <_svfiprintf_r+0x130>
 800848a:	7863      	ldrb	r3, [r4, #1]
 800848c:	2b2a      	cmp	r3, #42	@ 0x2a
 800848e:	d132      	bne.n	80084f6 <_svfiprintf_r+0x186>
 8008490:	9b03      	ldr	r3, [sp, #12]
 8008492:	1d1a      	adds	r2, r3, #4
 8008494:	681b      	ldr	r3, [r3, #0]
 8008496:	9203      	str	r2, [sp, #12]
 8008498:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800849c:	3402      	adds	r4, #2
 800849e:	9305      	str	r3, [sp, #20]
 80084a0:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8008564 <_svfiprintf_r+0x1f4>
 80084a4:	7821      	ldrb	r1, [r4, #0]
 80084a6:	2203      	movs	r2, #3
 80084a8:	4650      	mov	r0, sl
 80084aa:	f7f7 feb1 	bl	8000210 <memchr>
 80084ae:	b138      	cbz	r0, 80084c0 <_svfiprintf_r+0x150>
 80084b0:	9b04      	ldr	r3, [sp, #16]
 80084b2:	eba0 000a 	sub.w	r0, r0, sl
 80084b6:	2240      	movs	r2, #64	@ 0x40
 80084b8:	4082      	lsls	r2, r0
 80084ba:	4313      	orrs	r3, r2
 80084bc:	3401      	adds	r4, #1
 80084be:	9304      	str	r3, [sp, #16]
 80084c0:	f814 1b01 	ldrb.w	r1, [r4], #1
 80084c4:	4824      	ldr	r0, [pc, #144]	@ (8008558 <_svfiprintf_r+0x1e8>)
 80084c6:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80084ca:	2206      	movs	r2, #6
 80084cc:	f7f7 fea0 	bl	8000210 <memchr>
 80084d0:	2800      	cmp	r0, #0
 80084d2:	d036      	beq.n	8008542 <_svfiprintf_r+0x1d2>
 80084d4:	4b21      	ldr	r3, [pc, #132]	@ (800855c <_svfiprintf_r+0x1ec>)
 80084d6:	bb1b      	cbnz	r3, 8008520 <_svfiprintf_r+0x1b0>
 80084d8:	9b03      	ldr	r3, [sp, #12]
 80084da:	3307      	adds	r3, #7
 80084dc:	f023 0307 	bic.w	r3, r3, #7
 80084e0:	3308      	adds	r3, #8
 80084e2:	9303      	str	r3, [sp, #12]
 80084e4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80084e6:	4433      	add	r3, r6
 80084e8:	9309      	str	r3, [sp, #36]	@ 0x24
 80084ea:	e76a      	b.n	80083c2 <_svfiprintf_r+0x52>
 80084ec:	fb0c 3202 	mla	r2, ip, r2, r3
 80084f0:	460c      	mov	r4, r1
 80084f2:	2001      	movs	r0, #1
 80084f4:	e7a8      	b.n	8008448 <_svfiprintf_r+0xd8>
 80084f6:	2300      	movs	r3, #0
 80084f8:	3401      	adds	r4, #1
 80084fa:	9305      	str	r3, [sp, #20]
 80084fc:	4619      	mov	r1, r3
 80084fe:	f04f 0c0a 	mov.w	ip, #10
 8008502:	4620      	mov	r0, r4
 8008504:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008508:	3a30      	subs	r2, #48	@ 0x30
 800850a:	2a09      	cmp	r2, #9
 800850c:	d903      	bls.n	8008516 <_svfiprintf_r+0x1a6>
 800850e:	2b00      	cmp	r3, #0
 8008510:	d0c6      	beq.n	80084a0 <_svfiprintf_r+0x130>
 8008512:	9105      	str	r1, [sp, #20]
 8008514:	e7c4      	b.n	80084a0 <_svfiprintf_r+0x130>
 8008516:	fb0c 2101 	mla	r1, ip, r1, r2
 800851a:	4604      	mov	r4, r0
 800851c:	2301      	movs	r3, #1
 800851e:	e7f0      	b.n	8008502 <_svfiprintf_r+0x192>
 8008520:	ab03      	add	r3, sp, #12
 8008522:	9300      	str	r3, [sp, #0]
 8008524:	462a      	mov	r2, r5
 8008526:	4b0e      	ldr	r3, [pc, #56]	@ (8008560 <_svfiprintf_r+0x1f0>)
 8008528:	a904      	add	r1, sp, #16
 800852a:	4638      	mov	r0, r7
 800852c:	f7fd fef2 	bl	8006314 <_printf_float>
 8008530:	1c42      	adds	r2, r0, #1
 8008532:	4606      	mov	r6, r0
 8008534:	d1d6      	bne.n	80084e4 <_svfiprintf_r+0x174>
 8008536:	89ab      	ldrh	r3, [r5, #12]
 8008538:	065b      	lsls	r3, r3, #25
 800853a:	f53f af2d 	bmi.w	8008398 <_svfiprintf_r+0x28>
 800853e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8008540:	e72c      	b.n	800839c <_svfiprintf_r+0x2c>
 8008542:	ab03      	add	r3, sp, #12
 8008544:	9300      	str	r3, [sp, #0]
 8008546:	462a      	mov	r2, r5
 8008548:	4b05      	ldr	r3, [pc, #20]	@ (8008560 <_svfiprintf_r+0x1f0>)
 800854a:	a904      	add	r1, sp, #16
 800854c:	4638      	mov	r0, r7
 800854e:	f7fe f979 	bl	8006844 <_printf_i>
 8008552:	e7ed      	b.n	8008530 <_svfiprintf_r+0x1c0>
 8008554:	08009000 	.word	0x08009000
 8008558:	0800900a 	.word	0x0800900a
 800855c:	08006315 	.word	0x08006315
 8008560:	080082b9 	.word	0x080082b9
 8008564:	08009006 	.word	0x08009006

08008568 <__sflush_r>:
 8008568:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800856c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008570:	0716      	lsls	r6, r2, #28
 8008572:	4605      	mov	r5, r0
 8008574:	460c      	mov	r4, r1
 8008576:	d454      	bmi.n	8008622 <__sflush_r+0xba>
 8008578:	684b      	ldr	r3, [r1, #4]
 800857a:	2b00      	cmp	r3, #0
 800857c:	dc02      	bgt.n	8008584 <__sflush_r+0x1c>
 800857e:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8008580:	2b00      	cmp	r3, #0
 8008582:	dd48      	ble.n	8008616 <__sflush_r+0xae>
 8008584:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8008586:	2e00      	cmp	r6, #0
 8008588:	d045      	beq.n	8008616 <__sflush_r+0xae>
 800858a:	2300      	movs	r3, #0
 800858c:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8008590:	682f      	ldr	r7, [r5, #0]
 8008592:	6a21      	ldr	r1, [r4, #32]
 8008594:	602b      	str	r3, [r5, #0]
 8008596:	d030      	beq.n	80085fa <__sflush_r+0x92>
 8008598:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800859a:	89a3      	ldrh	r3, [r4, #12]
 800859c:	0759      	lsls	r1, r3, #29
 800859e:	d505      	bpl.n	80085ac <__sflush_r+0x44>
 80085a0:	6863      	ldr	r3, [r4, #4]
 80085a2:	1ad2      	subs	r2, r2, r3
 80085a4:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 80085a6:	b10b      	cbz	r3, 80085ac <__sflush_r+0x44>
 80085a8:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 80085aa:	1ad2      	subs	r2, r2, r3
 80085ac:	2300      	movs	r3, #0
 80085ae:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80085b0:	6a21      	ldr	r1, [r4, #32]
 80085b2:	4628      	mov	r0, r5
 80085b4:	47b0      	blx	r6
 80085b6:	1c43      	adds	r3, r0, #1
 80085b8:	89a3      	ldrh	r3, [r4, #12]
 80085ba:	d106      	bne.n	80085ca <__sflush_r+0x62>
 80085bc:	6829      	ldr	r1, [r5, #0]
 80085be:	291d      	cmp	r1, #29
 80085c0:	d82b      	bhi.n	800861a <__sflush_r+0xb2>
 80085c2:	4a2a      	ldr	r2, [pc, #168]	@ (800866c <__sflush_r+0x104>)
 80085c4:	410a      	asrs	r2, r1
 80085c6:	07d6      	lsls	r6, r2, #31
 80085c8:	d427      	bmi.n	800861a <__sflush_r+0xb2>
 80085ca:	2200      	movs	r2, #0
 80085cc:	6062      	str	r2, [r4, #4]
 80085ce:	04d9      	lsls	r1, r3, #19
 80085d0:	6922      	ldr	r2, [r4, #16]
 80085d2:	6022      	str	r2, [r4, #0]
 80085d4:	d504      	bpl.n	80085e0 <__sflush_r+0x78>
 80085d6:	1c42      	adds	r2, r0, #1
 80085d8:	d101      	bne.n	80085de <__sflush_r+0x76>
 80085da:	682b      	ldr	r3, [r5, #0]
 80085dc:	b903      	cbnz	r3, 80085e0 <__sflush_r+0x78>
 80085de:	6560      	str	r0, [r4, #84]	@ 0x54
 80085e0:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80085e2:	602f      	str	r7, [r5, #0]
 80085e4:	b1b9      	cbz	r1, 8008616 <__sflush_r+0xae>
 80085e6:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80085ea:	4299      	cmp	r1, r3
 80085ec:	d002      	beq.n	80085f4 <__sflush_r+0x8c>
 80085ee:	4628      	mov	r0, r5
 80085f0:	f7ff fa96 	bl	8007b20 <_free_r>
 80085f4:	2300      	movs	r3, #0
 80085f6:	6363      	str	r3, [r4, #52]	@ 0x34
 80085f8:	e00d      	b.n	8008616 <__sflush_r+0xae>
 80085fa:	2301      	movs	r3, #1
 80085fc:	4628      	mov	r0, r5
 80085fe:	47b0      	blx	r6
 8008600:	4602      	mov	r2, r0
 8008602:	1c50      	adds	r0, r2, #1
 8008604:	d1c9      	bne.n	800859a <__sflush_r+0x32>
 8008606:	682b      	ldr	r3, [r5, #0]
 8008608:	2b00      	cmp	r3, #0
 800860a:	d0c6      	beq.n	800859a <__sflush_r+0x32>
 800860c:	2b1d      	cmp	r3, #29
 800860e:	d001      	beq.n	8008614 <__sflush_r+0xac>
 8008610:	2b16      	cmp	r3, #22
 8008612:	d11e      	bne.n	8008652 <__sflush_r+0xea>
 8008614:	602f      	str	r7, [r5, #0]
 8008616:	2000      	movs	r0, #0
 8008618:	e022      	b.n	8008660 <__sflush_r+0xf8>
 800861a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800861e:	b21b      	sxth	r3, r3
 8008620:	e01b      	b.n	800865a <__sflush_r+0xf2>
 8008622:	690f      	ldr	r7, [r1, #16]
 8008624:	2f00      	cmp	r7, #0
 8008626:	d0f6      	beq.n	8008616 <__sflush_r+0xae>
 8008628:	0793      	lsls	r3, r2, #30
 800862a:	680e      	ldr	r6, [r1, #0]
 800862c:	bf08      	it	eq
 800862e:	694b      	ldreq	r3, [r1, #20]
 8008630:	600f      	str	r7, [r1, #0]
 8008632:	bf18      	it	ne
 8008634:	2300      	movne	r3, #0
 8008636:	eba6 0807 	sub.w	r8, r6, r7
 800863a:	608b      	str	r3, [r1, #8]
 800863c:	f1b8 0f00 	cmp.w	r8, #0
 8008640:	dde9      	ble.n	8008616 <__sflush_r+0xae>
 8008642:	6a21      	ldr	r1, [r4, #32]
 8008644:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8008646:	4643      	mov	r3, r8
 8008648:	463a      	mov	r2, r7
 800864a:	4628      	mov	r0, r5
 800864c:	47b0      	blx	r6
 800864e:	2800      	cmp	r0, #0
 8008650:	dc08      	bgt.n	8008664 <__sflush_r+0xfc>
 8008652:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008656:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800865a:	81a3      	strh	r3, [r4, #12]
 800865c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8008660:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008664:	4407      	add	r7, r0
 8008666:	eba8 0800 	sub.w	r8, r8, r0
 800866a:	e7e7      	b.n	800863c <__sflush_r+0xd4>
 800866c:	dfbffffe 	.word	0xdfbffffe

08008670 <_fflush_r>:
 8008670:	b538      	push	{r3, r4, r5, lr}
 8008672:	690b      	ldr	r3, [r1, #16]
 8008674:	4605      	mov	r5, r0
 8008676:	460c      	mov	r4, r1
 8008678:	b913      	cbnz	r3, 8008680 <_fflush_r+0x10>
 800867a:	2500      	movs	r5, #0
 800867c:	4628      	mov	r0, r5
 800867e:	bd38      	pop	{r3, r4, r5, pc}
 8008680:	b118      	cbz	r0, 800868a <_fflush_r+0x1a>
 8008682:	6a03      	ldr	r3, [r0, #32]
 8008684:	b90b      	cbnz	r3, 800868a <_fflush_r+0x1a>
 8008686:	f7fe fa89 	bl	8006b9c <__sinit>
 800868a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800868e:	2b00      	cmp	r3, #0
 8008690:	d0f3      	beq.n	800867a <_fflush_r+0xa>
 8008692:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8008694:	07d0      	lsls	r0, r2, #31
 8008696:	d404      	bmi.n	80086a2 <_fflush_r+0x32>
 8008698:	0599      	lsls	r1, r3, #22
 800869a:	d402      	bmi.n	80086a2 <_fflush_r+0x32>
 800869c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800869e:	f7fe fbe2 	bl	8006e66 <__retarget_lock_acquire_recursive>
 80086a2:	4628      	mov	r0, r5
 80086a4:	4621      	mov	r1, r4
 80086a6:	f7ff ff5f 	bl	8008568 <__sflush_r>
 80086aa:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80086ac:	07da      	lsls	r2, r3, #31
 80086ae:	4605      	mov	r5, r0
 80086b0:	d4e4      	bmi.n	800867c <_fflush_r+0xc>
 80086b2:	89a3      	ldrh	r3, [r4, #12]
 80086b4:	059b      	lsls	r3, r3, #22
 80086b6:	d4e1      	bmi.n	800867c <_fflush_r+0xc>
 80086b8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80086ba:	f7fe fbd5 	bl	8006e68 <__retarget_lock_release_recursive>
 80086be:	e7dd      	b.n	800867c <_fflush_r+0xc>

080086c0 <memmove>:
 80086c0:	4288      	cmp	r0, r1
 80086c2:	b510      	push	{r4, lr}
 80086c4:	eb01 0402 	add.w	r4, r1, r2
 80086c8:	d902      	bls.n	80086d0 <memmove+0x10>
 80086ca:	4284      	cmp	r4, r0
 80086cc:	4623      	mov	r3, r4
 80086ce:	d807      	bhi.n	80086e0 <memmove+0x20>
 80086d0:	1e43      	subs	r3, r0, #1
 80086d2:	42a1      	cmp	r1, r4
 80086d4:	d008      	beq.n	80086e8 <memmove+0x28>
 80086d6:	f811 2b01 	ldrb.w	r2, [r1], #1
 80086da:	f803 2f01 	strb.w	r2, [r3, #1]!
 80086de:	e7f8      	b.n	80086d2 <memmove+0x12>
 80086e0:	4402      	add	r2, r0
 80086e2:	4601      	mov	r1, r0
 80086e4:	428a      	cmp	r2, r1
 80086e6:	d100      	bne.n	80086ea <memmove+0x2a>
 80086e8:	bd10      	pop	{r4, pc}
 80086ea:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80086ee:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80086f2:	e7f7      	b.n	80086e4 <memmove+0x24>

080086f4 <__assert_func>:
 80086f4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80086f6:	4614      	mov	r4, r2
 80086f8:	461a      	mov	r2, r3
 80086fa:	4b09      	ldr	r3, [pc, #36]	@ (8008720 <__assert_func+0x2c>)
 80086fc:	681b      	ldr	r3, [r3, #0]
 80086fe:	4605      	mov	r5, r0
 8008700:	68d8      	ldr	r0, [r3, #12]
 8008702:	b954      	cbnz	r4, 800871a <__assert_func+0x26>
 8008704:	4b07      	ldr	r3, [pc, #28]	@ (8008724 <__assert_func+0x30>)
 8008706:	461c      	mov	r4, r3
 8008708:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800870c:	9100      	str	r1, [sp, #0]
 800870e:	462b      	mov	r3, r5
 8008710:	4905      	ldr	r1, [pc, #20]	@ (8008728 <__assert_func+0x34>)
 8008712:	f000 f86f 	bl	80087f4 <fiprintf>
 8008716:	f7fd fc9f 	bl	8006058 <abort>
 800871a:	4b04      	ldr	r3, [pc, #16]	@ (800872c <__assert_func+0x38>)
 800871c:	e7f4      	b.n	8008708 <__assert_func+0x14>
 800871e:	bf00      	nop
 8008720:	20000018 	.word	0x20000018
 8008724:	08009056 	.word	0x08009056
 8008728:	08009028 	.word	0x08009028
 800872c:	0800901b 	.word	0x0800901b

08008730 <_calloc_r>:
 8008730:	b570      	push	{r4, r5, r6, lr}
 8008732:	fba1 5402 	umull	r5, r4, r1, r2
 8008736:	b93c      	cbnz	r4, 8008748 <_calloc_r+0x18>
 8008738:	4629      	mov	r1, r5
 800873a:	f7fd fcbf 	bl	80060bc <_malloc_r>
 800873e:	4606      	mov	r6, r0
 8008740:	b928      	cbnz	r0, 800874e <_calloc_r+0x1e>
 8008742:	2600      	movs	r6, #0
 8008744:	4630      	mov	r0, r6
 8008746:	bd70      	pop	{r4, r5, r6, pc}
 8008748:	220c      	movs	r2, #12
 800874a:	6002      	str	r2, [r0, #0]
 800874c:	e7f9      	b.n	8008742 <_calloc_r+0x12>
 800874e:	462a      	mov	r2, r5
 8008750:	4621      	mov	r1, r4
 8008752:	f7fe fabc 	bl	8006cce <memset>
 8008756:	e7f5      	b.n	8008744 <_calloc_r+0x14>

08008758 <__ascii_mbtowc>:
 8008758:	b082      	sub	sp, #8
 800875a:	b901      	cbnz	r1, 800875e <__ascii_mbtowc+0x6>
 800875c:	a901      	add	r1, sp, #4
 800875e:	b142      	cbz	r2, 8008772 <__ascii_mbtowc+0x1a>
 8008760:	b14b      	cbz	r3, 8008776 <__ascii_mbtowc+0x1e>
 8008762:	7813      	ldrb	r3, [r2, #0]
 8008764:	600b      	str	r3, [r1, #0]
 8008766:	7812      	ldrb	r2, [r2, #0]
 8008768:	1e10      	subs	r0, r2, #0
 800876a:	bf18      	it	ne
 800876c:	2001      	movne	r0, #1
 800876e:	b002      	add	sp, #8
 8008770:	4770      	bx	lr
 8008772:	4610      	mov	r0, r2
 8008774:	e7fb      	b.n	800876e <__ascii_mbtowc+0x16>
 8008776:	f06f 0001 	mvn.w	r0, #1
 800877a:	e7f8      	b.n	800876e <__ascii_mbtowc+0x16>

0800877c <_realloc_r>:
 800877c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008780:	4680      	mov	r8, r0
 8008782:	4615      	mov	r5, r2
 8008784:	460c      	mov	r4, r1
 8008786:	b921      	cbnz	r1, 8008792 <_realloc_r+0x16>
 8008788:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800878c:	4611      	mov	r1, r2
 800878e:	f7fd bc95 	b.w	80060bc <_malloc_r>
 8008792:	b92a      	cbnz	r2, 80087a0 <_realloc_r+0x24>
 8008794:	f7ff f9c4 	bl	8007b20 <_free_r>
 8008798:	2400      	movs	r4, #0
 800879a:	4620      	mov	r0, r4
 800879c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80087a0:	f000 f83a 	bl	8008818 <_malloc_usable_size_r>
 80087a4:	4285      	cmp	r5, r0
 80087a6:	4606      	mov	r6, r0
 80087a8:	d802      	bhi.n	80087b0 <_realloc_r+0x34>
 80087aa:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 80087ae:	d8f4      	bhi.n	800879a <_realloc_r+0x1e>
 80087b0:	4629      	mov	r1, r5
 80087b2:	4640      	mov	r0, r8
 80087b4:	f7fd fc82 	bl	80060bc <_malloc_r>
 80087b8:	4607      	mov	r7, r0
 80087ba:	2800      	cmp	r0, #0
 80087bc:	d0ec      	beq.n	8008798 <_realloc_r+0x1c>
 80087be:	42b5      	cmp	r5, r6
 80087c0:	462a      	mov	r2, r5
 80087c2:	4621      	mov	r1, r4
 80087c4:	bf28      	it	cs
 80087c6:	4632      	movcs	r2, r6
 80087c8:	f7fe fb4f 	bl	8006e6a <memcpy>
 80087cc:	4621      	mov	r1, r4
 80087ce:	4640      	mov	r0, r8
 80087d0:	f7ff f9a6 	bl	8007b20 <_free_r>
 80087d4:	463c      	mov	r4, r7
 80087d6:	e7e0      	b.n	800879a <_realloc_r+0x1e>

080087d8 <__ascii_wctomb>:
 80087d8:	4603      	mov	r3, r0
 80087da:	4608      	mov	r0, r1
 80087dc:	b141      	cbz	r1, 80087f0 <__ascii_wctomb+0x18>
 80087de:	2aff      	cmp	r2, #255	@ 0xff
 80087e0:	d904      	bls.n	80087ec <__ascii_wctomb+0x14>
 80087e2:	228a      	movs	r2, #138	@ 0x8a
 80087e4:	601a      	str	r2, [r3, #0]
 80087e6:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80087ea:	4770      	bx	lr
 80087ec:	700a      	strb	r2, [r1, #0]
 80087ee:	2001      	movs	r0, #1
 80087f0:	4770      	bx	lr
	...

080087f4 <fiprintf>:
 80087f4:	b40e      	push	{r1, r2, r3}
 80087f6:	b503      	push	{r0, r1, lr}
 80087f8:	4601      	mov	r1, r0
 80087fa:	ab03      	add	r3, sp, #12
 80087fc:	4805      	ldr	r0, [pc, #20]	@ (8008814 <fiprintf+0x20>)
 80087fe:	f853 2b04 	ldr.w	r2, [r3], #4
 8008802:	6800      	ldr	r0, [r0, #0]
 8008804:	9301      	str	r3, [sp, #4]
 8008806:	f000 f839 	bl	800887c <_vfiprintf_r>
 800880a:	b002      	add	sp, #8
 800880c:	f85d eb04 	ldr.w	lr, [sp], #4
 8008810:	b003      	add	sp, #12
 8008812:	4770      	bx	lr
 8008814:	20000018 	.word	0x20000018

08008818 <_malloc_usable_size_r>:
 8008818:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800881c:	1f18      	subs	r0, r3, #4
 800881e:	2b00      	cmp	r3, #0
 8008820:	bfbc      	itt	lt
 8008822:	580b      	ldrlt	r3, [r1, r0]
 8008824:	18c0      	addlt	r0, r0, r3
 8008826:	4770      	bx	lr

08008828 <__sfputc_r>:
 8008828:	6893      	ldr	r3, [r2, #8]
 800882a:	3b01      	subs	r3, #1
 800882c:	2b00      	cmp	r3, #0
 800882e:	b410      	push	{r4}
 8008830:	6093      	str	r3, [r2, #8]
 8008832:	da08      	bge.n	8008846 <__sfputc_r+0x1e>
 8008834:	6994      	ldr	r4, [r2, #24]
 8008836:	42a3      	cmp	r3, r4
 8008838:	db01      	blt.n	800883e <__sfputc_r+0x16>
 800883a:	290a      	cmp	r1, #10
 800883c:	d103      	bne.n	8008846 <__sfputc_r+0x1e>
 800883e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008842:	f000 b933 	b.w	8008aac <__swbuf_r>
 8008846:	6813      	ldr	r3, [r2, #0]
 8008848:	1c58      	adds	r0, r3, #1
 800884a:	6010      	str	r0, [r2, #0]
 800884c:	7019      	strb	r1, [r3, #0]
 800884e:	4608      	mov	r0, r1
 8008850:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008854:	4770      	bx	lr

08008856 <__sfputs_r>:
 8008856:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008858:	4606      	mov	r6, r0
 800885a:	460f      	mov	r7, r1
 800885c:	4614      	mov	r4, r2
 800885e:	18d5      	adds	r5, r2, r3
 8008860:	42ac      	cmp	r4, r5
 8008862:	d101      	bne.n	8008868 <__sfputs_r+0x12>
 8008864:	2000      	movs	r0, #0
 8008866:	e007      	b.n	8008878 <__sfputs_r+0x22>
 8008868:	f814 1b01 	ldrb.w	r1, [r4], #1
 800886c:	463a      	mov	r2, r7
 800886e:	4630      	mov	r0, r6
 8008870:	f7ff ffda 	bl	8008828 <__sfputc_r>
 8008874:	1c43      	adds	r3, r0, #1
 8008876:	d1f3      	bne.n	8008860 <__sfputs_r+0xa>
 8008878:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800887c <_vfiprintf_r>:
 800887c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008880:	460d      	mov	r5, r1
 8008882:	b09d      	sub	sp, #116	@ 0x74
 8008884:	4614      	mov	r4, r2
 8008886:	4698      	mov	r8, r3
 8008888:	4606      	mov	r6, r0
 800888a:	b118      	cbz	r0, 8008894 <_vfiprintf_r+0x18>
 800888c:	6a03      	ldr	r3, [r0, #32]
 800888e:	b90b      	cbnz	r3, 8008894 <_vfiprintf_r+0x18>
 8008890:	f7fe f984 	bl	8006b9c <__sinit>
 8008894:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8008896:	07d9      	lsls	r1, r3, #31
 8008898:	d405      	bmi.n	80088a6 <_vfiprintf_r+0x2a>
 800889a:	89ab      	ldrh	r3, [r5, #12]
 800889c:	059a      	lsls	r2, r3, #22
 800889e:	d402      	bmi.n	80088a6 <_vfiprintf_r+0x2a>
 80088a0:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80088a2:	f7fe fae0 	bl	8006e66 <__retarget_lock_acquire_recursive>
 80088a6:	89ab      	ldrh	r3, [r5, #12]
 80088a8:	071b      	lsls	r3, r3, #28
 80088aa:	d501      	bpl.n	80088b0 <_vfiprintf_r+0x34>
 80088ac:	692b      	ldr	r3, [r5, #16]
 80088ae:	b99b      	cbnz	r3, 80088d8 <_vfiprintf_r+0x5c>
 80088b0:	4629      	mov	r1, r5
 80088b2:	4630      	mov	r0, r6
 80088b4:	f000 f938 	bl	8008b28 <__swsetup_r>
 80088b8:	b170      	cbz	r0, 80088d8 <_vfiprintf_r+0x5c>
 80088ba:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80088bc:	07dc      	lsls	r4, r3, #31
 80088be:	d504      	bpl.n	80088ca <_vfiprintf_r+0x4e>
 80088c0:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80088c4:	b01d      	add	sp, #116	@ 0x74
 80088c6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80088ca:	89ab      	ldrh	r3, [r5, #12]
 80088cc:	0598      	lsls	r0, r3, #22
 80088ce:	d4f7      	bmi.n	80088c0 <_vfiprintf_r+0x44>
 80088d0:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80088d2:	f7fe fac9 	bl	8006e68 <__retarget_lock_release_recursive>
 80088d6:	e7f3      	b.n	80088c0 <_vfiprintf_r+0x44>
 80088d8:	2300      	movs	r3, #0
 80088da:	9309      	str	r3, [sp, #36]	@ 0x24
 80088dc:	2320      	movs	r3, #32
 80088de:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80088e2:	f8cd 800c 	str.w	r8, [sp, #12]
 80088e6:	2330      	movs	r3, #48	@ 0x30
 80088e8:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8008a98 <_vfiprintf_r+0x21c>
 80088ec:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80088f0:	f04f 0901 	mov.w	r9, #1
 80088f4:	4623      	mov	r3, r4
 80088f6:	469a      	mov	sl, r3
 80088f8:	f813 2b01 	ldrb.w	r2, [r3], #1
 80088fc:	b10a      	cbz	r2, 8008902 <_vfiprintf_r+0x86>
 80088fe:	2a25      	cmp	r2, #37	@ 0x25
 8008900:	d1f9      	bne.n	80088f6 <_vfiprintf_r+0x7a>
 8008902:	ebba 0b04 	subs.w	fp, sl, r4
 8008906:	d00b      	beq.n	8008920 <_vfiprintf_r+0xa4>
 8008908:	465b      	mov	r3, fp
 800890a:	4622      	mov	r2, r4
 800890c:	4629      	mov	r1, r5
 800890e:	4630      	mov	r0, r6
 8008910:	f7ff ffa1 	bl	8008856 <__sfputs_r>
 8008914:	3001      	adds	r0, #1
 8008916:	f000 80a7 	beq.w	8008a68 <_vfiprintf_r+0x1ec>
 800891a:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800891c:	445a      	add	r2, fp
 800891e:	9209      	str	r2, [sp, #36]	@ 0x24
 8008920:	f89a 3000 	ldrb.w	r3, [sl]
 8008924:	2b00      	cmp	r3, #0
 8008926:	f000 809f 	beq.w	8008a68 <_vfiprintf_r+0x1ec>
 800892a:	2300      	movs	r3, #0
 800892c:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8008930:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8008934:	f10a 0a01 	add.w	sl, sl, #1
 8008938:	9304      	str	r3, [sp, #16]
 800893a:	9307      	str	r3, [sp, #28]
 800893c:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8008940:	931a      	str	r3, [sp, #104]	@ 0x68
 8008942:	4654      	mov	r4, sl
 8008944:	2205      	movs	r2, #5
 8008946:	f814 1b01 	ldrb.w	r1, [r4], #1
 800894a:	4853      	ldr	r0, [pc, #332]	@ (8008a98 <_vfiprintf_r+0x21c>)
 800894c:	f7f7 fc60 	bl	8000210 <memchr>
 8008950:	9a04      	ldr	r2, [sp, #16]
 8008952:	b9d8      	cbnz	r0, 800898c <_vfiprintf_r+0x110>
 8008954:	06d1      	lsls	r1, r2, #27
 8008956:	bf44      	itt	mi
 8008958:	2320      	movmi	r3, #32
 800895a:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800895e:	0713      	lsls	r3, r2, #28
 8008960:	bf44      	itt	mi
 8008962:	232b      	movmi	r3, #43	@ 0x2b
 8008964:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8008968:	f89a 3000 	ldrb.w	r3, [sl]
 800896c:	2b2a      	cmp	r3, #42	@ 0x2a
 800896e:	d015      	beq.n	800899c <_vfiprintf_r+0x120>
 8008970:	9a07      	ldr	r2, [sp, #28]
 8008972:	4654      	mov	r4, sl
 8008974:	2000      	movs	r0, #0
 8008976:	f04f 0c0a 	mov.w	ip, #10
 800897a:	4621      	mov	r1, r4
 800897c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8008980:	3b30      	subs	r3, #48	@ 0x30
 8008982:	2b09      	cmp	r3, #9
 8008984:	d94b      	bls.n	8008a1e <_vfiprintf_r+0x1a2>
 8008986:	b1b0      	cbz	r0, 80089b6 <_vfiprintf_r+0x13a>
 8008988:	9207      	str	r2, [sp, #28]
 800898a:	e014      	b.n	80089b6 <_vfiprintf_r+0x13a>
 800898c:	eba0 0308 	sub.w	r3, r0, r8
 8008990:	fa09 f303 	lsl.w	r3, r9, r3
 8008994:	4313      	orrs	r3, r2
 8008996:	9304      	str	r3, [sp, #16]
 8008998:	46a2      	mov	sl, r4
 800899a:	e7d2      	b.n	8008942 <_vfiprintf_r+0xc6>
 800899c:	9b03      	ldr	r3, [sp, #12]
 800899e:	1d19      	adds	r1, r3, #4
 80089a0:	681b      	ldr	r3, [r3, #0]
 80089a2:	9103      	str	r1, [sp, #12]
 80089a4:	2b00      	cmp	r3, #0
 80089a6:	bfbb      	ittet	lt
 80089a8:	425b      	neglt	r3, r3
 80089aa:	f042 0202 	orrlt.w	r2, r2, #2
 80089ae:	9307      	strge	r3, [sp, #28]
 80089b0:	9307      	strlt	r3, [sp, #28]
 80089b2:	bfb8      	it	lt
 80089b4:	9204      	strlt	r2, [sp, #16]
 80089b6:	7823      	ldrb	r3, [r4, #0]
 80089b8:	2b2e      	cmp	r3, #46	@ 0x2e
 80089ba:	d10a      	bne.n	80089d2 <_vfiprintf_r+0x156>
 80089bc:	7863      	ldrb	r3, [r4, #1]
 80089be:	2b2a      	cmp	r3, #42	@ 0x2a
 80089c0:	d132      	bne.n	8008a28 <_vfiprintf_r+0x1ac>
 80089c2:	9b03      	ldr	r3, [sp, #12]
 80089c4:	1d1a      	adds	r2, r3, #4
 80089c6:	681b      	ldr	r3, [r3, #0]
 80089c8:	9203      	str	r2, [sp, #12]
 80089ca:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80089ce:	3402      	adds	r4, #2
 80089d0:	9305      	str	r3, [sp, #20]
 80089d2:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8008aa8 <_vfiprintf_r+0x22c>
 80089d6:	7821      	ldrb	r1, [r4, #0]
 80089d8:	2203      	movs	r2, #3
 80089da:	4650      	mov	r0, sl
 80089dc:	f7f7 fc18 	bl	8000210 <memchr>
 80089e0:	b138      	cbz	r0, 80089f2 <_vfiprintf_r+0x176>
 80089e2:	9b04      	ldr	r3, [sp, #16]
 80089e4:	eba0 000a 	sub.w	r0, r0, sl
 80089e8:	2240      	movs	r2, #64	@ 0x40
 80089ea:	4082      	lsls	r2, r0
 80089ec:	4313      	orrs	r3, r2
 80089ee:	3401      	adds	r4, #1
 80089f0:	9304      	str	r3, [sp, #16]
 80089f2:	f814 1b01 	ldrb.w	r1, [r4], #1
 80089f6:	4829      	ldr	r0, [pc, #164]	@ (8008a9c <_vfiprintf_r+0x220>)
 80089f8:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80089fc:	2206      	movs	r2, #6
 80089fe:	f7f7 fc07 	bl	8000210 <memchr>
 8008a02:	2800      	cmp	r0, #0
 8008a04:	d03f      	beq.n	8008a86 <_vfiprintf_r+0x20a>
 8008a06:	4b26      	ldr	r3, [pc, #152]	@ (8008aa0 <_vfiprintf_r+0x224>)
 8008a08:	bb1b      	cbnz	r3, 8008a52 <_vfiprintf_r+0x1d6>
 8008a0a:	9b03      	ldr	r3, [sp, #12]
 8008a0c:	3307      	adds	r3, #7
 8008a0e:	f023 0307 	bic.w	r3, r3, #7
 8008a12:	3308      	adds	r3, #8
 8008a14:	9303      	str	r3, [sp, #12]
 8008a16:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008a18:	443b      	add	r3, r7
 8008a1a:	9309      	str	r3, [sp, #36]	@ 0x24
 8008a1c:	e76a      	b.n	80088f4 <_vfiprintf_r+0x78>
 8008a1e:	fb0c 3202 	mla	r2, ip, r2, r3
 8008a22:	460c      	mov	r4, r1
 8008a24:	2001      	movs	r0, #1
 8008a26:	e7a8      	b.n	800897a <_vfiprintf_r+0xfe>
 8008a28:	2300      	movs	r3, #0
 8008a2a:	3401      	adds	r4, #1
 8008a2c:	9305      	str	r3, [sp, #20]
 8008a2e:	4619      	mov	r1, r3
 8008a30:	f04f 0c0a 	mov.w	ip, #10
 8008a34:	4620      	mov	r0, r4
 8008a36:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008a3a:	3a30      	subs	r2, #48	@ 0x30
 8008a3c:	2a09      	cmp	r2, #9
 8008a3e:	d903      	bls.n	8008a48 <_vfiprintf_r+0x1cc>
 8008a40:	2b00      	cmp	r3, #0
 8008a42:	d0c6      	beq.n	80089d2 <_vfiprintf_r+0x156>
 8008a44:	9105      	str	r1, [sp, #20]
 8008a46:	e7c4      	b.n	80089d2 <_vfiprintf_r+0x156>
 8008a48:	fb0c 2101 	mla	r1, ip, r1, r2
 8008a4c:	4604      	mov	r4, r0
 8008a4e:	2301      	movs	r3, #1
 8008a50:	e7f0      	b.n	8008a34 <_vfiprintf_r+0x1b8>
 8008a52:	ab03      	add	r3, sp, #12
 8008a54:	9300      	str	r3, [sp, #0]
 8008a56:	462a      	mov	r2, r5
 8008a58:	4b12      	ldr	r3, [pc, #72]	@ (8008aa4 <_vfiprintf_r+0x228>)
 8008a5a:	a904      	add	r1, sp, #16
 8008a5c:	4630      	mov	r0, r6
 8008a5e:	f7fd fc59 	bl	8006314 <_printf_float>
 8008a62:	4607      	mov	r7, r0
 8008a64:	1c78      	adds	r0, r7, #1
 8008a66:	d1d6      	bne.n	8008a16 <_vfiprintf_r+0x19a>
 8008a68:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8008a6a:	07d9      	lsls	r1, r3, #31
 8008a6c:	d405      	bmi.n	8008a7a <_vfiprintf_r+0x1fe>
 8008a6e:	89ab      	ldrh	r3, [r5, #12]
 8008a70:	059a      	lsls	r2, r3, #22
 8008a72:	d402      	bmi.n	8008a7a <_vfiprintf_r+0x1fe>
 8008a74:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8008a76:	f7fe f9f7 	bl	8006e68 <__retarget_lock_release_recursive>
 8008a7a:	89ab      	ldrh	r3, [r5, #12]
 8008a7c:	065b      	lsls	r3, r3, #25
 8008a7e:	f53f af1f 	bmi.w	80088c0 <_vfiprintf_r+0x44>
 8008a82:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8008a84:	e71e      	b.n	80088c4 <_vfiprintf_r+0x48>
 8008a86:	ab03      	add	r3, sp, #12
 8008a88:	9300      	str	r3, [sp, #0]
 8008a8a:	462a      	mov	r2, r5
 8008a8c:	4b05      	ldr	r3, [pc, #20]	@ (8008aa4 <_vfiprintf_r+0x228>)
 8008a8e:	a904      	add	r1, sp, #16
 8008a90:	4630      	mov	r0, r6
 8008a92:	f7fd fed7 	bl	8006844 <_printf_i>
 8008a96:	e7e4      	b.n	8008a62 <_vfiprintf_r+0x1e6>
 8008a98:	08009000 	.word	0x08009000
 8008a9c:	0800900a 	.word	0x0800900a
 8008aa0:	08006315 	.word	0x08006315
 8008aa4:	08008857 	.word	0x08008857
 8008aa8:	08009006 	.word	0x08009006

08008aac <__swbuf_r>:
 8008aac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008aae:	460e      	mov	r6, r1
 8008ab0:	4614      	mov	r4, r2
 8008ab2:	4605      	mov	r5, r0
 8008ab4:	b118      	cbz	r0, 8008abe <__swbuf_r+0x12>
 8008ab6:	6a03      	ldr	r3, [r0, #32]
 8008ab8:	b90b      	cbnz	r3, 8008abe <__swbuf_r+0x12>
 8008aba:	f7fe f86f 	bl	8006b9c <__sinit>
 8008abe:	69a3      	ldr	r3, [r4, #24]
 8008ac0:	60a3      	str	r3, [r4, #8]
 8008ac2:	89a3      	ldrh	r3, [r4, #12]
 8008ac4:	071a      	lsls	r2, r3, #28
 8008ac6:	d501      	bpl.n	8008acc <__swbuf_r+0x20>
 8008ac8:	6923      	ldr	r3, [r4, #16]
 8008aca:	b943      	cbnz	r3, 8008ade <__swbuf_r+0x32>
 8008acc:	4621      	mov	r1, r4
 8008ace:	4628      	mov	r0, r5
 8008ad0:	f000 f82a 	bl	8008b28 <__swsetup_r>
 8008ad4:	b118      	cbz	r0, 8008ade <__swbuf_r+0x32>
 8008ad6:	f04f 37ff 	mov.w	r7, #4294967295	@ 0xffffffff
 8008ada:	4638      	mov	r0, r7
 8008adc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008ade:	6823      	ldr	r3, [r4, #0]
 8008ae0:	6922      	ldr	r2, [r4, #16]
 8008ae2:	1a98      	subs	r0, r3, r2
 8008ae4:	6963      	ldr	r3, [r4, #20]
 8008ae6:	b2f6      	uxtb	r6, r6
 8008ae8:	4283      	cmp	r3, r0
 8008aea:	4637      	mov	r7, r6
 8008aec:	dc05      	bgt.n	8008afa <__swbuf_r+0x4e>
 8008aee:	4621      	mov	r1, r4
 8008af0:	4628      	mov	r0, r5
 8008af2:	f7ff fdbd 	bl	8008670 <_fflush_r>
 8008af6:	2800      	cmp	r0, #0
 8008af8:	d1ed      	bne.n	8008ad6 <__swbuf_r+0x2a>
 8008afa:	68a3      	ldr	r3, [r4, #8]
 8008afc:	3b01      	subs	r3, #1
 8008afe:	60a3      	str	r3, [r4, #8]
 8008b00:	6823      	ldr	r3, [r4, #0]
 8008b02:	1c5a      	adds	r2, r3, #1
 8008b04:	6022      	str	r2, [r4, #0]
 8008b06:	701e      	strb	r6, [r3, #0]
 8008b08:	6962      	ldr	r2, [r4, #20]
 8008b0a:	1c43      	adds	r3, r0, #1
 8008b0c:	429a      	cmp	r2, r3
 8008b0e:	d004      	beq.n	8008b1a <__swbuf_r+0x6e>
 8008b10:	89a3      	ldrh	r3, [r4, #12]
 8008b12:	07db      	lsls	r3, r3, #31
 8008b14:	d5e1      	bpl.n	8008ada <__swbuf_r+0x2e>
 8008b16:	2e0a      	cmp	r6, #10
 8008b18:	d1df      	bne.n	8008ada <__swbuf_r+0x2e>
 8008b1a:	4621      	mov	r1, r4
 8008b1c:	4628      	mov	r0, r5
 8008b1e:	f7ff fda7 	bl	8008670 <_fflush_r>
 8008b22:	2800      	cmp	r0, #0
 8008b24:	d0d9      	beq.n	8008ada <__swbuf_r+0x2e>
 8008b26:	e7d6      	b.n	8008ad6 <__swbuf_r+0x2a>

08008b28 <__swsetup_r>:
 8008b28:	b538      	push	{r3, r4, r5, lr}
 8008b2a:	4b29      	ldr	r3, [pc, #164]	@ (8008bd0 <__swsetup_r+0xa8>)
 8008b2c:	4605      	mov	r5, r0
 8008b2e:	6818      	ldr	r0, [r3, #0]
 8008b30:	460c      	mov	r4, r1
 8008b32:	b118      	cbz	r0, 8008b3c <__swsetup_r+0x14>
 8008b34:	6a03      	ldr	r3, [r0, #32]
 8008b36:	b90b      	cbnz	r3, 8008b3c <__swsetup_r+0x14>
 8008b38:	f7fe f830 	bl	8006b9c <__sinit>
 8008b3c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008b40:	0719      	lsls	r1, r3, #28
 8008b42:	d422      	bmi.n	8008b8a <__swsetup_r+0x62>
 8008b44:	06da      	lsls	r2, r3, #27
 8008b46:	d407      	bmi.n	8008b58 <__swsetup_r+0x30>
 8008b48:	2209      	movs	r2, #9
 8008b4a:	602a      	str	r2, [r5, #0]
 8008b4c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8008b50:	81a3      	strh	r3, [r4, #12]
 8008b52:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8008b56:	e033      	b.n	8008bc0 <__swsetup_r+0x98>
 8008b58:	0758      	lsls	r0, r3, #29
 8008b5a:	d512      	bpl.n	8008b82 <__swsetup_r+0x5a>
 8008b5c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8008b5e:	b141      	cbz	r1, 8008b72 <__swsetup_r+0x4a>
 8008b60:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8008b64:	4299      	cmp	r1, r3
 8008b66:	d002      	beq.n	8008b6e <__swsetup_r+0x46>
 8008b68:	4628      	mov	r0, r5
 8008b6a:	f7fe ffd9 	bl	8007b20 <_free_r>
 8008b6e:	2300      	movs	r3, #0
 8008b70:	6363      	str	r3, [r4, #52]	@ 0x34
 8008b72:	89a3      	ldrh	r3, [r4, #12]
 8008b74:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8008b78:	81a3      	strh	r3, [r4, #12]
 8008b7a:	2300      	movs	r3, #0
 8008b7c:	6063      	str	r3, [r4, #4]
 8008b7e:	6923      	ldr	r3, [r4, #16]
 8008b80:	6023      	str	r3, [r4, #0]
 8008b82:	89a3      	ldrh	r3, [r4, #12]
 8008b84:	f043 0308 	orr.w	r3, r3, #8
 8008b88:	81a3      	strh	r3, [r4, #12]
 8008b8a:	6923      	ldr	r3, [r4, #16]
 8008b8c:	b94b      	cbnz	r3, 8008ba2 <__swsetup_r+0x7a>
 8008b8e:	89a3      	ldrh	r3, [r4, #12]
 8008b90:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8008b94:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8008b98:	d003      	beq.n	8008ba2 <__swsetup_r+0x7a>
 8008b9a:	4621      	mov	r1, r4
 8008b9c:	4628      	mov	r0, r5
 8008b9e:	f000 f83f 	bl	8008c20 <__smakebuf_r>
 8008ba2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008ba6:	f013 0201 	ands.w	r2, r3, #1
 8008baa:	d00a      	beq.n	8008bc2 <__swsetup_r+0x9a>
 8008bac:	2200      	movs	r2, #0
 8008bae:	60a2      	str	r2, [r4, #8]
 8008bb0:	6962      	ldr	r2, [r4, #20]
 8008bb2:	4252      	negs	r2, r2
 8008bb4:	61a2      	str	r2, [r4, #24]
 8008bb6:	6922      	ldr	r2, [r4, #16]
 8008bb8:	b942      	cbnz	r2, 8008bcc <__swsetup_r+0xa4>
 8008bba:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8008bbe:	d1c5      	bne.n	8008b4c <__swsetup_r+0x24>
 8008bc0:	bd38      	pop	{r3, r4, r5, pc}
 8008bc2:	0799      	lsls	r1, r3, #30
 8008bc4:	bf58      	it	pl
 8008bc6:	6962      	ldrpl	r2, [r4, #20]
 8008bc8:	60a2      	str	r2, [r4, #8]
 8008bca:	e7f4      	b.n	8008bb6 <__swsetup_r+0x8e>
 8008bcc:	2000      	movs	r0, #0
 8008bce:	e7f7      	b.n	8008bc0 <__swsetup_r+0x98>
 8008bd0:	20000018 	.word	0x20000018

08008bd4 <__swhatbuf_r>:
 8008bd4:	b570      	push	{r4, r5, r6, lr}
 8008bd6:	460c      	mov	r4, r1
 8008bd8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008bdc:	2900      	cmp	r1, #0
 8008bde:	b096      	sub	sp, #88	@ 0x58
 8008be0:	4615      	mov	r5, r2
 8008be2:	461e      	mov	r6, r3
 8008be4:	da0d      	bge.n	8008c02 <__swhatbuf_r+0x2e>
 8008be6:	89a3      	ldrh	r3, [r4, #12]
 8008be8:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8008bec:	f04f 0100 	mov.w	r1, #0
 8008bf0:	bf14      	ite	ne
 8008bf2:	2340      	movne	r3, #64	@ 0x40
 8008bf4:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8008bf8:	2000      	movs	r0, #0
 8008bfa:	6031      	str	r1, [r6, #0]
 8008bfc:	602b      	str	r3, [r5, #0]
 8008bfe:	b016      	add	sp, #88	@ 0x58
 8008c00:	bd70      	pop	{r4, r5, r6, pc}
 8008c02:	466a      	mov	r2, sp
 8008c04:	f000 f848 	bl	8008c98 <_fstat_r>
 8008c08:	2800      	cmp	r0, #0
 8008c0a:	dbec      	blt.n	8008be6 <__swhatbuf_r+0x12>
 8008c0c:	9901      	ldr	r1, [sp, #4]
 8008c0e:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8008c12:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8008c16:	4259      	negs	r1, r3
 8008c18:	4159      	adcs	r1, r3
 8008c1a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8008c1e:	e7eb      	b.n	8008bf8 <__swhatbuf_r+0x24>

08008c20 <__smakebuf_r>:
 8008c20:	898b      	ldrh	r3, [r1, #12]
 8008c22:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8008c24:	079d      	lsls	r5, r3, #30
 8008c26:	4606      	mov	r6, r0
 8008c28:	460c      	mov	r4, r1
 8008c2a:	d507      	bpl.n	8008c3c <__smakebuf_r+0x1c>
 8008c2c:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8008c30:	6023      	str	r3, [r4, #0]
 8008c32:	6123      	str	r3, [r4, #16]
 8008c34:	2301      	movs	r3, #1
 8008c36:	6163      	str	r3, [r4, #20]
 8008c38:	b003      	add	sp, #12
 8008c3a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008c3c:	ab01      	add	r3, sp, #4
 8008c3e:	466a      	mov	r2, sp
 8008c40:	f7ff ffc8 	bl	8008bd4 <__swhatbuf_r>
 8008c44:	9f00      	ldr	r7, [sp, #0]
 8008c46:	4605      	mov	r5, r0
 8008c48:	4639      	mov	r1, r7
 8008c4a:	4630      	mov	r0, r6
 8008c4c:	f7fd fa36 	bl	80060bc <_malloc_r>
 8008c50:	b948      	cbnz	r0, 8008c66 <__smakebuf_r+0x46>
 8008c52:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008c56:	059a      	lsls	r2, r3, #22
 8008c58:	d4ee      	bmi.n	8008c38 <__smakebuf_r+0x18>
 8008c5a:	f023 0303 	bic.w	r3, r3, #3
 8008c5e:	f043 0302 	orr.w	r3, r3, #2
 8008c62:	81a3      	strh	r3, [r4, #12]
 8008c64:	e7e2      	b.n	8008c2c <__smakebuf_r+0xc>
 8008c66:	89a3      	ldrh	r3, [r4, #12]
 8008c68:	6020      	str	r0, [r4, #0]
 8008c6a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008c6e:	81a3      	strh	r3, [r4, #12]
 8008c70:	9b01      	ldr	r3, [sp, #4]
 8008c72:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8008c76:	b15b      	cbz	r3, 8008c90 <__smakebuf_r+0x70>
 8008c78:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008c7c:	4630      	mov	r0, r6
 8008c7e:	f000 f81d 	bl	8008cbc <_isatty_r>
 8008c82:	b128      	cbz	r0, 8008c90 <__smakebuf_r+0x70>
 8008c84:	89a3      	ldrh	r3, [r4, #12]
 8008c86:	f023 0303 	bic.w	r3, r3, #3
 8008c8a:	f043 0301 	orr.w	r3, r3, #1
 8008c8e:	81a3      	strh	r3, [r4, #12]
 8008c90:	89a3      	ldrh	r3, [r4, #12]
 8008c92:	431d      	orrs	r5, r3
 8008c94:	81a5      	strh	r5, [r4, #12]
 8008c96:	e7cf      	b.n	8008c38 <__smakebuf_r+0x18>

08008c98 <_fstat_r>:
 8008c98:	b538      	push	{r3, r4, r5, lr}
 8008c9a:	4d07      	ldr	r5, [pc, #28]	@ (8008cb8 <_fstat_r+0x20>)
 8008c9c:	2300      	movs	r3, #0
 8008c9e:	4604      	mov	r4, r0
 8008ca0:	4608      	mov	r0, r1
 8008ca2:	4611      	mov	r1, r2
 8008ca4:	602b      	str	r3, [r5, #0]
 8008ca6:	f000 f821 	bl	8008cec <_fstat>
 8008caa:	1c43      	adds	r3, r0, #1
 8008cac:	d102      	bne.n	8008cb4 <_fstat_r+0x1c>
 8008cae:	682b      	ldr	r3, [r5, #0]
 8008cb0:	b103      	cbz	r3, 8008cb4 <_fstat_r+0x1c>
 8008cb2:	6023      	str	r3, [r4, #0]
 8008cb4:	bd38      	pop	{r3, r4, r5, pc}
 8008cb6:	bf00      	nop
 8008cb8:	200004b0 	.word	0x200004b0

08008cbc <_isatty_r>:
 8008cbc:	b538      	push	{r3, r4, r5, lr}
 8008cbe:	4d06      	ldr	r5, [pc, #24]	@ (8008cd8 <_isatty_r+0x1c>)
 8008cc0:	2300      	movs	r3, #0
 8008cc2:	4604      	mov	r4, r0
 8008cc4:	4608      	mov	r0, r1
 8008cc6:	602b      	str	r3, [r5, #0]
 8008cc8:	f000 f820 	bl	8008d0c <_isatty>
 8008ccc:	1c43      	adds	r3, r0, #1
 8008cce:	d102      	bne.n	8008cd6 <_isatty_r+0x1a>
 8008cd0:	682b      	ldr	r3, [r5, #0]
 8008cd2:	b103      	cbz	r3, 8008cd6 <_isatty_r+0x1a>
 8008cd4:	6023      	str	r3, [r4, #0]
 8008cd6:	bd38      	pop	{r3, r4, r5, pc}
 8008cd8:	200004b0 	.word	0x200004b0

08008cdc <_close>:
 8008cdc:	4b02      	ldr	r3, [pc, #8]	@ (8008ce8 <_close+0xc>)
 8008cde:	2258      	movs	r2, #88	@ 0x58
 8008ce0:	601a      	str	r2, [r3, #0]
 8008ce2:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8008ce6:	4770      	bx	lr
 8008ce8:	200004b0 	.word	0x200004b0

08008cec <_fstat>:
 8008cec:	4b02      	ldr	r3, [pc, #8]	@ (8008cf8 <_fstat+0xc>)
 8008cee:	2258      	movs	r2, #88	@ 0x58
 8008cf0:	601a      	str	r2, [r3, #0]
 8008cf2:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8008cf6:	4770      	bx	lr
 8008cf8:	200004b0 	.word	0x200004b0

08008cfc <_getpid>:
 8008cfc:	4b02      	ldr	r3, [pc, #8]	@ (8008d08 <_getpid+0xc>)
 8008cfe:	2258      	movs	r2, #88	@ 0x58
 8008d00:	601a      	str	r2, [r3, #0]
 8008d02:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8008d06:	4770      	bx	lr
 8008d08:	200004b0 	.word	0x200004b0

08008d0c <_isatty>:
 8008d0c:	4b02      	ldr	r3, [pc, #8]	@ (8008d18 <_isatty+0xc>)
 8008d0e:	2258      	movs	r2, #88	@ 0x58
 8008d10:	601a      	str	r2, [r3, #0]
 8008d12:	2000      	movs	r0, #0
 8008d14:	4770      	bx	lr
 8008d16:	bf00      	nop
 8008d18:	200004b0 	.word	0x200004b0

08008d1c <_kill>:
 8008d1c:	4b02      	ldr	r3, [pc, #8]	@ (8008d28 <_kill+0xc>)
 8008d1e:	2258      	movs	r2, #88	@ 0x58
 8008d20:	601a      	str	r2, [r3, #0]
 8008d22:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8008d26:	4770      	bx	lr
 8008d28:	200004b0 	.word	0x200004b0

08008d2c <_lseek>:
 8008d2c:	4b02      	ldr	r3, [pc, #8]	@ (8008d38 <_lseek+0xc>)
 8008d2e:	2258      	movs	r2, #88	@ 0x58
 8008d30:	601a      	str	r2, [r3, #0]
 8008d32:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8008d36:	4770      	bx	lr
 8008d38:	200004b0 	.word	0x200004b0

08008d3c <_read>:
 8008d3c:	4b02      	ldr	r3, [pc, #8]	@ (8008d48 <_read+0xc>)
 8008d3e:	2258      	movs	r2, #88	@ 0x58
 8008d40:	601a      	str	r2, [r3, #0]
 8008d42:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8008d46:	4770      	bx	lr
 8008d48:	200004b0 	.word	0x200004b0

08008d4c <_sbrk>:
 8008d4c:	4a04      	ldr	r2, [pc, #16]	@ (8008d60 <_sbrk+0x14>)
 8008d4e:	6811      	ldr	r1, [r2, #0]
 8008d50:	4603      	mov	r3, r0
 8008d52:	b909      	cbnz	r1, 8008d58 <_sbrk+0xc>
 8008d54:	4903      	ldr	r1, [pc, #12]	@ (8008d64 <_sbrk+0x18>)
 8008d56:	6011      	str	r1, [r2, #0]
 8008d58:	6810      	ldr	r0, [r2, #0]
 8008d5a:	4403      	add	r3, r0
 8008d5c:	6013      	str	r3, [r2, #0]
 8008d5e:	4770      	bx	lr
 8008d60:	200004b8 	.word	0x200004b8
 8008d64:	200004c0 	.word	0x200004c0

08008d68 <_write>:
 8008d68:	4b02      	ldr	r3, [pc, #8]	@ (8008d74 <_write+0xc>)
 8008d6a:	2258      	movs	r2, #88	@ 0x58
 8008d6c:	601a      	str	r2, [r3, #0]
 8008d6e:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8008d72:	4770      	bx	lr
 8008d74:	200004b0 	.word	0x200004b0

08008d78 <_exit>:
 8008d78:	e7fe      	b.n	8008d78 <_exit>
	...

08008d7c <_init>:
 8008d7c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008d7e:	bf00      	nop
 8008d80:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008d82:	bc08      	pop	{r3}
 8008d84:	469e      	mov	lr, r3
 8008d86:	4770      	bx	lr

08008d88 <_fini>:
 8008d88:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008d8a:	bf00      	nop
 8008d8c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008d8e:	bc08      	pop	{r3}
 8008d90:	469e      	mov	lr, r3
 8008d92:	4770      	bx	lr
